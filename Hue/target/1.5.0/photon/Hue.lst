
c:/Users/Josh/Documents/Hue-light-switch/Hue/target/1.5.0/photon/Hue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002ca4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a2cc0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  20000000  080a2cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000a1c  2000008c  2000008c  0003008c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2d50  080a2d50  00022d50  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a2d78  080a2d78  00022d78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cd346  00000000  00000000  00022d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011ec7  00000000  00000000  000f00c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000155e9  00000000  00000000  00101f89  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002340  00000000  00000000  00117572  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000039b0  00000000  00000000  001198b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027e2f  00000000  00000000  0011d262  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00028900  00000000  00000000  00145091  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ad493  00000000  00000000  0016d991  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c470  00000000  00000000  0021ae24  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fa57 	bl	80a24e0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 fa5c 	bl	80a24f6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a2cc4 	.word	0x080a2cc4
 80a004c:	2000008c 	.word	0x2000008c
 80a0050:	2000008c 	.word	0x2000008c
 80a0054:	20000aa8 	.word	0x20000aa8
 80a0058:	20000aa8 	.word	0x20000aa8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fa1b 	bl	80a1498 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2c8c 	.word	0x080a2c8c
 80a0084:	080a2cc0 	.word	0x080a2cc0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b85a 	b.w	80a0140 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f8fd 	bl	80a028c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 b9c1 	b.w	80a141c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bcf9 	b.w	80a0a90 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bcff 	b.w	80a0aa0 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00b2:	6810      	ldr	r0, [r2, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
 80a00b6:	b510      	push	{r4, lr}
 80a00b8:	4604      	mov	r4, r0
 80a00ba:	3004      	adds	r0, #4
 80a00bc:	f000 ffe2 	bl	80a1084 <_ZN6StringD1Ev>
 80a00c0:	4620      	mov	r0, r4
 80a00c2:	bd10      	pop	{r4, pc}

080a00c4 <_ZN14http_request_tD1Ev>:
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
 80a00c4:	b510      	push	{r4, lr}
 80a00c6:	4604      	mov	r4, r0
 80a00c8:	303c      	adds	r0, #60	; 0x3c
 80a00ca:	f000 ffdb 	bl	80a1084 <_ZN6StringD1Ev>
 80a00ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a00d2:	f000 ffd7 	bl	80a1084 <_ZN6StringD1Ev>
 80a00d6:	4620      	mov	r0, r4
 80a00d8:	f000 ffd4 	bl	80a1084 <_ZN6StringD1Ev>
 80a00dc:	4620      	mov	r0, r4
 80a00de:	bd10      	pop	{r4, pc}

080a00e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.11>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a00e0:	b510      	push	{r4, lr}
 80a00e2:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a00e4:	6803      	ldr	r3, [r0, #0]
 80a00e6:	689b      	ldr	r3, [r3, #8]
 80a00e8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a00ea:	68a3      	ldr	r3, [r4, #8]
 80a00ec:	3b01      	subs	r3, #1
 80a00ee:	60a3      	str	r3, [r4, #8]
 80a00f0:	b92b      	cbnz	r3, 80a00fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.11+0x1e>
            _M_destroy();
 80a00f2:	6823      	ldr	r3, [r4, #0]
 80a00f4:	4620      	mov	r0, r4
        }
    }
 80a00f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a00fa:	68db      	ldr	r3, [r3, #12]
 80a00fc:	4718      	bx	r3
 80a00fe:	bd10      	pop	{r4, pc}

080a0100 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0100:	b510      	push	{r4, lr}
 80a0102:	4b06      	ldr	r3, [pc, #24]	; (80a011c <_ZN9TCPClientD1Ev+0x1c>)
 80a0104:	4604      	mov	r4, r0
 80a0106:	6003      	str	r3, [r0, #0]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0108:	6980      	ldr	r0, [r0, #24]
 80a010a:	b128      	cbz	r0, 80a0118 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a010c:	6843      	ldr	r3, [r0, #4]
 80a010e:	3b01      	subs	r3, #1
 80a0110:	6043      	str	r3, [r0, #4]
 80a0112:	b90b      	cbnz	r3, 80a0118 <_ZN9TCPClientD1Ev+0x18>
 80a0114:	f7ff ffe4 	bl	80a00e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.11>
 80a0118:	4620      	mov	r0, r4
 80a011a:	bd10      	pop	{r4, pc}
 80a011c:	080a289c 	.word	0x080a289c

080a0120 <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
 80a0120:	b510      	push	{r4, lr}
 80a0122:	4604      	mov	r4, r0
 80a0124:	f7ff ffec 	bl	80a0100 <_ZN9TCPClientD1Ev>
 80a0128:	4620      	mov	r0, r4
 80a012a:	bd10      	pop	{r4, pc}

080a012c <_ZN9TCPClientD0Ev>:
 80a012c:	b510      	push	{r4, lr}
 80a012e:	4604      	mov	r4, r0
 80a0130:	f7ff ffe6 	bl	80a0100 <_ZN9TCPClientD1Ev>
 80a0134:	4620      	mov	r0, r4
 80a0136:	211c      	movs	r1, #28
 80a0138:	f002 f862 	bl	80a2200 <_ZdlPvj>
 80a013c:	4620      	mov	r0, r4
 80a013e:	bd10      	pop	{r4, pc}

080a0140 <setup>:

http_request_t request;
http_response_t response;


void setup() {
 80a0140:	b510      	push	{r4, lr}
  pinMode(led1, OUTPUT);
 80a0142:	4b20      	ldr	r3, [pc, #128]	; (80a01c4 <setup+0x84>)

http_request_t request;
http_response_t response;


void setup() {
 80a0144:	b086      	sub	sp, #24
  pinMode(led1, OUTPUT);
 80a0146:	8818      	ldrh	r0, [r3, #0]
 80a0148:	2101      	movs	r1, #1
 80a014a:	f001 ff91 	bl	80a2070 <pinMode>
  pinMode(D0, OUTPUT); 
 80a014e:	2101      	movs	r1, #1
 80a0150:	2000      	movs	r0, #0
 80a0152:	f001 ff8d 	bl	80a2070 <pinMode>
  pinMode(A0, INPUT);
 80a0156:	2100      	movs	r1, #0
 80a0158:	200a      	movs	r0, #10
 80a015a:	f001 ff89 	bl	80a2070 <pinMode>
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
 80a015e:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
 80a0160:	230c      	movs	r3, #12
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
 80a0162:	9403      	str	r4, [sp, #12]
        extra.size = sizeof(extra);
 80a0164:	f8ad 300c 	strh.w	r3, [sp, #12]
        extra.update = update_string_variable;
 80a0168:	4b17      	ldr	r3, [pc, #92]	; (80a01c8 <setup+0x88>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a016a:	2204      	movs	r2, #4
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
 80a016c:	9304      	str	r3, [sp, #16]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a016e:	4917      	ldr	r1, [pc, #92]	; (80a01cc <setup+0x8c>)
 80a0170:	ab03      	add	r3, sp, #12
 80a0172:	4817      	ldr	r0, [pc, #92]	; (80a01d0 <setup+0x90>)
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
 80a0174:	9405      	str	r4, [sp, #20]
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a0176:	f000 fc6b 	bl	80a0a50 <spark_variable>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a017a:	4623      	mov	r3, r4
 80a017c:	2202      	movs	r2, #2
 80a017e:	4915      	ldr	r1, [pc, #84]	; (80a01d4 <setup+0x94>)
 80a0180:	4815      	ldr	r0, [pc, #84]	; (80a01d8 <setup+0x98>)
 80a0182:	f000 fc65 	bl	80a0a50 <spark_variable>
 80a0186:	4b15      	ldr	r3, [pc, #84]	; (80a01dc <setup+0x9c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0188:	a803      	add	r0, sp, #12
 80a018a:	781b      	ldrb	r3, [r3, #0]
 80a018c:	4622      	mov	r2, r4
 80a018e:	f88d 3000 	strb.w	r3, [sp]
 80a0192:	4913      	ldr	r1, [pc, #76]	; (80a01e0 <setup+0xa0>)
 80a0194:	233c      	movs	r3, #60	; 0x3c
 80a0196:	f001 faed 	bl	80a1774 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a019a:	9804      	ldr	r0, [sp, #16]
 80a019c:	b128      	cbz	r0, 80a01aa <setup+0x6a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a019e:	6843      	ldr	r3, [r0, #4]
 80a01a0:	3b01      	subs	r3, #1
 80a01a2:	6043      	str	r3, [r0, #4]
 80a01a4:	b90b      	cbnz	r3, 80a01aa <setup+0x6a>
 80a01a6:	f7ff ff9b 	bl	80a00e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.11>
  Particle.variable("light", status);
  Particle.variable("A_read", read_val);
  Particle.publish("Setup finished", PUBLIC);
  digitalWrite(D0,HIGH);
 80a01aa:	2101      	movs	r1, #1
 80a01ac:	2000      	movs	r0, #0
 80a01ae:	f001 ff70 	bl	80a2092 <digitalWrite>
  Serial.begin(9600);
 80a01b2:	f001 fd35 	bl	80a1c20 <_Z16_fetch_usbserialv>
 80a01b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a01ba:	f001 fd17 	bl	80a1bec <_ZN9USBSerial5beginEl>
}
 80a01be:	b006      	add	sp, #24
 80a01c0:	bd10      	pop	{r4, pc}
 80a01c2:	bf00      	nop
 80a01c4:	2000001c 	.word	0x2000001c
 80a01c8:	080a00b3 	.word	0x080a00b3
 80a01cc:	20000514 	.word	0x20000514
 80a01d0:	080a27d3 	.word	0x080a27d3
 80a01d4:	20000090 	.word	0x20000090
 80a01d8:	080a272c 	.word	0x080a272c
 80a01dc:	200000e0 	.word	0x200000e0
 80a01e0:	080a2733 	.word	0x080a2733

080a01e4 <_Z15do_light_updatebi>:
    read_val = analogRead(A0);
    delay(200);
}

// do_light_update - On/Off, HUE light ID number
void do_light_update(bool state, int light_id) { 
 80a01e4:	b530      	push	{r4, r5, lr}
 80a01e6:	460d      	mov	r5, r1
 80a01e8:	4604      	mov	r4, r0
 80a01ea:	b0b3      	sub	sp, #204	; 0xcc
    Serial.println("in do-light");
 80a01ec:	f001 fd18 	bl	80a1c20 <_Z16_fetch_usbserialv>
 80a01f0:	491a      	ldr	r1, [pc, #104]	; (80a025c <_Z15do_light_updatebi+0x78>)
 80a01f2:	f001 f853 	bl	80a129c <_ZN5Print7printlnEPKc>
    char path[128]; 
    char body[64];
    
    sprintf(path, "/api/%s/lights/%d/state", HUE_DEVELOPER_NAME, light_id);
 80a01f6:	491a      	ldr	r1, [pc, #104]	; (80a0260 <_Z15do_light_updatebi+0x7c>)
 80a01f8:	462b      	mov	r3, r5
 80a01fa:	4a1a      	ldr	r2, [pc, #104]	; (80a0264 <_Z15do_light_updatebi+0x80>)
 80a01fc:	a812      	add	r0, sp, #72	; 0x48
 80a01fe:	f000 fc5f 	bl	80a0ac0 <sprintf>
    
    // Alsways default to turning the lights off.
    sprintf(body, "{\"on\":false}" );
 80a0202:	4919      	ldr	r1, [pc, #100]	; (80a0268 <_Z15do_light_updatebi+0x84>)
 80a0204:	a802      	add	r0, sp, #8
 80a0206:	f002 f9b1 	bl	80a256c <strcpy>
    
    if (state) {
 80a020a:	b11c      	cbz	r4, 80a0214 <_Z15do_light_updatebi+0x30>
        sprintf(body, "{\"on\":true}" );
 80a020c:	4917      	ldr	r1, [pc, #92]	; (80a026c <_Z15do_light_updatebi+0x88>)
 80a020e:	a802      	add	r0, sp, #8
 80a0210:	f002 f9ac 	bl	80a256c <strcpy>
    }
    
    request.hostname = HUE_HUB_IP_ADDRESS; 
 80a0214:	4c16      	ldr	r4, [pc, #88]	; (80a0270 <_Z15do_light_updatebi+0x8c>)
 80a0216:	4917      	ldr	r1, [pc, #92]	; (80a0274 <_Z15do_light_updatebi+0x90>)
 80a0218:	4620      	mov	r0, r4
 80a021a:	f000 ff8d 	bl	80a1138 <_ZN6StringaSEPKc>
    request.port = 80;
 80a021e:	2350      	movs	r3, #80	; 0x50
    request.path = path; 
 80a0220:	a912      	add	r1, sp, #72	; 0x48
 80a0222:	f104 0028 	add.w	r0, r4, #40	; 0x28
    if (state) {
        sprintf(body, "{\"on\":true}" );
    }
    
    request.hostname = HUE_HUB_IP_ADDRESS; 
    request.port = 80;
 80a0226:	63a3      	str	r3, [r4, #56]	; 0x38
    request.path = path; 
 80a0228:	f000 ff86 	bl	80a1138 <_ZN6StringaSEPKc>
    request.body = body;
 80a022c:	a902      	add	r1, sp, #8
 80a022e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0232:	f000 ff81 	bl	80a1138 <_ZN6StringaSEPKc>
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
    }

    void put(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_PUT);
 80a0236:	4b10      	ldr	r3, [pc, #64]	; (80a0278 <_Z15do_light_updatebi+0x94>)
 80a0238:	4a10      	ldr	r2, [pc, #64]	; (80a027c <_Z15do_light_updatebi+0x98>)
 80a023a:	4621      	mov	r1, r4
 80a023c:	9300      	str	r3, [sp, #0]
 80a023e:	4810      	ldr	r0, [pc, #64]	; (80a0280 <_Z15do_light_updatebi+0x9c>)
 80a0240:	4b10      	ldr	r3, [pc, #64]	; (80a0284 <_Z15do_light_updatebi+0xa0>)
 80a0242:	f000 f8fb 	bl	80a043c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
    
    http.put(request, response, headers);
    Serial.println("after http put"); 
 80a0246:	f001 fceb 	bl	80a1c20 <_Z16_fetch_usbserialv>
 80a024a:	490f      	ldr	r1, [pc, #60]	; (80a0288 <_Z15do_light_updatebi+0xa4>)
 80a024c:	f001 f826 	bl	80a129c <_ZN5Print7printlnEPKc>
    delay(1000);
 80a0250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0254:	f001 f880 	bl	80a1358 <delay>
 80a0258:	b033      	add	sp, #204	; 0xcc
 80a025a:	bd30      	pop	{r4, r5, pc}
 80a025c:	080a2742 	.word	0x080a2742
 80a0260:	080a2777 	.word	0x080a2777
 80a0264:	080a274e 	.word	0x080a274e
 80a0268:	080a278f 	.word	0x080a278f
 80a026c:	080a279c 	.word	0x080a279c
 80a0270:	20000094 	.word	0x20000094
 80a0274:	080a27a8 	.word	0x080a27a8
 80a0278:	080a27b6 	.word	0x080a27b6
 80a027c:	20000500 	.word	0x20000500
 80a0280:	200000e4 	.word	0x200000e4
 80a0284:	20000004 	.word	0x20000004
 80a0288:	080a27ba 	.word	0x080a27ba

080a028c <loop>:
  Particle.publish("Setup finished", PUBLIC);
  digitalWrite(D0,HIGH);
  Serial.begin(9600);
}

void loop() {
 80a028c:	b510      	push	{r4, lr}
    bool state_crm = FALSE;
    if (analogRead(A0) > 80 ) {
 80a028e:	200a      	movs	r0, #10
 80a0290:	f001 ff18 	bl	80a20c4 <analogRead>
        state_crm = TRUE;
    }

    if (state_crm != light) {
 80a0294:	4c18      	ldr	r4, [pc, #96]	; (80a02f8 <loop+0x6c>)
  Serial.begin(9600);
}

void loop() {
    bool state_crm = FALSE;
    if (analogRead(A0) > 80 ) {
 80a0296:	2850      	cmp	r0, #80	; 0x50
        state_crm = TRUE;
    }

    if (state_crm != light) {
 80a0298:	7823      	ldrb	r3, [r4, #0]
  Serial.begin(9600);
}

void loop() {
    bool state_crm = FALSE;
    if (analogRead(A0) > 80 ) {
 80a029a:	bfd4      	ite	le
 80a029c:	2000      	movle	r0, #0
 80a029e:	2001      	movgt	r0, #1
        state_crm = TRUE;
    }

    if (state_crm != light) {
 80a02a0:	4283      	cmp	r3, r0
 80a02a2:	d01f      	beq.n	80a02e4 <loop+0x58>
        light = state_crm;
 80a02a4:	7020      	strb	r0, [r4, #0]
        Serial.println("before do-light");
 80a02a6:	f001 fcbb 	bl	80a1c20 <_Z16_fetch_usbserialv>
 80a02aa:	4914      	ldr	r1, [pc, #80]	; (80a02fc <loop+0x70>)
 80a02ac:	f000 fff6 	bl	80a129c <_ZN5Print7printlnEPKc>
        do_light_update(light,HUE_LIGHT_CRM_1);
 80a02b0:	4b13      	ldr	r3, [pc, #76]	; (80a0300 <loop+0x74>)
 80a02b2:	7820      	ldrb	r0, [r4, #0]
 80a02b4:	6819      	ldr	r1, [r3, #0]
 80a02b6:	f7ff ff95 	bl	80a01e4 <_Z15do_light_updatebi>
        // do_light_update(light,HUE_LIGHT_CRM_2);
        Serial.println("After do-light");
 80a02ba:	f001 fcb1 	bl	80a1c20 <_Z16_fetch_usbserialv>
 80a02be:	4911      	ldr	r1, [pc, #68]	; (80a0304 <loop+0x78>)
 80a02c0:	f000 ffec 	bl	80a129c <_ZN5Print7printlnEPKc>
        if (light) {
 80a02c4:	7821      	ldrb	r1, [r4, #0]
 80a02c6:	4b10      	ldr	r3, [pc, #64]	; (80a0308 <loop+0x7c>)
 80a02c8:	b129      	cbz	r1, 80a02d6 <loop+0x4a>
            digitalWrite(led1, HIGH);
 80a02ca:	2101      	movs	r1, #1
 80a02cc:	8818      	ldrh	r0, [r3, #0]
 80a02ce:	f001 fee0 	bl	80a2092 <digitalWrite>
            status = "on ";
 80a02d2:	490e      	ldr	r1, [pc, #56]	; (80a030c <loop+0x80>)
 80a02d4:	e003      	b.n	80a02de <loop+0x52>
        }
        else {
            digitalWrite(led1, LOW); 
 80a02d6:	8818      	ldrh	r0, [r3, #0]
 80a02d8:	f001 fedb 	bl	80a2092 <digitalWrite>
            status = "off";
 80a02dc:	490c      	ldr	r1, [pc, #48]	; (80a0310 <loop+0x84>)
 80a02de:	480d      	ldr	r0, [pc, #52]	; (80a0314 <loop+0x88>)
 80a02e0:	f000 ff2a 	bl	80a1138 <_ZN6StringaSEPKc>
        }
    }
    read_val = analogRead(A0);
 80a02e4:	200a      	movs	r0, #10
 80a02e6:	f001 feed 	bl	80a20c4 <analogRead>
 80a02ea:	4b0b      	ldr	r3, [pc, #44]	; (80a0318 <loop+0x8c>)
 80a02ec:	6018      	str	r0, [r3, #0]
    delay(200);
}
 80a02ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            digitalWrite(led1, LOW); 
            status = "off";
        }
    }
    read_val = analogRead(A0);
    delay(200);
 80a02f2:	20c8      	movs	r0, #200	; 0xc8
 80a02f4:	f001 b830 	b.w	80a1358 <delay>
 80a02f8:	200000e1 	.word	0x200000e1
 80a02fc:	080a27c9 	.word	0x080a27c9
 80a0300:	20000000 	.word	0x20000000
 80a0304:	080a27d9 	.word	0x080a27d9
 80a0308:	2000001c 	.word	0x2000001c
 80a030c:	080a27e8 	.word	0x080a27e8
 80a0310:	080a27ec 	.word	0x080a27ec
 80a0314:	20000514 	.word	0x20000514
 80a0318:	20000090 	.word	0x20000090

080a031c <_GLOBAL__sub_I_HUE_LIGHT_CRM_1>:
    request.body = body;
    
    http.put(request, response, headers);
    Serial.println("after http put"); 
    delay(1000);
 80a031c:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a031e:	4b1f      	ldr	r3, [pc, #124]	; (80a039c <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x80>)
#include "HttpClient.h"
#include "application.h"

int led1 = D7;
bool light = FALSE;
String status = "off";
 80a0320:	4c1f      	ldr	r4, [pc, #124]	; (80a03a0 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x84>)
 80a0322:	2200      	movs	r2, #0
 80a0324:	701a      	strb	r2, [r3, #0]
 80a0326:	4d1f      	ldr	r5, [pc, #124]	; (80a03a4 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x88>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0328:	f000 f9a4 	bl	80a0674 <HAL_Pin_Map>
 80a032c:	491e      	ldr	r1, [pc, #120]	; (80a03a8 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x8c>)
 80a032e:	4620      	mov	r0, r4
 80a0330:	f000 feef 	bl	80a1112 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0334:	4620      	mov	r0, r4
int read_val = 0;

HttpClient http;
 80a0336:	4c1d      	ldr	r4, [pc, #116]	; (80a03ac <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x90>)
#include "HttpClient.h"
#include "application.h"

int led1 = D7;
bool light = FALSE;
String status = "off";
 80a0338:	462a      	mov	r2, r5
 80a033a:	491d      	ldr	r1, [pc, #116]	; (80a03b0 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x94>)
 80a033c:	f001 ff52 	bl	80a21e4 <__aeabi_atexit>
int read_val = 0;

HttpClient http;
 80a0340:	4620      	mov	r0, r4
 80a0342:	f000 f843 	bl	80a03cc <_ZN10HttpClientC1Ev>
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
 80a0346:	4e1b      	ldr	r6, [pc, #108]	; (80a03b4 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x98>)
 80a0348:	4620      	mov	r0, r4
 80a034a:	4c1b      	ldr	r4, [pc, #108]	; (80a03b8 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x9c>)
 80a034c:	462a      	mov	r2, r5
 80a034e:	491b      	ldr	r1, [pc, #108]	; (80a03bc <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0xa0>)
 80a0350:	f001 ff48 	bl	80a21e4 <__aeabi_atexit>
 80a0354:	4631      	mov	r1, r6
 80a0356:	4620      	mov	r0, r4
 80a0358:	f000 fedb 	bl	80a1112 <_ZN6StringC1EPK19__FlashStringHelper>
 80a035c:	f104 0010 	add.w	r0, r4, #16
 80a0360:	f001 fbac 	bl	80a1abc <_ZN9IPAddressC1Ev>
 80a0364:	4631      	mov	r1, r6
 80a0366:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a036a:	f000 fed2 	bl	80a1112 <_ZN6StringC1EPK19__FlashStringHelper>
 80a036e:	4631      	mov	r1, r6
 80a0370:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0374:	f000 fecd 	bl	80a1112 <_ZN6StringC1EPK19__FlashStringHelper>
  { "Content-Type", "application/x-www-form-urlencoded" },
  { "Accept", "*/*"},
  { NULL, NULL }
};

http_request_t request;
 80a0378:	4620      	mov	r0, r4
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
 80a037a:	4c11      	ldr	r4, [pc, #68]	; (80a03c0 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0xa4>)
 80a037c:	462a      	mov	r2, r5
 80a037e:	4911      	ldr	r1, [pc, #68]	; (80a03c4 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0xa8>)
 80a0380:	f001 ff30 	bl	80a21e4 <__aeabi_atexit>
 80a0384:	4631      	mov	r1, r6
 80a0386:	1d20      	adds	r0, r4, #4
 80a0388:	f000 fec3 	bl	80a1112 <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
 80a038c:	462a      	mov	r2, r5
 80a038e:	4620      	mov	r0, r4
    request.body = body;
    
    http.put(request, response, headers);
    Serial.println("after http put"); 
    delay(1000);
 80a0390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  { "Accept", "*/*"},
  { NULL, NULL }
};

http_request_t request;
http_response_t response;
 80a0394:	490c      	ldr	r1, [pc, #48]	; (80a03c8 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0xac>)
 80a0396:	f001 bf25 	b.w	80a21e4 <__aeabi_atexit>
 80a039a:	bf00      	nop
 80a039c:	200000e0 	.word	0x200000e0
 80a03a0:	20000514 	.word	0x20000514
 80a03a4:	2000008c 	.word	0x2000008c
 80a03a8:	080a27ec 	.word	0x080a27ec
 80a03ac:	200000e4 	.word	0x200000e4
 80a03b0:	080a1085 	.word	0x080a1085
 80a03b4:	080a2864 	.word	0x080a2864
 80a03b8:	20000094 	.word	0x20000094
 80a03bc:	080a0121 	.word	0x080a0121
 80a03c0:	20000500 	.word	0x20000500
 80a03c4:	080a00c5 	.word	0x080a00c5
 80a03c8:	080a00b7 	.word	0x080a00b7

080a03cc <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
 80a03cc:	b510      	push	{r4, lr}
 80a03ce:	4604      	mov	r4, r0
 80a03d0:	f000 fe00 	bl	80a0fd4 <_ZN9TCPClientC1Ev>
{

}
 80a03d4:	4620      	mov	r0, r4
 80a03d6:	bd10      	pop	{r4, pc}

080a03d8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
 80a03d8:	b538      	push	{r3, r4, r5, lr}
 80a03da:	4604      	mov	r4, r0
 80a03dc:	4615      	mov	r5, r2
    client.print(aHeaderName);
 80a03de:	f000 ff4a 	bl	80a1276 <_ZN5Print5printEPKc>
    client.print(": ");
 80a03e2:	4905      	ldr	r1, [pc, #20]	; (80a03f8 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
 80a03e4:	4620      	mov	r0, r4
 80a03e6:	f000 ff46 	bl	80a1276 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
 80a03ea:	4629      	mov	r1, r5
 80a03ec:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a03ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
 80a03f2:	f000 bf53 	b.w	80a129c <_ZN5Print7printlnEPKc>
 80a03f6:	bf00      	nop
 80a03f8:	080a2987 	.word	0x080a2987

080a03fc <_ZN10HttpClient10sendHeaderEPKci>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
 80a03fc:	b538      	push	{r3, r4, r5, lr}
 80a03fe:	4605      	mov	r5, r0
 80a0400:	4614      	mov	r4, r2
    client.print(aHeaderName);
 80a0402:	f000 ff38 	bl	80a1276 <_ZN5Print5printEPKc>
    client.print(": ");
 80a0406:	490b      	ldr	r1, [pc, #44]	; (80a0434 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
 80a0408:	4628      	mov	r0, r5
 80a040a:	f000 ff34 	bl	80a1276 <_ZN5Print5printEPKc>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a040e:	2c00      	cmp	r4, #0
 80a0410:	da05      	bge.n	80a041e <_ZN10HttpClient10sendHeaderEPKci+0x22>
            t = print('-');
 80a0412:	212d      	movs	r1, #45	; 0x2d
 80a0414:	4628      	mov	r0, r5
 80a0416:	f000 ff32 	bl	80a127e <_ZN5Print5printEc>
            val = -n;
 80a041a:	4261      	negs	r1, r4
 80a041c:	e000      	b.n	80a0420 <_ZN10HttpClient10sendHeaderEPKci+0x24>
        } else {
            val = n;
 80a041e:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
 80a0420:	4628      	mov	r0, r5
 80a0422:	220a      	movs	r2, #10
 80a0424:	f000 ff44 	bl	80a12b0 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
 80a0428:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a042a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a042e:	f000 bf29 	b.w	80a1284 <_ZN5Print7printlnEv>
 80a0432:	bf00      	nop
 80a0434:	080a2987 	.word	0x080a2987

080a0438 <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
 80a0438:	f000 b91c 	b.w	80a0674 <HAL_Pin_Map>

080a043c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a043c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0440:	460d      	mov	r5, r1
 80a0442:	461e      	mov	r6, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
 80a0444:	f04f 33ff 	mov.w	r3, #4294967295
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a0448:	b08f      	sub	sp, #60	; 0x3c
 80a044a:	4604      	mov	r4, r0
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
 80a044c:	6013      	str	r3, [r2, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a044e:	2100      	movs	r1, #0
 80a0450:	4628      	mov	r0, r5
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a0452:	4617      	mov	r7, r2
 80a0454:	f000 fe9c 	bl	80a1190 <_ZNK6String6equalsEPKc>
 80a0458:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
 80a045c:	b960      	cbnz	r0, 80a0478 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
 80a045e:	6829      	ldr	r1, [r5, #0]
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
 80a0460:	f1b8 0f00 	cmp.w	r8, #0
 80a0464:	d002      	beq.n	80a046c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x30>
 80a0466:	fa1f f288 	uxth.w	r2, r8
 80a046a:	e000      	b.n	80a046e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32>
 80a046c:	2250      	movs	r2, #80	; 0x50
 80a046e:	2300      	movs	r3, #0
 80a0470:	4620      	mov	r0, r4
 80a0472:	f000 fdd1 	bl	80a1018 <_ZN9TCPClient7connectEPKctm>
 80a0476:	e014      	b.n	80a04a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x66>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0478:	4b74      	ldr	r3, [pc, #464]	; (80a064c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>)
 80a047a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80a047e:	f105 0c14 	add.w	ip, r5, #20
 80a0482:	9308      	str	r3, [sp, #32]
 80a0484:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a0488:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80a048c:	f8dc 3000 	ldr.w	r3, [ip]
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
 80a0490:	fa1f f288 	uxth.w	r2, r8
 80a0494:	f88e 3000 	strb.w	r3, [lr]
 80a0498:	a908      	add	r1, sp, #32
 80a049a:	2300      	movs	r3, #0
 80a049c:	4620      	mov	r0, r4
 80a049e:	f000 fc83 	bl	80a0da8 <_ZN9TCPClient7connectE9IPAddresstm>
 80a04a2:	3000      	adds	r0, #0
 80a04a4:	bf18      	it	ne
 80a04a6:	2001      	movne	r0, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
 80a04a8:	b918      	cbnz	r0, 80a04b2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
 80a04aa:	4620      	mov	r0, r4
 80a04ac:	f000 fc62 	bl	80a0d74 <_ZN9TCPClient4stopEv>
        // If TCP Client can't connect to host, exit here.
        return;
 80a04b0:	e0c8      	b.n	80a0644 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x208>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
 80a04b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a04b4:	4620      	mov	r0, r4
 80a04b6:	f000 fede 	bl	80a1276 <_ZN5Print5printEPKc>
    client.print(" ");
 80a04ba:	4965      	ldr	r1, [pc, #404]	; (80a0650 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x214>)
 80a04bc:	4620      	mov	r0, r4
 80a04be:	f000 feda 	bl	80a1276 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
 80a04c2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80a04c4:	4620      	mov	r0, r4
 80a04c6:	f000 fed6 	bl	80a1276 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
 80a04ca:	4962      	ldr	r1, [pc, #392]	; (80a0654 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>)
 80a04cc:	4620      	mov	r0, r4
 80a04ce:	f000 fed2 	bl	80a1276 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
    Serial.print(" HTTP/1.0\r\n");
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
 80a04d2:	4961      	ldr	r1, [pc, #388]	; (80a0658 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x21c>)
 80a04d4:	4620      	mov	r0, r4
 80a04d6:	4a61      	ldr	r2, [pc, #388]	; (80a065c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x220>)
 80a04d8:	f7ff ff7e 	bl	80a03d8 <_ZN10HttpClient10sendHeaderEPKcS1_>
 80a04dc:	2100      	movs	r1, #0
 80a04de:	4628      	mov	r0, r5
 80a04e0:	f000 fe56 	bl	80a1190 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
 80a04e4:	b920      	cbnz	r0, 80a04f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
 80a04e6:	682a      	ldr	r2, [r5, #0]
 80a04e8:	495d      	ldr	r1, [pc, #372]	; (80a0660 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x224>)
 80a04ea:	4620      	mov	r0, r4
 80a04ec:	f7ff ff74 	bl	80a03d8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
 80a04f0:	f105 083c 	add.w	r8, r5, #60	; 0x3c
 80a04f4:	2100      	movs	r1, #0
 80a04f6:	4640      	mov	r0, r8
 80a04f8:	f000 fe4a 	bl	80a1190 <_ZNK6String6equalsEPKc>
 80a04fc:	b908      	cbnz	r0, 80a0502 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc6>
        sendHeader("Content-Length", (aRequest.body).length());
 80a04fe:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80a0500:	e005      	b.n	80a050e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd2>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
 80a0502:	4958      	ldr	r1, [pc, #352]	; (80a0664 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
 80a0504:	9818      	ldr	r0, [sp, #96]	; 0x60
 80a0506:	f002 f827 	bl	80a2558 <strcmp>
 80a050a:	4602      	mov	r2, r0
 80a050c:	b918      	cbnz	r0, 80a0516 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xda>
        sendHeader("Content-Length", 0);
 80a050e:	4956      	ldr	r1, [pc, #344]	; (80a0668 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
 80a0510:	4620      	mov	r0, r4
 80a0512:	f7ff ff73 	bl	80a03fc <_ZN10HttpClient10sendHeaderEPKci>
    }

    if (headers != NULL)
 80a0516:	b15e      	cbz	r6, 80a0530 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    {
        int i = 0;
        while (headers[i].header != NULL)
 80a0518:	6831      	ldr	r1, [r6, #0]
 80a051a:	b149      	cbz	r1, 80a0530 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
        {
            if (headers[i].value != NULL) {
 80a051c:	6872      	ldr	r2, [r6, #4]
                sendHeader(headers[i].header, headers[i].value);
 80a051e:	4620      	mov	r0, r4
    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
        {
            if (headers[i].value != NULL) {
 80a0520:	b112      	cbz	r2, 80a0528 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xec>
                sendHeader(headers[i].header, headers[i].value);
 80a0522:	f7ff ff59 	bl	80a03d8 <_ZN10HttpClient10sendHeaderEPKcS1_>
 80a0526:	e001      	b.n	80a052c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf0>
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
    client.println(aHeaderName);
 80a0528:	f000 feb8 	bl	80a129c <_ZN5Print7printlnEPKc>
 80a052c:	3608      	adds	r6, #8
    }

    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
 80a052e:	e7f3      	b.n	80a0518 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
            i++;
        }
    }

    // Empty line to finish headers
    client.println();
 80a0530:	4620      	mov	r0, r4
 80a0532:	f000 fea7 	bl	80a1284 <_ZN5Print7printlnEv>
    client.flush();
 80a0536:	4620      	mov	r0, r4
 80a0538:	f000 fb51 	bl	80a0bde <_ZN9TCPClient5flushEv>
 80a053c:	2100      	movs	r1, #0
 80a053e:	4640      	mov	r0, r8
 80a0540:	f000 fe26 	bl	80a1190 <_ZNK6String6equalsEPKc>

    //
    // Send HTTP Request Body
    //

    if (aRequest.body != NULL) {
 80a0544:	b918      	cbnz	r0, 80a054e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x112>
        client.println(aRequest.body);
 80a0546:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80a0548:	4620      	mov	r0, r4
 80a054a:	f000 fea7 	bl	80a129c <_ZN5Print7printlnEPKc>
    #ifdef LOGGING
    Serial.println("HttpClient>\tEnd of HTTP Request.");
    #endif

    // clear response buffer
    memset(&buffer[0], 0, sizeof(buffer));
 80a054e:	f104 081c 	add.w	r8, r4, #28
 80a0552:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a0556:	2100      	movs	r1, #0
 80a0558:	4640      	mov	r0, r8
 80a055a:	f001 ffcc 	bl	80a24f6 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a055e:	f000 f8d1 	bl	80a0704 <HAL_Timer_Get_Milli_Seconds>
    // timeout or an error.

    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
 80a0562:	2600      	movs	r6, #0
 80a0564:	4681      	mov	r9, r0
    // of terminating the connection there is a delay and another attempt
    // to read data.
    // The loop exits when the connection is closed, or if there is a
    // timeout or an error.

    unsigned int bufferPosition = 0;
 80a0566:	4635      	mov	r5, r6
 80a0568:	f000 f8cc 	bl	80a0704 <HAL_Timer_Get_Milli_Seconds>
        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
            delay(200);
        }
    } while (client.connected() && !timeout && !error);
 80a056c:	f241 3a88 	movw	sl, #5000	; 0x1388
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
 80a0570:	4620      	mov	r0, r4
 80a0572:	f000 fbc3 	bl	80a0cfc <_ZN9TCPClient9availableEv>
 80a0576:	b1d8      	cbz	r0, 80a05b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x174>
            char c = client.read();
 80a0578:	4620      	mov	r0, r4
 80a057a:	f000 fb74 	bl	80a0c66 <_ZN9TCPClient4readEv>
 80a057e:	4683      	mov	fp, r0
 80a0580:	f000 f8c0 	bl	80a0704 <HAL_Timer_Get_Milli_Seconds>

                break;
            }

            // Check that received character fits in buffer before storing.
            if (bufferPosition < sizeof(buffer)-1) {
 80a0584:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80a0588:	429d      	cmp	r5, r3
 80a058a:	4681      	mov	r9, r0
 80a058c:	d803      	bhi.n	80a0596 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15a>
                buffer[bufferPosition] = c;
 80a058e:	1963      	adds	r3, r4, r5
 80a0590:	f883 b01c 	strb.w	fp, [r3, #28]
 80a0594:	e00a      	b.n	80a05ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
 80a0596:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80a059a:	429d      	cmp	r5, r3
 80a059c:	d106      	bne.n	80a05ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a059e:	2300      	movs	r3, #0
 80a05a0:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
 80a05a4:	4620      	mov	r0, r4
 80a05a6:	f000 fbe5 	bl	80a0d74 <_ZN9TCPClient4stopEv>
                error = true;
 80a05aa:	2601      	movs	r6, #1

                #ifdef LOGGING
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
 80a05ac:	3501      	adds	r5, #1
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
 80a05ae:	e7df      	b.n	80a0570 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
        }
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a05b0:	1963      	adds	r3, r4, r5
 80a05b2:	7718      	strb	r0, [r3, #28]
 80a05b4:	f000 f8a6 	bl	80a0704 <HAL_Timer_Get_Milli_Seconds>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
        }
        #endif

        // Check that there hasn't been more than 5s since last read.
        timeout = millis() - lastRead > TIMEOUT;
 80a05b8:	ebc9 0b00 	rsb	fp, r9, r0

        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
 80a05bc:	b926      	cbnz	r6, 80a05c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
 80a05be:	45d3      	cmp	fp, sl
 80a05c0:	d802      	bhi.n	80a05c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
            delay(200);
 80a05c2:	20c8      	movs	r0, #200	; 0xc8
 80a05c4:	f000 fec8 	bl	80a1358 <delay>
        }
    } while (client.connected() && !timeout && !error);
 80a05c8:	4620      	mov	r0, r4
 80a05ca:	f000 fc94 	bl	80a0ef6 <_ZN9TCPClient9connectedEv>
 80a05ce:	b118      	cbz	r0, 80a05d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
 80a05d0:	45d3      	cmp	fp, sl
 80a05d2:	d801      	bhi.n	80a05d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
 80a05d4:	2e00      	cmp	r6, #0
 80a05d6:	d0cb      	beq.n	80a0570 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
    }
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
    Serial.print(millis() - firstRead);
    Serial.println("ms).");
    #endif
    client.stop();
 80a05d8:	4620      	mov	r0, r4
 80a05da:	f000 fbcb 	bl	80a0d74 <_ZN9TCPClient4stopEv>

    String raw_response(buffer);
 80a05de:	4641      	mov	r1, r8
 80a05e0:	4668      	mov	r0, sp
 80a05e2:	f000 fd96 	bl	80a1112 <_ZN6StringC1EPK19__FlashStringHelper>

    // Not super elegant way of finding the status code, but it works.
    String statusCode = raw_response.substring(9,12);
 80a05e6:	230c      	movs	r3, #12
 80a05e8:	2209      	movs	r2, #9
 80a05ea:	4669      	mov	r1, sp
 80a05ec:	a804      	add	r0, sp, #16
 80a05ee:	f000 fdf3 	bl	80a11d8 <_ZNK6String9substringEjj>
    #ifdef LOGGING
    Serial.print("HttpClient>\tStatus Code: ");
    Serial.println(statusCode);
    #endif

    int bodyPos = raw_response.indexOf("\r\n\r\n");
 80a05f2:	491e      	ldr	r1, [pc, #120]	; (80a066c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
 80a05f4:	a808      	add	r0, sp, #32
 80a05f6:	f000 fd8c 	bl	80a1112 <_ZN6StringC1EPK19__FlashStringHelper>
 80a05fa:	a908      	add	r1, sp, #32
 80a05fc:	4668      	mov	r0, sp
 80a05fe:	f000 fde8 	bl	80a11d2 <_ZNK6String7indexOfERKS_>
 80a0602:	4604      	mov	r4, r0
 80a0604:	a808      	add	r0, sp, #32
 80a0606:	f000 fd3d 	bl	80a1084 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
 80a060a:	1c63      	adds	r3, r4, #1
 80a060c:	d014      	beq.n	80a0638 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fc>
        #endif

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
 80a060e:	1d3d      	adds	r5, r7, #4
 80a0610:	4917      	ldr	r1, [pc, #92]	; (80a0670 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
 80a0612:	4628      	mov	r0, r5
 80a0614:	f000 fd90 	bl	80a1138 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
 80a0618:	1d22      	adds	r2, r4, #4
 80a061a:	4669      	mov	r1, sp
 80a061c:	a808      	add	r0, sp, #32
 80a061e:	f000 fdfd 	bl	80a121c <_ZNK6String9substringEj>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a0622:	a908      	add	r1, sp, #32
 80a0624:	4628      	mov	r0, r5
 80a0626:	f000 fdaf 	bl	80a1188 <_ZN6String6concatERKS_>
 80a062a:	a808      	add	r0, sp, #32
 80a062c:	f000 fd2a 	bl	80a1084 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
 80a0630:	9804      	ldr	r0, [sp, #16]
 80a0632:	f001 ff43 	bl	80a24bc <atoi>
 80a0636:	6038      	str	r0, [r7, #0]
    if (bodyPos == -1) {
        #ifdef LOGGING
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
        #endif

        return;
 80a0638:	a804      	add	r0, sp, #16
 80a063a:	f000 fd23 	bl	80a1084 <_ZN6StringD1Ev>
 80a063e:	4668      	mov	r0, sp
 80a0640:	f000 fd20 	bl	80a1084 <_ZN6StringD1Ev>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
 80a0644:	b00f      	add	sp, #60	; 0x3c
 80a0646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a064a:	bf00      	nop
 80a064c:	080a2a28 	.word	0x080a2a28
 80a0650:	080a2983 	.word	0x080a2983
 80a0654:	080a282a 	.word	0x080a282a
 80a0658:	080a283c 	.word	0x080a283c
 80a065c:	080a2836 	.word	0x080a2836
 80a0660:	080a2847 	.word	0x080a2847
 80a0664:	080a285b 	.word	0x080a285b
 80a0668:	080a284c 	.word	0x080a284c
 80a066c:	080a2860 	.word	0x080a2860
 80a0670:	080a2864 	.word	0x080a2864

080a0674 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0674:	b508      	push	{r3, lr}
 80a0676:	4b02      	ldr	r3, [pc, #8]	; (80a0680 <HAL_Pin_Map+0xc>)
 80a0678:	681b      	ldr	r3, [r3, #0]
 80a067a:	681b      	ldr	r3, [r3, #0]
 80a067c:	9301      	str	r3, [sp, #4]
 80a067e:	bd08      	pop	{r3, pc}
 80a0680:	080601b0 	.word	0x080601b0

080a0684 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0684:	b508      	push	{r3, lr}
 80a0686:	4b02      	ldr	r3, [pc, #8]	; (80a0690 <HAL_Validate_Pin_Function+0xc>)
 80a0688:	681b      	ldr	r3, [r3, #0]
 80a068a:	685b      	ldr	r3, [r3, #4]
 80a068c:	9301      	str	r3, [sp, #4]
 80a068e:	bd08      	pop	{r3, pc}
 80a0690:	080601b0 	.word	0x080601b0

080a0694 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0694:	b508      	push	{r3, lr}
 80a0696:	4b02      	ldr	r3, [pc, #8]	; (80a06a0 <HAL_Pin_Mode+0xc>)
 80a0698:	681b      	ldr	r3, [r3, #0]
 80a069a:	689b      	ldr	r3, [r3, #8]
 80a069c:	9301      	str	r3, [sp, #4]
 80a069e:	bd08      	pop	{r3, pc}
 80a06a0:	080601b0 	.word	0x080601b0

080a06a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a06a4:	b508      	push	{r3, lr}
 80a06a6:	4b02      	ldr	r3, [pc, #8]	; (80a06b0 <HAL_Get_Pin_Mode+0xc>)
 80a06a8:	681b      	ldr	r3, [r3, #0]
 80a06aa:	68db      	ldr	r3, [r3, #12]
 80a06ac:	9301      	str	r3, [sp, #4]
 80a06ae:	bd08      	pop	{r3, pc}
 80a06b0:	080601b0 	.word	0x080601b0

080a06b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a06b4:	b508      	push	{r3, lr}
 80a06b6:	4b02      	ldr	r3, [pc, #8]	; (80a06c0 <HAL_GPIO_Write+0xc>)
 80a06b8:	681b      	ldr	r3, [r3, #0]
 80a06ba:	691b      	ldr	r3, [r3, #16]
 80a06bc:	9301      	str	r3, [sp, #4]
 80a06be:	bd08      	pop	{r3, pc}
 80a06c0:	080601b0 	.word	0x080601b0

080a06c4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a06c4:	b508      	push	{r3, lr}
 80a06c6:	4b02      	ldr	r3, [pc, #8]	; (80a06d0 <HAL_ADC_Read+0xc>)
 80a06c8:	681b      	ldr	r3, [r3, #0]
 80a06ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a06cc:	9301      	str	r3, [sp, #4]
 80a06ce:	bd08      	pop	{r3, pc}
 80a06d0:	080601b0 	.word	0x080601b0

080a06d4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a06d4:	b508      	push	{r3, lr}
 80a06d6:	4b02      	ldr	r3, [pc, #8]	; (80a06e0 <HAL_SPI_Init+0xc>)
 80a06d8:	681b      	ldr	r3, [r3, #0]
 80a06da:	69db      	ldr	r3, [r3, #28]
 80a06dc:	9301      	str	r3, [sp, #4]
 80a06de:	bd08      	pop	{r3, pc}
 80a06e0:	080601b4 	.word	0x080601b4

080a06e4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a06e4:	b508      	push	{r3, lr}
 80a06e6:	4b02      	ldr	r3, [pc, #8]	; (80a06f0 <HAL_SPI_Is_Enabled+0xc>)
 80a06e8:	681b      	ldr	r3, [r3, #0]
 80a06ea:	6a1b      	ldr	r3, [r3, #32]
 80a06ec:	9301      	str	r3, [sp, #4]
 80a06ee:	bd08      	pop	{r3, pc}
 80a06f0:	080601b4 	.word	0x080601b4

080a06f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a06f4:	b508      	push	{r3, lr}
 80a06f6:	4b02      	ldr	r3, [pc, #8]	; (80a0700 <HAL_RNG_GetRandomNumber+0xc>)
 80a06f8:	681b      	ldr	r3, [r3, #0]
 80a06fa:	685b      	ldr	r3, [r3, #4]
 80a06fc:	9301      	str	r3, [sp, #4]
 80a06fe:	bd08      	pop	{r3, pc}
 80a0700:	0806019c 	.word	0x0806019c

080a0704 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0704:	b508      	push	{r3, lr}
 80a0706:	4b02      	ldr	r3, [pc, #8]	; (80a0710 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0708:	681b      	ldr	r3, [r3, #0]
 80a070a:	695b      	ldr	r3, [r3, #20]
 80a070c:	9301      	str	r3, [sp, #4]
 80a070e:	bd08      	pop	{r3, pc}
 80a0710:	0806019c 	.word	0x0806019c

080a0714 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0714:	b508      	push	{r3, lr}
 80a0716:	4b02      	ldr	r3, [pc, #8]	; (80a0720 <os_mutex_recursive_create+0xc>)
 80a0718:	681b      	ldr	r3, [r3, #0]
 80a071a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a071c:	9301      	str	r3, [sp, #4]
 80a071e:	bd08      	pop	{r3, pc}
 80a0720:	080601d0 	.word	0x080601d0

080a0724 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0724:	b508      	push	{r3, lr}
 80a0726:	4b02      	ldr	r3, [pc, #8]	; (80a0730 <os_mutex_recursive_destroy+0xc>)
 80a0728:	681b      	ldr	r3, [r3, #0]
 80a072a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a072c:	9301      	str	r3, [sp, #4]
 80a072e:	bd08      	pop	{r3, pc}
 80a0730:	080601d0 	.word	0x080601d0

080a0734 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0734:	b508      	push	{r3, lr}
 80a0736:	4b02      	ldr	r3, [pc, #8]	; (80a0740 <HAL_USART_Init+0xc>)
 80a0738:	681b      	ldr	r3, [r3, #0]
 80a073a:	699b      	ldr	r3, [r3, #24]
 80a073c:	9301      	str	r3, [sp, #4]
 80a073e:	bd08      	pop	{r3, pc}
 80a0740:	080601c4 	.word	0x080601c4

080a0744 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0744:	b508      	push	{r3, lr}
 80a0746:	4b02      	ldr	r3, [pc, #8]	; (80a0750 <HAL_USART_Write_Data+0xc>)
 80a0748:	681b      	ldr	r3, [r3, #0]
 80a074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a074c:	9301      	str	r3, [sp, #4]
 80a074e:	bd08      	pop	{r3, pc}
 80a0750:	080601c4 	.word	0x080601c4

080a0754 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0754:	b508      	push	{r3, lr}
 80a0756:	4b02      	ldr	r3, [pc, #8]	; (80a0760 <HAL_USART_Available_Data+0xc>)
 80a0758:	681b      	ldr	r3, [r3, #0]
 80a075a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a075c:	9301      	str	r3, [sp, #4]
 80a075e:	bd08      	pop	{r3, pc}
 80a0760:	080601c4 	.word	0x080601c4

080a0764 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0764:	b508      	push	{r3, lr}
 80a0766:	4b02      	ldr	r3, [pc, #8]	; (80a0770 <HAL_USART_Read_Data+0xc>)
 80a0768:	681b      	ldr	r3, [r3, #0]
 80a076a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a076c:	9301      	str	r3, [sp, #4]
 80a076e:	bd08      	pop	{r3, pc}
 80a0770:	080601c4 	.word	0x080601c4

080a0774 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0774:	b508      	push	{r3, lr}
 80a0776:	4b02      	ldr	r3, [pc, #8]	; (80a0780 <HAL_USART_Peek_Data+0xc>)
 80a0778:	681b      	ldr	r3, [r3, #0]
 80a077a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a077c:	9301      	str	r3, [sp, #4]
 80a077e:	bd08      	pop	{r3, pc}
 80a0780:	080601c4 	.word	0x080601c4

080a0784 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0784:	b508      	push	{r3, lr}
 80a0786:	4b02      	ldr	r3, [pc, #8]	; (80a0790 <HAL_USART_Flush_Data+0xc>)
 80a0788:	681b      	ldr	r3, [r3, #0]
 80a078a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a078c:	9301      	str	r3, [sp, #4]
 80a078e:	bd08      	pop	{r3, pc}
 80a0790:	080601c4 	.word	0x080601c4

080a0794 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0794:	b508      	push	{r3, lr}
 80a0796:	4b02      	ldr	r3, [pc, #8]	; (80a07a0 <HAL_USART_Is_Enabled+0xc>)
 80a0798:	681b      	ldr	r3, [r3, #0]
 80a079a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a079c:	9301      	str	r3, [sp, #4]
 80a079e:	bd08      	pop	{r3, pc}
 80a07a0:	080601c4 	.word	0x080601c4

080a07a4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a07a4:	b508      	push	{r3, lr}
 80a07a6:	4b02      	ldr	r3, [pc, #8]	; (80a07b0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a07a8:	681b      	ldr	r3, [r3, #0]
 80a07aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a07ac:	9301      	str	r3, [sp, #4]
 80a07ae:	bd08      	pop	{r3, pc}
 80a07b0:	080601c4 	.word	0x080601c4

080a07b4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a07b4:	b508      	push	{r3, lr}
 80a07b6:	4b02      	ldr	r3, [pc, #8]	; (80a07c0 <HAL_I2C_Write_Data+0xc>)
 80a07b8:	681b      	ldr	r3, [r3, #0]
 80a07ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a07bc:	9301      	str	r3, [sp, #4]
 80a07be:	bd08      	pop	{r3, pc}
 80a07c0:	080601ac 	.word	0x080601ac

080a07c4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a07c4:	b508      	push	{r3, lr}
 80a07c6:	4b02      	ldr	r3, [pc, #8]	; (80a07d0 <HAL_I2C_Available_Data+0xc>)
 80a07c8:	681b      	ldr	r3, [r3, #0]
 80a07ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a07cc:	9301      	str	r3, [sp, #4]
 80a07ce:	bd08      	pop	{r3, pc}
 80a07d0:	080601ac 	.word	0x080601ac

080a07d4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a07d4:	b508      	push	{r3, lr}
 80a07d6:	4b02      	ldr	r3, [pc, #8]	; (80a07e0 <HAL_I2C_Read_Data+0xc>)
 80a07d8:	681b      	ldr	r3, [r3, #0]
 80a07da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a07dc:	9301      	str	r3, [sp, #4]
 80a07de:	bd08      	pop	{r3, pc}
 80a07e0:	080601ac 	.word	0x080601ac

080a07e4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a07e4:	b508      	push	{r3, lr}
 80a07e6:	4b02      	ldr	r3, [pc, #8]	; (80a07f0 <HAL_I2C_Peek_Data+0xc>)
 80a07e8:	681b      	ldr	r3, [r3, #0]
 80a07ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a07ec:	9301      	str	r3, [sp, #4]
 80a07ee:	bd08      	pop	{r3, pc}
 80a07f0:	080601ac 	.word	0x080601ac

080a07f4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a07f4:	b508      	push	{r3, lr}
 80a07f6:	4b02      	ldr	r3, [pc, #8]	; (80a0800 <HAL_I2C_Flush_Data+0xc>)
 80a07f8:	681b      	ldr	r3, [r3, #0]
 80a07fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a07fc:	9301      	str	r3, [sp, #4]
 80a07fe:	bd08      	pop	{r3, pc}
 80a0800:	080601ac 	.word	0x080601ac

080a0804 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0804:	b508      	push	{r3, lr}
 80a0806:	4b02      	ldr	r3, [pc, #8]	; (80a0810 <HAL_I2C_Is_Enabled+0xc>)
 80a0808:	681b      	ldr	r3, [r3, #0]
 80a080a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a080c:	9301      	str	r3, [sp, #4]
 80a080e:	bd08      	pop	{r3, pc}
 80a0810:	080601ac 	.word	0x080601ac

080a0814 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0814:	b508      	push	{r3, lr}
 80a0816:	4b03      	ldr	r3, [pc, #12]	; (80a0824 <HAL_I2C_Init+0x10>)
 80a0818:	681b      	ldr	r3, [r3, #0]
 80a081a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a081e:	9301      	str	r3, [sp, #4]
 80a0820:	bd08      	pop	{r3, pc}
 80a0822:	0000      	.short	0x0000
 80a0824:	080601ac 	.word	0x080601ac

080a0828 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a0828:	b508      	push	{r3, lr}
 80a082a:	4b02      	ldr	r3, [pc, #8]	; (80a0834 <socket_active_status+0xc>)
 80a082c:	681b      	ldr	r3, [r3, #0]
 80a082e:	681b      	ldr	r3, [r3, #0]
 80a0830:	9301      	str	r3, [sp, #4]
 80a0832:	bd08      	pop	{r3, pc}
 80a0834:	080601bc 	.word	0x080601bc

080a0838 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a0838:	b508      	push	{r3, lr}
 80a083a:	4b02      	ldr	r3, [pc, #8]	; (80a0844 <socket_handle_valid+0xc>)
 80a083c:	681b      	ldr	r3, [r3, #0]
 80a083e:	685b      	ldr	r3, [r3, #4]
 80a0840:	9301      	str	r3, [sp, #4]
 80a0842:	bd08      	pop	{r3, pc}
 80a0844:	080601bc 	.word	0x080601bc

080a0848 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a0848:	b508      	push	{r3, lr}
 80a084a:	4b02      	ldr	r3, [pc, #8]	; (80a0854 <socket_create+0xc>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	689b      	ldr	r3, [r3, #8]
 80a0850:	9301      	str	r3, [sp, #4]
 80a0852:	bd08      	pop	{r3, pc}
 80a0854:	080601bc 	.word	0x080601bc

080a0858 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a0858:	b508      	push	{r3, lr}
 80a085a:	4b02      	ldr	r3, [pc, #8]	; (80a0864 <socket_connect+0xc>)
 80a085c:	681b      	ldr	r3, [r3, #0]
 80a085e:	68db      	ldr	r3, [r3, #12]
 80a0860:	9301      	str	r3, [sp, #4]
 80a0862:	bd08      	pop	{r3, pc}
 80a0864:	080601bc 	.word	0x080601bc

080a0868 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a0868:	b508      	push	{r3, lr}
 80a086a:	4b02      	ldr	r3, [pc, #8]	; (80a0874 <socket_receive+0xc>)
 80a086c:	681b      	ldr	r3, [r3, #0]
 80a086e:	691b      	ldr	r3, [r3, #16]
 80a0870:	9301      	str	r3, [sp, #4]
 80a0872:	bd08      	pop	{r3, pc}
 80a0874:	080601bc 	.word	0x080601bc

080a0878 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a0878:	b508      	push	{r3, lr}
 80a087a:	4b02      	ldr	r3, [pc, #8]	; (80a0884 <socket_close+0xc>)
 80a087c:	681b      	ldr	r3, [r3, #0]
 80a087e:	6a1b      	ldr	r3, [r3, #32]
 80a0880:	9301      	str	r3, [sp, #4]
 80a0882:	bd08      	pop	{r3, pc}
 80a0884:	080601bc 	.word	0x080601bc

080a0888 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a0888:	b508      	push	{r3, lr}
 80a088a:	4b02      	ldr	r3, [pc, #8]	; (80a0894 <socket_handle_invalid+0xc>)
 80a088c:	681b      	ldr	r3, [r3, #0]
 80a088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0890:	9301      	str	r3, [sp, #4]
 80a0892:	bd08      	pop	{r3, pc}
 80a0894:	080601bc 	.word	0x080601bc

080a0898 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a0898:	b508      	push	{r3, lr}
 80a089a:	4b02      	ldr	r3, [pc, #8]	; (80a08a4 <socket_send_ex+0xc>)
 80a089c:	681b      	ldr	r3, [r3, #0]
 80a089e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a08a0:	9301      	str	r3, [sp, #4]
 80a08a2:	bd08      	pop	{r3, pc}
 80a08a4:	080601bc 	.word	0x080601bc

080a08a8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a08a8:	b508      	push	{r3, lr}
 80a08aa:	4b02      	ldr	r3, [pc, #8]	; (80a08b4 <HAL_USB_USART_Init+0xc>)
 80a08ac:	681b      	ldr	r3, [r3, #0]
 80a08ae:	681b      	ldr	r3, [r3, #0]
 80a08b0:	9301      	str	r3, [sp, #4]
 80a08b2:	bd08      	pop	{r3, pc}
 80a08b4:	080601d8 	.word	0x080601d8

080a08b8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a08b8:	b508      	push	{r3, lr}
 80a08ba:	4b02      	ldr	r3, [pc, #8]	; (80a08c4 <HAL_USB_USART_Begin+0xc>)
 80a08bc:	681b      	ldr	r3, [r3, #0]
 80a08be:	685b      	ldr	r3, [r3, #4]
 80a08c0:	9301      	str	r3, [sp, #4]
 80a08c2:	bd08      	pop	{r3, pc}
 80a08c4:	080601d8 	.word	0x080601d8

080a08c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a08c8:	b508      	push	{r3, lr}
 80a08ca:	4b02      	ldr	r3, [pc, #8]	; (80a08d4 <HAL_USB_USART_Available_Data+0xc>)
 80a08cc:	681b      	ldr	r3, [r3, #0]
 80a08ce:	691b      	ldr	r3, [r3, #16]
 80a08d0:	9301      	str	r3, [sp, #4]
 80a08d2:	bd08      	pop	{r3, pc}
 80a08d4:	080601d8 	.word	0x080601d8

080a08d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a08d8:	b508      	push	{r3, lr}
 80a08da:	4b02      	ldr	r3, [pc, #8]	; (80a08e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a08dc:	681b      	ldr	r3, [r3, #0]
 80a08de:	695b      	ldr	r3, [r3, #20]
 80a08e0:	9301      	str	r3, [sp, #4]
 80a08e2:	bd08      	pop	{r3, pc}
 80a08e4:	080601d8 	.word	0x080601d8

080a08e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a08e8:	b508      	push	{r3, lr}
 80a08ea:	4b02      	ldr	r3, [pc, #8]	; (80a08f4 <HAL_USB_USART_Receive_Data+0xc>)
 80a08ec:	681b      	ldr	r3, [r3, #0]
 80a08ee:	699b      	ldr	r3, [r3, #24]
 80a08f0:	9301      	str	r3, [sp, #4]
 80a08f2:	bd08      	pop	{r3, pc}
 80a08f4:	080601d8 	.word	0x080601d8

080a08f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a08f8:	b508      	push	{r3, lr}
 80a08fa:	4b02      	ldr	r3, [pc, #8]	; (80a0904 <HAL_USB_USART_Send_Data+0xc>)
 80a08fc:	681b      	ldr	r3, [r3, #0]
 80a08fe:	69db      	ldr	r3, [r3, #28]
 80a0900:	9301      	str	r3, [sp, #4]
 80a0902:	bd08      	pop	{r3, pc}
 80a0904:	080601d8 	.word	0x080601d8

080a0908 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0908:	b508      	push	{r3, lr}
 80a090a:	4b02      	ldr	r3, [pc, #8]	; (80a0914 <HAL_USB_USART_Flush_Data+0xc>)
 80a090c:	681b      	ldr	r3, [r3, #0]
 80a090e:	6a1b      	ldr	r3, [r3, #32]
 80a0910:	9301      	str	r3, [sp, #4]
 80a0912:	bd08      	pop	{r3, pc}
 80a0914:	080601d8 	.word	0x080601d8

080a0918 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a0918:	b508      	push	{r3, lr}
 80a091a:	4b02      	ldr	r3, [pc, #8]	; (80a0924 <HAL_NET_SetNetWatchDog+0xc>)
 80a091c:	681b      	ldr	r3, [r3, #0]
 80a091e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0920:	9301      	str	r3, [sp, #4]
 80a0922:	bd08      	pop	{r3, pc}
 80a0924:	080601c0 	.word	0x080601c0

080a0928 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0928:	b508      	push	{r3, lr}
 80a092a:	4b02      	ldr	r3, [pc, #8]	; (80a0934 <inet_gethostbyname+0xc>)
 80a092c:	681b      	ldr	r3, [r3, #0]
 80a092e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0930:	9301      	str	r3, [sp, #4]
 80a0932:	bd08      	pop	{r3, pc}
 80a0934:	080601c0 	.word	0x080601c0

080a0938 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a0938:	b508      	push	{r3, lr}
 80a093a:	4b02      	ldr	r3, [pc, #8]	; (80a0944 <log_message+0xc>)
 80a093c:	681b      	ldr	r3, [r3, #0]
 80a093e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a0940:	9301      	str	r3, [sp, #4]
 80a0942:	bd08      	pop	{r3, pc}
 80a0944:	080201a8 	.word	0x080201a8

080a0948 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0948:	b508      	push	{r3, lr}
 80a094a:	4b02      	ldr	r3, [pc, #8]	; (80a0954 <set_system_mode+0xc>)
 80a094c:	681b      	ldr	r3, [r3, #0]
 80a094e:	685b      	ldr	r3, [r3, #4]
 80a0950:	9301      	str	r3, [sp, #4]
 80a0952:	bd08      	pop	{r3, pc}
 80a0954:	080601a4 	.word	0x080601a4

080a0958 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0958:	b508      	push	{r3, lr}
 80a095a:	4b02      	ldr	r3, [pc, #8]	; (80a0964 <system_delay_ms+0xc>)
 80a095c:	681b      	ldr	r3, [r3, #0]
 80a095e:	695b      	ldr	r3, [r3, #20]
 80a0960:	9301      	str	r3, [sp, #4]
 80a0962:	bd08      	pop	{r3, pc}
 80a0964:	080601a4 	.word	0x080601a4

080a0968 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0968:	b508      	push	{r3, lr}
 80a096a:	4b02      	ldr	r3, [pc, #8]	; (80a0974 <application_thread_current+0xc>)
 80a096c:	681b      	ldr	r3, [r3, #0]
 80a096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0970:	9301      	str	r3, [sp, #4]
 80a0972:	bd08      	pop	{r3, pc}
 80a0974:	080601a4 	.word	0x080601a4

080a0978 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0978:	b508      	push	{r3, lr}
 80a097a:	4b02      	ldr	r3, [pc, #8]	; (80a0984 <application_thread_invoke+0xc>)
 80a097c:	681b      	ldr	r3, [r3, #0]
 80a097e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0980:	9301      	str	r3, [sp, #4]
 80a0982:	bd08      	pop	{r3, pc}
 80a0984:	080601a4 	.word	0x080601a4

080a0988 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0988:	b508      	push	{r3, lr}
 80a098a:	4b03      	ldr	r3, [pc, #12]	; (80a0998 <system_ctrl_set_app_request_handler+0x10>)
 80a098c:	681b      	ldr	r3, [r3, #0]
 80a098e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0992:	9301      	str	r3, [sp, #4]
 80a0994:	bd08      	pop	{r3, pc}
 80a0996:	0000      	.short	0x0000
 80a0998:	080601a4 	.word	0x080601a4

080a099c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a099c:	b508      	push	{r3, lr}
 80a099e:	4b03      	ldr	r3, [pc, #12]	; (80a09ac <system_ctrl_set_result+0x10>)
 80a09a0:	681b      	ldr	r3, [r3, #0]
 80a09a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a09a6:	9301      	str	r3, [sp, #4]
 80a09a8:	bd08      	pop	{r3, pc}
 80a09aa:	0000      	.short	0x0000
 80a09ac:	080601a4 	.word	0x080601a4

080a09b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a09b0:	b508      	push	{r3, lr}
 80a09b2:	4b02      	ldr	r3, [pc, #8]	; (80a09bc <network_connect+0xc>)
 80a09b4:	681b      	ldr	r3, [r3, #0]
 80a09b6:	685b      	ldr	r3, [r3, #4]
 80a09b8:	9301      	str	r3, [sp, #4]
 80a09ba:	bd08      	pop	{r3, pc}
 80a09bc:	080601c8 	.word	0x080601c8

080a09c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a09c0:	b508      	push	{r3, lr}
 80a09c2:	4b02      	ldr	r3, [pc, #8]	; (80a09cc <network_connecting+0xc>)
 80a09c4:	681b      	ldr	r3, [r3, #0]
 80a09c6:	689b      	ldr	r3, [r3, #8]
 80a09c8:	9301      	str	r3, [sp, #4]
 80a09ca:	bd08      	pop	{r3, pc}
 80a09cc:	080601c8 	.word	0x080601c8

080a09d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a09d0:	b508      	push	{r3, lr}
 80a09d2:	4b02      	ldr	r3, [pc, #8]	; (80a09dc <network_disconnect+0xc>)
 80a09d4:	681b      	ldr	r3, [r3, #0]
 80a09d6:	68db      	ldr	r3, [r3, #12]
 80a09d8:	9301      	str	r3, [sp, #4]
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	080601c8 	.word	0x080601c8

080a09e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a09e0:	b508      	push	{r3, lr}
 80a09e2:	4b02      	ldr	r3, [pc, #8]	; (80a09ec <network_ready+0xc>)
 80a09e4:	681b      	ldr	r3, [r3, #0]
 80a09e6:	691b      	ldr	r3, [r3, #16]
 80a09e8:	9301      	str	r3, [sp, #4]
 80a09ea:	bd08      	pop	{r3, pc}
 80a09ec:	080601c8 	.word	0x080601c8

080a09f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <network_on+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	695b      	ldr	r3, [r3, #20]
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601c8 	.word	0x080601c8

080a0a00 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0a00:	b508      	push	{r3, lr}
 80a0a02:	4b02      	ldr	r3, [pc, #8]	; (80a0a0c <network_off+0xc>)
 80a0a04:	681b      	ldr	r3, [r3, #0]
 80a0a06:	699b      	ldr	r3, [r3, #24]
 80a0a08:	9301      	str	r3, [sp, #4]
 80a0a0a:	bd08      	pop	{r3, pc}
 80a0a0c:	080601c8 	.word	0x080601c8

080a0a10 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <network_listen+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	69db      	ldr	r3, [r3, #28]
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601c8 	.word	0x080601c8

080a0a20 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <network_listening+0xc>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	6a1b      	ldr	r3, [r3, #32]
 80a0a28:	9301      	str	r3, [sp, #4]
 80a0a2a:	bd08      	pop	{r3, pc}
 80a0a2c:	080601c8 	.word	0x080601c8

080a0a30 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0a30:	b508      	push	{r3, lr}
 80a0a32:	4b02      	ldr	r3, [pc, #8]	; (80a0a3c <network_set_listen_timeout+0xc>)
 80a0a34:	681b      	ldr	r3, [r3, #0]
 80a0a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0a38:	9301      	str	r3, [sp, #4]
 80a0a3a:	bd08      	pop	{r3, pc}
 80a0a3c:	080601c8 	.word	0x080601c8

080a0a40 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0a40:	b508      	push	{r3, lr}
 80a0a42:	4b02      	ldr	r3, [pc, #8]	; (80a0a4c <network_get_listen_timeout+0xc>)
 80a0a44:	681b      	ldr	r3, [r3, #0]
 80a0a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0a48:	9301      	str	r3, [sp, #4]
 80a0a4a:	bd08      	pop	{r3, pc}
 80a0a4c:	080601c8 	.word	0x080601c8

080a0a50 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a0a50:	b508      	push	{r3, lr}
 80a0a52:	4b02      	ldr	r3, [pc, #8]	; (80a0a5c <spark_variable+0xc>)
 80a0a54:	681b      	ldr	r3, [r3, #0]
 80a0a56:	681b      	ldr	r3, [r3, #0]
 80a0a58:	9301      	str	r3, [sp, #4]
 80a0a5a:	bd08      	pop	{r3, pc}
 80a0a5c:	080601cc 	.word	0x080601cc

080a0a60 <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0a60:	b508      	push	{r3, lr}
 80a0a62:	4b02      	ldr	r3, [pc, #8]	; (80a0a6c <spark_cloud_flag_connected+0xc>)
 80a0a64:	681b      	ldr	r3, [r3, #0]
 80a0a66:	695b      	ldr	r3, [r3, #20]
 80a0a68:	9301      	str	r3, [sp, #4]
 80a0a6a:	bd08      	pop	{r3, pc}
 80a0a6c:	080601cc 	.word	0x080601cc

080a0a70 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0a70:	b508      	push	{r3, lr}
 80a0a72:	4b02      	ldr	r3, [pc, #8]	; (80a0a7c <spark_send_event+0xc>)
 80a0a74:	681b      	ldr	r3, [r3, #0]
 80a0a76:	6a1b      	ldr	r3, [r3, #32]
 80a0a78:	9301      	str	r3, [sp, #4]
 80a0a7a:	bd08      	pop	{r3, pc}
 80a0a7c:	080601cc 	.word	0x080601cc

080a0a80 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0a80:	b508      	push	{r3, lr}
 80a0a82:	4b02      	ldr	r3, [pc, #8]	; (80a0a8c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0a84:	681b      	ldr	r3, [r3, #0]
 80a0a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0a88:	9301      	str	r3, [sp, #4]
 80a0a8a:	bd08      	pop	{r3, pc}
 80a0a8c:	080601cc 	.word	0x080601cc

080a0a90 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0a90:	b508      	push	{r3, lr}
 80a0a92:	4b02      	ldr	r3, [pc, #8]	; (80a0a9c <malloc+0xc>)
 80a0a94:	681b      	ldr	r3, [r3, #0]
 80a0a96:	681b      	ldr	r3, [r3, #0]
 80a0a98:	9301      	str	r3, [sp, #4]
 80a0a9a:	bd08      	pop	{r3, pc}
 80a0a9c:	080601a0 	.word	0x080601a0

080a0aa0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0aa0:	b508      	push	{r3, lr}
 80a0aa2:	4b02      	ldr	r3, [pc, #8]	; (80a0aac <free+0xc>)
 80a0aa4:	681b      	ldr	r3, [r3, #0]
 80a0aa6:	685b      	ldr	r3, [r3, #4]
 80a0aa8:	9301      	str	r3, [sp, #4]
 80a0aaa:	bd08      	pop	{r3, pc}
 80a0aac:	080601a0 	.word	0x080601a0

080a0ab0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0ab0:	b508      	push	{r3, lr}
 80a0ab2:	4b02      	ldr	r3, [pc, #8]	; (80a0abc <realloc+0xc>)
 80a0ab4:	681b      	ldr	r3, [r3, #0]
 80a0ab6:	689b      	ldr	r3, [r3, #8]
 80a0ab8:	9301      	str	r3, [sp, #4]
 80a0aba:	bd08      	pop	{r3, pc}
 80a0abc:	080601a0 	.word	0x080601a0

080a0ac0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a0ac0:	b508      	push	{r3, lr}
 80a0ac2:	4b02      	ldr	r3, [pc, #8]	; (80a0acc <sprintf+0xc>)
 80a0ac4:	681b      	ldr	r3, [r3, #0]
 80a0ac6:	68db      	ldr	r3, [r3, #12]
 80a0ac8:	9301      	str	r3, [sp, #4]
 80a0aca:	bd08      	pop	{r3, pc}
 80a0acc:	080601a0 	.word	0x080601a0

080a0ad0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0ad0:	b508      	push	{r3, lr}
 80a0ad2:	4b02      	ldr	r3, [pc, #8]	; (80a0adc <abort+0xc>)
 80a0ad4:	681b      	ldr	r3, [r3, #0]
 80a0ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0ad8:	9301      	str	r3, [sp, #4]
 80a0ada:	bd08      	pop	{r3, pc}
 80a0adc:	080601a0 	.word	0x080601a0

080a0ae0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0ae0:	b508      	push	{r3, lr}
 80a0ae2:	4b02      	ldr	r3, [pc, #8]	; (80a0aec <_malloc_r+0xc>)
 80a0ae4:	681b      	ldr	r3, [r3, #0]
 80a0ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0ae8:	9301      	str	r3, [sp, #4]
 80a0aea:	bd08      	pop	{r3, pc}
 80a0aec:	080601a0 	.word	0x080601a0

080a0af0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0af0:	b510      	push	{r4, lr}
 80a0af2:	4b04      	ldr	r3, [pc, #16]	; (80a0b04 <_ZN8SPIClassD1Ev+0x14>)
 80a0af4:	4604      	mov	r4, r0
 80a0af6:	6003      	str	r3, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0af8:	68c0      	ldr	r0, [r0, #12]
 80a0afa:	b108      	cbz	r0, 80a0b00 <_ZN8SPIClassD1Ev+0x10>
            os_mutex_recursive_destroy(handle_);
 80a0afc:	f7ff fe12 	bl	80a0724 <os_mutex_recursive_destroy>
 80a0b00:	4620      	mov	r0, r4
 80a0b02:	bd10      	pop	{r4, pc}
 80a0b04:	080a2870 	.word	0x080a2870

080a0b08 <_ZN8SPIClassD0Ev>:
 80a0b08:	b510      	push	{r4, lr}
 80a0b0a:	4604      	mov	r4, r0
 80a0b0c:	f7ff fff0 	bl	80a0af0 <_ZN8SPIClassD1Ev>
 80a0b10:	4620      	mov	r0, r4
 80a0b12:	2110      	movs	r1, #16
 80a0b14:	f001 fb74 	bl	80a2200 <_ZdlPvj>
 80a0b18:	4620      	mov	r0, r4
 80a0b1a:	bd10      	pop	{r4, pc}

080a0b1c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0b1c:	b570      	push	{r4, r5, r6, lr}
 80a0b1e:	4604      	mov	r4, r0
 80a0b20:	460e      	mov	r6, r1
 80a0b22:	4b07      	ldr	r3, [pc, #28]	; (80a0b40 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0b24:	2500      	movs	r5, #0
 80a0b26:	6003      	str	r3, [r0, #0]
 80a0b28:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_recursive_create(&handle_);
 80a0b2c:	f7ff fdf2 	bl	80a0714 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a0b30:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a0b32:	7126      	strb	r6, [r4, #4]
    HAL_SPI_Init(_spi);
 80a0b34:	f7ff fdce 	bl	80a06d4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0b38:	60a5      	str	r5, [r4, #8]
}
 80a0b3a:	4620      	mov	r0, r4
 80a0b3c:	bd70      	pop	{r4, r5, r6, pc}
 80a0b3e:	bf00      	nop
 80a0b40:	080a2870 	.word	0x080a2870

080a0b44 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a0b44:	7900      	ldrb	r0, [r0, #4]
 80a0b46:	f7ff bdcd 	b.w	80a06e4 <HAL_SPI_Is_Enabled>

080a0b4a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0b4a:	b510      	push	{r4, lr}
 80a0b4c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0b4e:	6800      	ldr	r0, [r0, #0]
 80a0b50:	b118      	cbz	r0, 80a0b5a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a0b52:	f7ff ffa5 	bl	80a0aa0 <free>
            wakeupSource_ = nullptr;
 80a0b56:	2300      	movs	r3, #0
 80a0b58:	6023      	str	r3, [r4, #0]
 80a0b5a:	bd10      	pop	{r4, pc}

080a0b5c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0b5c:	b510      	push	{r4, lr}
 80a0b5e:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a0b60:	f7ff fff3 	bl	80a0b4a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0b64:	4620      	mov	r0, r4
 80a0b66:	bd10      	pop	{r4, pc}

080a0b68 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0b6c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0b6e:	4c08      	ldr	r4, [pc, #32]	; (80a0b90 <_GLOBAL__sub_I_System+0x28>)
 80a0b70:	2000      	movs	r0, #0
 80a0b72:	6020      	str	r0, [r4, #0]
 80a0b74:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0b76:	71a0      	strb	r0, [r4, #6]
 80a0b78:	8120      	strh	r0, [r4, #8]
 80a0b7a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0b7c:	f7ff fee4 	bl	80a0948 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0b80:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0b86:	4a03      	ldr	r2, [pc, #12]	; (80a0b94 <_GLOBAL__sub_I_System+0x2c>)
 80a0b88:	4903      	ldr	r1, [pc, #12]	; (80a0b98 <_GLOBAL__sub_I_System+0x30>)
 80a0b8a:	f001 bb2b 	b.w	80a21e4 <__aeabi_atexit>
 80a0b8e:	bf00      	nop
 80a0b90:	20000524 	.word	0x20000524
 80a0b94:	2000008c 	.word	0x2000008c
 80a0b98:	080a0b5d 	.word	0x080a0b5d

080a0b9c <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a0b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0b9e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0ba0:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a0ba2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0ba6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a0ba8:	2201      	movs	r2, #1
 80a0baa:	f247 5330 	movw	r3, #30000	; 0x7530
 80a0bae:	4621      	mov	r1, r4
 80a0bb0:	47a8      	blx	r5
}
 80a0bb2:	b003      	add	sp, #12
 80a0bb4:	bd30      	pop	{r4, r5, pc}

080a0bb6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a0bb6:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0bb8:	6803      	ldr	r3, [r0, #0]
 80a0bba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a0bbc:	f247 5330 	movw	r3, #30000	; 0x7530
 80a0bc0:	46a4      	mov	ip, r4
}
 80a0bc2:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a0bc4:	4760      	bx	ip

080a0bc6 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a0bc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0bc8:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a0bca:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a0bcc:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a0bd0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a0bd2:	4621      	mov	r1, r4
 80a0bd4:	4613      	mov	r3, r2
 80a0bd6:	2201      	movs	r2, #1
 80a0bd8:	47a8      	blx	r5
}
 80a0bda:	b003      	add	sp, #12
 80a0bdc:	bd30      	pop	{r4, r5, pc}

080a0bde <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a0bde:	4770      	bx	lr

080a0be0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a0be0:	4770      	bx	lr

080a0be2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a0be2:	2000      	movs	r0, #0
 80a0be4:	4770      	bx	lr

080a0be6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a0be6:	b510      	push	{r4, lr}
 80a0be8:	4604      	mov	r4, r0
 80a0bea:	2114      	movs	r1, #20
 80a0bec:	f001 fb08 	bl	80a2200 <_ZdlPvj>
 80a0bf0:	4620      	mov	r0, r4
 80a0bf2:	bd10      	pop	{r4, pc}

080a0bf4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a0bf4:	f7ff ba53 	b.w	80a009e <_ZdlPv>

080a0bf8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a0bf8:	b510      	push	{r4, lr}
 80a0bfa:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a0bfc:	6803      	ldr	r3, [r0, #0]
 80a0bfe:	689b      	ldr	r3, [r3, #8]
 80a0c00:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0c02:	68a3      	ldr	r3, [r4, #8]
 80a0c04:	3b01      	subs	r3, #1
 80a0c06:	60a3      	str	r3, [r4, #8]
 80a0c08:	b92b      	cbnz	r3, 80a0c16 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28+0x1e>
            _M_destroy();
 80a0c0a:	6823      	ldr	r3, [r4, #0]
 80a0c0c:	4620      	mov	r0, r4
        }
    }
 80a0c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a0c12:	68db      	ldr	r3, [r3, #12]
 80a0c14:	4718      	bx	r3
 80a0c16:	bd10      	pop	{r4, pc}

080a0c18 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a0c18:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0c1a:	4604      	mov	r4, r0
 80a0c1c:	4606      	mov	r6, r0
 80a0c1e:	694d      	ldr	r5, [r1, #20]
 80a0c20:	4b04      	ldr	r3, [pc, #16]	; (80a0c34 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a0c22:	358c      	adds	r5, #140	; 0x8c
 80a0c24:	f844 3b04 	str.w	r3, [r4], #4
 80a0c28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0c2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0c2c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a0c2e:	4630      	mov	r0, r6
 80a0c30:	7023      	strb	r3, [r4, #0]
 80a0c32:	bd70      	pop	{r4, r5, r6, pc}
 80a0c34:	080a2a28 	.word	0x080a2a28

080a0c38 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a0c38:	b510      	push	{r4, lr}
 80a0c3a:	6943      	ldr	r3, [r0, #20]
 80a0c3c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a0c3e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0c42:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a0c46:	429a      	cmp	r2, r3
 80a0c48:	d005      	beq.n	80a0c56 <_ZN9TCPClient4peekEv+0x1e>
 80a0c4a:	6962      	ldr	r2, [r4, #20]
 80a0c4c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a0c50:	4413      	add	r3, r2
 80a0c52:	7918      	ldrb	r0, [r3, #4]
 80a0c54:	bd10      	pop	{r4, pc}
 80a0c56:	6803      	ldr	r3, [r0, #0]
 80a0c58:	691b      	ldr	r3, [r3, #16]
 80a0c5a:	4798      	blx	r3
 80a0c5c:	2800      	cmp	r0, #0
 80a0c5e:	d1f4      	bne.n	80a0c4a <_ZN9TCPClient4peekEv+0x12>
 80a0c60:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a0c64:	bd10      	pop	{r4, pc}

080a0c66 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a0c66:	b510      	push	{r4, lr}
 80a0c68:	6943      	ldr	r3, [r0, #20]
 80a0c6a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a0c6c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0c70:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a0c74:	429a      	cmp	r2, r3
 80a0c76:	d008      	beq.n	80a0c8a <_ZN9TCPClient4readEv+0x24>
 80a0c78:	6962      	ldr	r2, [r4, #20]
 80a0c7a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a0c7e:	1c59      	adds	r1, r3, #1
 80a0c80:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a0c84:	4413      	add	r3, r2
 80a0c86:	7918      	ldrb	r0, [r3, #4]
 80a0c88:	bd10      	pop	{r4, pc}
 80a0c8a:	6803      	ldr	r3, [r0, #0]
 80a0c8c:	691b      	ldr	r3, [r3, #16]
 80a0c8e:	4798      	blx	r3
 80a0c90:	2800      	cmp	r0, #0
 80a0c92:	d1f1      	bne.n	80a0c78 <_ZN9TCPClient4readEv+0x12>
 80a0c94:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a0c98:	bd10      	pop	{r4, pc}

080a0c9a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a0c9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0c9c:	6943      	ldr	r3, [r0, #20]
 80a0c9e:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a0ca0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0ca4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a0ca8:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a0caa:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a0cac:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a0cae:	d106      	bne.n	80a0cbe <_ZN9TCPClient4readEPhj+0x24>
 80a0cb0:	6803      	ldr	r3, [r0, #0]
 80a0cb2:	691b      	ldr	r3, [r3, #16]
 80a0cb4:	4798      	blx	r3
 80a0cb6:	b910      	cbnz	r0, 80a0cbe <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a0cb8:	f04f 34ff 	mov.w	r4, #4294967295
 80a0cbc:	e014      	b.n	80a0ce8 <_ZN9TCPClient4readEPhj+0x4e>
 80a0cbe:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a0cc0:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a0cc2:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a0cc6:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a0cca:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a0ccc:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a0cce:	42bc      	cmp	r4, r7
 80a0cd0:	bf28      	it	cs
 80a0cd2:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a0cd4:	3104      	adds	r1, #4
 80a0cd6:	4622      	mov	r2, r4
 80a0cd8:	f001 fc02 	bl	80a24e0 <memcpy>
 80a0cdc:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a0cde:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a0ce2:	4423      	add	r3, r4
 80a0ce4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a0ce8:	4620      	mov	r0, r4
 80a0cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0cec <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a0cec:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a0cee:	2300      	movs	r3, #0
 80a0cf0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a0cf4:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a0cf6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a0cfa:	4770      	bx	lr

080a0cfc <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a0cfc:	b538      	push	{r3, r4, r5, lr}
 80a0cfe:	6942      	ldr	r2, [r0, #20]
 80a0d00:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a0d02:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a0d06:	b11b      	cbz	r3, 80a0d10 <_ZN9TCPClient9availableEv+0x14>
 80a0d08:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a0d0c:	429a      	cmp	r2, r3
 80a0d0e:	d00c      	beq.n	80a0d2a <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a0d10:	6920      	ldr	r0, [r4, #16]
 80a0d12:	f001 f975 	bl	80a2000 <_ZN5spark12NetworkClass4fromEm>
 80a0d16:	6803      	ldr	r3, [r0, #0]
 80a0d18:	68db      	ldr	r3, [r3, #12]
 80a0d1a:	4798      	blx	r3
 80a0d1c:	b318      	cbz	r0, 80a0d66 <_ZN9TCPClient9availableEv+0x6a>
 80a0d1e:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a0d20:	6818      	ldr	r0, [r3, #0]
 80a0d22:	f7ff fd89 	bl	80a0838 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a0d26:	b918      	cbnz	r0, 80a0d30 <_ZN9TCPClient9availableEv+0x34>
 80a0d28:	e01d      	b.n	80a0d66 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a0d2a:	f7ff ffdf 	bl	80a0cec <_ZN9TCPClient12flush_bufferEv>
 80a0d2e:	e7ef      	b.n	80a0d10 <_ZN9TCPClient9availableEv+0x14>
 80a0d30:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a0d32:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a0d36:	297f      	cmp	r1, #127	; 0x7f
 80a0d38:	d815      	bhi.n	80a0d66 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a0d3a:	1d05      	adds	r5, r0, #4
 80a0d3c:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a0d40:	2300      	movs	r3, #0
 80a0d42:	4429      	add	r1, r5
 80a0d44:	6800      	ldr	r0, [r0, #0]
 80a0d46:	f7ff fd8f 	bl	80a0868 <socket_receive>
            if (ret > 0)
 80a0d4a:	2800      	cmp	r0, #0
 80a0d4c:	dd0b      	ble.n	80a0d66 <_ZN9TCPClient9availableEv+0x6a>
 80a0d4e:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a0d50:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a0d54:	b90a      	cbnz	r2, 80a0d5a <_ZN9TCPClient9availableEv+0x5e>
 80a0d56:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a0d5a:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a0d5c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a0d60:	4418      	add	r0, r3
 80a0d62:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a0d66:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a0d68:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a0d6c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a0d70:	1a18      	subs	r0, r3, r0
}
 80a0d72:	bd38      	pop	{r3, r4, r5, pc}

080a0d74 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a0d74:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a0d76:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a0d78:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a0d7a:	6818      	ldr	r0, [r3, #0]
 80a0d7c:	f7ff fd5c 	bl	80a0838 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a0d80:	b118      	cbz	r0, 80a0d8a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a0d82:	6963      	ldr	r3, [r4, #20]
 80a0d84:	6818      	ldr	r0, [r3, #0]
 80a0d86:	f7ff fd77 	bl	80a0878 <socket_close>
 80a0d8a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a0d8c:	f7ff fd7c 	bl	80a0888 <socket_handle_invalid>
 80a0d90:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0d92:	6960      	ldr	r0, [r4, #20]
 80a0d94:	2211      	movs	r2, #17
 80a0d96:	2100      	movs	r1, #0
 80a0d98:	308c      	adds	r0, #140	; 0x8c
 80a0d9a:	f001 fbac 	bl	80a24f6 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a0d9e:	4620      	mov	r0, r4
}
 80a0da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a0da4:	f7ff bfa2 	b.w	80a0cec <_ZN9TCPClient12flush_bufferEv>

080a0da8 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a0da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0dac:	461f      	mov	r7, r3
    stop();
 80a0dae:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a0db0:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a0db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a0db4:	4606      	mov	r6, r0
 80a0db6:	460c      	mov	r4, r1
 80a0db8:	4615      	mov	r5, r2
    stop();
 80a0dba:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a0dbc:	4638      	mov	r0, r7
 80a0dbe:	f001 f91f 	bl	80a2000 <_ZN5spark12NetworkClass4fromEm>
 80a0dc2:	6803      	ldr	r3, [r0, #0]
 80a0dc4:	68db      	ldr	r3, [r3, #12]
 80a0dc6:	4798      	blx	r3
 80a0dc8:	2800      	cmp	r0, #0
 80a0dca:	d056      	beq.n	80a0e7a <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a0dcc:	9700      	str	r7, [sp, #0]
 80a0dce:	462b      	mov	r3, r5
 80a0dd0:	2206      	movs	r2, #6
 80a0dd2:	2101      	movs	r1, #1
 80a0dd4:	2002      	movs	r0, #2
 80a0dd6:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a0dda:	f7ff fd35 	bl	80a0848 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a0dde:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a0de0:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a0de4:	2700      	movs	r7, #0
 80a0de6:	9302      	str	r3, [sp, #8]
 80a0de8:	6973      	ldr	r3, [r6, #20]
 80a0dea:	9703      	str	r7, [sp, #12]
 80a0dec:	681b      	ldr	r3, [r3, #0]
 80a0dee:	2001      	movs	r0, #1
 80a0df0:	9301      	str	r3, [sp, #4]
 80a0df2:	4b23      	ldr	r3, [pc, #140]	; (80a0e80 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a0df4:	aa02      	add	r2, sp, #8
 80a0df6:	9300      	str	r3, [sp, #0]
 80a0df8:	4922      	ldr	r1, [pc, #136]	; (80a0e84 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a0dfa:	463b      	mov	r3, r7
 80a0dfc:	f7ff fd9c 	bl	80a0938 <log_message>

          if (socket_handle_valid(d_->sock))
 80a0e00:	6973      	ldr	r3, [r6, #20]
 80a0e02:	6818      	ldr	r0, [r3, #0]
 80a0e04:	f7ff fd18 	bl	80a0838 <socket_handle_valid>
 80a0e08:	2800      	cmp	r0, #0
 80a0e0a:	d036      	beq.n	80a0e7a <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a0e0c:	4630      	mov	r0, r6
 80a0e0e:	f7ff ff6d 	bl	80a0cec <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a0e12:	2302      	movs	r3, #2
 80a0e14:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a0e18:	0a2b      	lsrs	r3, r5, #8
 80a0e1a:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a0e1e:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a0e20:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a0e24:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a0e28:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a0e2a:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a0e2e:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a0e32:	7963      	ldrb	r3, [r4, #5]
 80a0e34:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a0e38:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a0e3c:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a0e40:	f7ff fd6a 	bl	80a0918 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a0e44:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a0e46:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a0e48:	2210      	movs	r2, #16
 80a0e4a:	a902      	add	r1, sp, #8
 80a0e4c:	6818      	ldr	r0, [r3, #0]
 80a0e4e:	f7ff fd03 	bl	80a0858 <socket_connect>
 80a0e52:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a0e54:	4628      	mov	r0, r5
 80a0e56:	f7ff fd5f 	bl	80a0918 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a0e5c:	6975      	ldr	r5, [r6, #20]
 80a0e5e:	358c      	adds	r5, #140	; 0x8c
 80a0e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a0e62:	6823      	ldr	r3, [r4, #0]
 80a0e64:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a0e66:	f1b8 0f00 	cmp.w	r8, #0
 80a0e6a:	d005      	beq.n	80a0e78 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a0e6c:	6833      	ldr	r3, [r6, #0]
 80a0e6e:	4630      	mov	r0, r6
 80a0e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0e72:	4798      	blx	r3
 80a0e74:	4638      	mov	r0, r7
 80a0e76:	e000      	b.n	80a0e7a <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a0e78:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a0e7a:	b00a      	add	sp, #40	; 0x28
 80a0e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0e80:	080a28e7 	.word	0x080a28e7
 80a0e84:	080a28e0 	.word	0x080a28e0

080a0e88 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a0e88:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a0e8a:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a0e8c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a0e8e:	6818      	ldr	r0, [r3, #0]
 80a0e90:	f7ff fcd2 	bl	80a0838 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a0e94:	b908      	cbnz	r0, 80a0e9a <_ZN9TCPClient6statusEv+0x12>
 80a0e96:	2000      	movs	r0, #0
 80a0e98:	bd10      	pop	{r4, pc}
 80a0e9a:	6920      	ldr	r0, [r4, #16]
 80a0e9c:	f001 f8b0 	bl	80a2000 <_ZN5spark12NetworkClass4fromEm>
 80a0ea0:	6803      	ldr	r3, [r0, #0]
 80a0ea2:	68db      	ldr	r3, [r3, #12]
 80a0ea4:	4798      	blx	r3
 80a0ea6:	2800      	cmp	r0, #0
 80a0ea8:	d0f5      	beq.n	80a0e96 <_ZN9TCPClient6statusEv+0xe>
 80a0eaa:	6963      	ldr	r3, [r4, #20]
 80a0eac:	6818      	ldr	r0, [r3, #0]
 80a0eae:	f7ff fcbb 	bl	80a0828 <socket_active_status>
 80a0eb2:	fab0 f080 	clz	r0, r0
 80a0eb6:	0940      	lsrs	r0, r0, #5
}
 80a0eb8:	bd10      	pop	{r4, pc}

080a0eba <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a0eba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a0ebe:	2500      	movs	r5, #0
 80a0ec0:	6045      	str	r5, [r0, #4]
 80a0ec2:	4604      	mov	r4, r0
 80a0ec4:	460e      	mov	r6, r1
 80a0ec6:	4617      	mov	r7, r2
 80a0ec8:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a0eca:	f7ff ffdd 	bl	80a0e88 <_ZN9TCPClient6statusEv>
 80a0ece:	b160      	cbz	r0, 80a0eea <_ZN9TCPClient5writeEPKhjm+0x30>
 80a0ed0:	6960      	ldr	r0, [r4, #20]
 80a0ed2:	9501      	str	r5, [sp, #4]
 80a0ed4:	f8cd 8000 	str.w	r8, [sp]
 80a0ed8:	462b      	mov	r3, r5
 80a0eda:	463a      	mov	r2, r7
 80a0edc:	4631      	mov	r1, r6
 80a0ede:	6800      	ldr	r0, [r0, #0]
 80a0ee0:	f7ff fcda 	bl	80a0898 <socket_send_ex>
    if (ret < 0) {
 80a0ee4:	2800      	cmp	r0, #0
 80a0ee6:	da03      	bge.n	80a0ef0 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a0ee8:	e001      	b.n	80a0eee <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a0eea:	f04f 30ff 	mov.w	r0, #4294967295
 80a0eee:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a0ef0:	b002      	add	sp, #8
 80a0ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0ef6 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a0ef6:	b538      	push	{r3, r4, r5, lr}
 80a0ef8:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a0efa:	f7ff ffc5 	bl	80a0e88 <_ZN9TCPClient6statusEv>
 80a0efe:	bb00      	cbnz	r0, 80a0f42 <_ZN9TCPClient9connectedEv+0x4c>
 80a0f00:	6963      	ldr	r3, [r4, #20]
 80a0f02:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a0f06:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a0f0a:	4291      	cmp	r1, r2
 80a0f0c:	d119      	bne.n	80a0f42 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a0f0e:	6818      	ldr	r0, [r3, #0]
 80a0f10:	f7ff fc92 	bl	80a0838 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a0f14:	b128      	cbz	r0, 80a0f22 <_ZN9TCPClient9connectedEv+0x2c>
 80a0f16:	6963      	ldr	r3, [r4, #20]
 80a0f18:	6818      	ldr	r0, [r3, #0]
 80a0f1a:	f7ff fc85 	bl	80a0828 <socket_active_status>
 80a0f1e:	2801      	cmp	r0, #1
 80a0f20:	d001      	beq.n	80a0f26 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a0f22:	2500      	movs	r5, #0
 80a0f24:	e00e      	b.n	80a0f44 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a0f26:	6823      	ldr	r3, [r4, #0]
 80a0f28:	4620      	mov	r0, r4
 80a0f2a:	691b      	ldr	r3, [r3, #16]
 80a0f2c:	4798      	blx	r3
 80a0f2e:	2800      	cmp	r0, #0
 80a0f30:	bf14      	ite	ne
 80a0f32:	2501      	movne	r5, #1
 80a0f34:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a0f36:	d105      	bne.n	80a0f44 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a0f38:	6823      	ldr	r3, [r4, #0]
 80a0f3a:	4620      	mov	r0, r4
 80a0f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0f3e:	4798      	blx	r3
 80a0f40:	e000      	b.n	80a0f44 <_ZN9TCPClient9connectedEv+0x4e>
 80a0f42:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a0f44:	4628      	mov	r0, r5
 80a0f46:	bd38      	pop	{r3, r4, r5, pc}

080a0f48 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a0f48:	b508      	push	{r3, lr}
   return (status()!=0);
 80a0f4a:	f7ff ff9d 	bl	80a0e88 <_ZN9TCPClient6statusEv>
}
 80a0f4e:	3000      	adds	r0, #0
 80a0f50:	bf18      	it	ne
 80a0f52:	2001      	movne	r0, #1
 80a0f54:	bd08      	pop	{r3, pc}

080a0f56 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a0f56:	b510      	push	{r4, lr}
 80a0f58:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a0f5a:	2300      	movs	r3, #0
 80a0f5c:	6001      	str	r1, [r0, #0]
 80a0f5e:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a0f62:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a0f66:	3088      	adds	r0, #136	; 0x88
 80a0f68:	f000 fda8 	bl	80a1abc <_ZN9IPAddressC1Ev>
}
 80a0f6c:	4620      	mov	r0, r4
 80a0f6e:	bd10      	pop	{r4, pc}

080a0f70 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0f70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a0f74:	b570      	push	{r4, r5, r6, lr}
 80a0f76:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a0f78:	4a14      	ldr	r2, [pc, #80]	; (80a0fcc <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0f7a:	2300      	movs	r3, #0
 80a0f7c:	6043      	str	r3, [r0, #4]
 80a0f7e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a0f80:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a0f82:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a0f84:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a0f86:	20a0      	movs	r0, #160	; 0xa0
 80a0f88:	460e      	mov	r6, r1
 80a0f8a:	f7ff f886 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a0f8e:	4605      	mov	r5, r0
 80a0f90:	b110      	cbz	r0, 80a0f98 <_ZN9TCPClientC1Em+0x28>
 80a0f92:	4631      	mov	r1, r6
 80a0f94:	f7ff ffdf 	bl	80a0f56 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a0f98:	2014      	movs	r0, #20
 80a0f9a:	f7ff f87e 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a0f9e:	4603      	mov	r3, r0
 80a0fa0:	b128      	cbz	r0, 80a0fae <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0fa2:	2201      	movs	r2, #1
 80a0fa4:	6042      	str	r2, [r0, #4]
 80a0fa6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a0fa8:	4a09      	ldr	r2, [pc, #36]	; (80a0fd0 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a0faa:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a0fac:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0fae:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a0fb0:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0fb2:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0fb4:	b128      	cbz	r0, 80a0fc2 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0fb6:	6843      	ldr	r3, [r0, #4]
 80a0fb8:	3b01      	subs	r3, #1
 80a0fba:	6043      	str	r3, [r0, #4]
 80a0fbc:	b90b      	cbnz	r3, 80a0fc2 <_ZN9TCPClientC1Em+0x52>
 80a0fbe:	f7ff fe1b 	bl	80a0bf8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.28>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a0fc2:	4620      	mov	r0, r4
 80a0fc4:	f7ff fe92 	bl	80a0cec <_ZN9TCPClient12flush_bufferEv>
}
 80a0fc8:	4620      	mov	r0, r4
 80a0fca:	bd70      	pop	{r4, r5, r6, pc}
 80a0fcc:	080a289c 	.word	0x080a289c
 80a0fd0:	080a2880 	.word	0x080a2880

080a0fd4 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a0fd4:	b510      	push	{r4, lr}
 80a0fd6:	4604      	mov	r4, r0
 80a0fd8:	f7ff fc56 	bl	80a0888 <socket_handle_invalid>
 80a0fdc:	4601      	mov	r1, r0
 80a0fde:	4620      	mov	r0, r4
 80a0fe0:	f7ff ffc6 	bl	80a0f70 <_ZN9TCPClientC1Em>
{
}
 80a0fe4:	4620      	mov	r0, r4
 80a0fe6:	bd10      	pop	{r4, pc}

080a0fe8 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a0fe8:	b510      	push	{r4, lr}
 80a0fea:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a0fec:	6800      	ldr	r0, [r0, #0]
 80a0fee:	f7ff fc23 	bl	80a0838 <socket_handle_valid>
 80a0ff2:	b110      	cbz	r0, 80a0ffa <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a0ff4:	6820      	ldr	r0, [r4, #0]
 80a0ff6:	f7ff fc3f 	bl	80a0878 <socket_close>
    }
}
 80a0ffa:	4620      	mov	r0, r4
 80a0ffc:	bd10      	pop	{r4, pc}

080a0ffe <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a0ffe:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a1000:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a1002:	4620      	mov	r0, r4
 80a1004:	f7ff fff0 	bl	80a0fe8 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a1008:	b124      	cbz	r4, 80a1014 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a100a:	4620      	mov	r0, r4
 80a100c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1010:	f7ff b845 	b.w	80a009e <_ZdlPv>
 80a1014:	bd10      	pop	{r4, pc}
	...

080a1018 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a101c:	461f      	mov	r7, r3
    stop();
 80a101e:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1020:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a1022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1024:	4606      	mov	r6, r0
 80a1026:	460d      	mov	r5, r1
 80a1028:	4690      	mov	r8, r2
    stop();
 80a102a:	4798      	blx	r3
    if (Network.ready())
 80a102c:	4813      	ldr	r0, [pc, #76]	; (80a107c <_ZN9TCPClient7connectEPKctm+0x64>)
 80a102e:	f000 ff9a 	bl	80a1f66 <_ZN5spark12NetworkClass5readyEv>
 80a1032:	b300      	cbz	r0, 80a1076 <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a1034:	a802      	add	r0, sp, #8
 80a1036:	f000 fd41 	bl	80a1abc <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a103a:	4628      	mov	r0, r5
 80a103c:	f001 fab9 	bl	80a25b2 <strlen>
 80a1040:	2400      	movs	r4, #0
 80a1042:	b281      	uxth	r1, r0
 80a1044:	9400      	str	r4, [sp, #0]
 80a1046:	463b      	mov	r3, r7
 80a1048:	aa03      	add	r2, sp, #12
 80a104a:	4628      	mov	r0, r5
 80a104c:	f7ff fc6c 	bl	80a0928 <inet_gethostbyname>
 80a1050:	b980      	cbnz	r0, 80a1074 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a1052:	6833      	ldr	r3, [r6, #0]
 80a1054:	ad09      	add	r5, sp, #36	; 0x24
 80a1056:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a105a:	4b09      	ldr	r3, [pc, #36]	; (80a1080 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a105c:	ac03      	add	r4, sp, #12
 80a105e:	9308      	str	r3, [sp, #32]
 80a1060:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1062:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1064:	6823      	ldr	r3, [r4, #0]
 80a1066:	4642      	mov	r2, r8
 80a1068:	702b      	strb	r3, [r5, #0]
 80a106a:	a908      	add	r1, sp, #32
 80a106c:	463b      	mov	r3, r7
 80a106e:	4630      	mov	r0, r6
 80a1070:	47c8      	blx	r9
 80a1072:	e000      	b.n	80a1076 <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a1074:	4620      	mov	r0, r4
}
 80a1076:	b00f      	add	sp, #60	; 0x3c
 80a1078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a107c:	200009b4 	.word	0x200009b4
 80a1080:	080a2a28 	.word	0x080a2a28

080a1084 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1084:	b510      	push	{r4, lr}
 80a1086:	4604      	mov	r4, r0
{
	free(buffer);
 80a1088:	6800      	ldr	r0, [r0, #0]
 80a108a:	f7ff fd09 	bl	80a0aa0 <free>
}
 80a108e:	4620      	mov	r0, r4
 80a1090:	bd10      	pop	{r4, pc}

080a1092 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1092:	b510      	push	{r4, lr}
 80a1094:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1096:	6800      	ldr	r0, [r0, #0]
 80a1098:	b108      	cbz	r0, 80a109e <_ZN6String10invalidateEv+0xc>
 80a109a:	f7ff fd01 	bl	80a0aa0 <free>
	buffer = NULL;
 80a109e:	2300      	movs	r3, #0
 80a10a0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a10a2:	60a3      	str	r3, [r4, #8]
 80a10a4:	6063      	str	r3, [r4, #4]
 80a10a6:	bd10      	pop	{r4, pc}

080a10a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a10a8:	b538      	push	{r3, r4, r5, lr}
 80a10aa:	4604      	mov	r4, r0
 80a10ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a10ae:	6800      	ldr	r0, [r0, #0]
 80a10b0:	3101      	adds	r1, #1
 80a10b2:	f7ff fcfd 	bl	80a0ab0 <realloc>
	if (newbuffer) {
 80a10b6:	b110      	cbz	r0, 80a10be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a10b8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a10bc:	2001      	movs	r0, #1
	}
	return 0;
}
 80a10be:	bd38      	pop	{r3, r4, r5, pc}

080a10c0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a10c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a10c2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a10c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a10c6:	b113      	cbz	r3, 80a10ce <_ZN6String7reserveEj+0xe>
 80a10c8:	6843      	ldr	r3, [r0, #4]
 80a10ca:	428b      	cmp	r3, r1
 80a10cc:	d207      	bcs.n	80a10de <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a10ce:	4620      	mov	r0, r4
 80a10d0:	f7ff ffea 	bl	80a10a8 <_ZN6String12changeBufferEj>
 80a10d4:	b120      	cbz	r0, 80a10e0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a10d6:	68a3      	ldr	r3, [r4, #8]
 80a10d8:	b90b      	cbnz	r3, 80a10de <_ZN6String7reserveEj+0x1e>
 80a10da:	6822      	ldr	r2, [r4, #0]
 80a10dc:	7013      	strb	r3, [r2, #0]
 80a10de:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a10e0:	bd10      	pop	{r4, pc}

080a10e2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a10e2:	b570      	push	{r4, r5, r6, lr}
 80a10e4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a10e6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a10e8:	4604      	mov	r4, r0
 80a10ea:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a10ec:	f7ff ffe8 	bl	80a10c0 <_ZN6String7reserveEj>
 80a10f0:	b918      	cbnz	r0, 80a10fa <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a10f2:	4620      	mov	r0, r4
 80a10f4:	f7ff ffcd 	bl	80a1092 <_ZN6String10invalidateEv>
		return *this;
 80a10f8:	e009      	b.n	80a110e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a10fa:	462a      	mov	r2, r5
 80a10fc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a10fe:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1100:	6820      	ldr	r0, [r4, #0]
 80a1102:	f001 f9ed 	bl	80a24e0 <memcpy>
	buffer[len] = 0;
 80a1106:	6822      	ldr	r2, [r4, #0]
 80a1108:	68a3      	ldr	r3, [r4, #8]
 80a110a:	2100      	movs	r1, #0
 80a110c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a110e:	4620      	mov	r0, r4
 80a1110:	bd70      	pop	{r4, r5, r6, pc}

080a1112 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1112:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1114:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1116:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1118:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a111a:	6043      	str	r3, [r0, #4]
	len = 0;
 80a111c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a111e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1120:	460d      	mov	r5, r1
 80a1122:	b139      	cbz	r1, 80a1134 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1124:	4608      	mov	r0, r1
 80a1126:	f001 fa44 	bl	80a25b2 <strlen>
 80a112a:	4629      	mov	r1, r5
 80a112c:	4602      	mov	r2, r0
 80a112e:	4620      	mov	r0, r4
 80a1130:	f7ff ffd7 	bl	80a10e2 <_ZN6String4copyEPKcj>
}
 80a1134:	4620      	mov	r0, r4
 80a1136:	bd38      	pop	{r3, r4, r5, pc}

080a1138 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1138:	b538      	push	{r3, r4, r5, lr}
 80a113a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a113c:	460c      	mov	r4, r1
 80a113e:	b141      	cbz	r1, 80a1152 <_ZN6StringaSEPKc+0x1a>
 80a1140:	4608      	mov	r0, r1
 80a1142:	f001 fa36 	bl	80a25b2 <strlen>
 80a1146:	4621      	mov	r1, r4
 80a1148:	4602      	mov	r2, r0
 80a114a:	4628      	mov	r0, r5
 80a114c:	f7ff ffc9 	bl	80a10e2 <_ZN6String4copyEPKcj>
 80a1150:	e001      	b.n	80a1156 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a1152:	f7ff ff9e 	bl	80a1092 <_ZN6String10invalidateEv>

	return *this;
}
 80a1156:	4628      	mov	r0, r5
 80a1158:	bd38      	pop	{r3, r4, r5, pc}

080a115a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a115a:	b570      	push	{r4, r5, r6, lr}
 80a115c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a115e:	460e      	mov	r6, r1
 80a1160:	b909      	cbnz	r1, 80a1166 <_ZN6String6concatEPKcj+0xc>
 80a1162:	2000      	movs	r0, #0
 80a1164:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a1166:	b16a      	cbz	r2, 80a1184 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a1168:	6883      	ldr	r3, [r0, #8]
 80a116a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a116c:	4629      	mov	r1, r5
 80a116e:	f7ff ffa7 	bl	80a10c0 <_ZN6String7reserveEj>
 80a1172:	2800      	cmp	r0, #0
 80a1174:	d0f5      	beq.n	80a1162 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a1176:	6820      	ldr	r0, [r4, #0]
 80a1178:	68a3      	ldr	r3, [r4, #8]
 80a117a:	4631      	mov	r1, r6
 80a117c:	4418      	add	r0, r3
 80a117e:	f001 f9f5 	bl	80a256c <strcpy>
	len = newlen;
 80a1182:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a1184:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a1186:	bd70      	pop	{r4, r5, r6, pc}

080a1188 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a1188:	688a      	ldr	r2, [r1, #8]
 80a118a:	6809      	ldr	r1, [r1, #0]
 80a118c:	f7ff bfe5 	b.w	80a115a <_ZN6String6concatEPKcj>

080a1190 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1190:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1192:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a1194:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a1196:	b912      	cbnz	r2, 80a119e <_ZNK6String6equalsEPKc+0xe>
 80a1198:	b919      	cbnz	r1, 80a11a2 <_ZNK6String6equalsEPKc+0x12>
 80a119a:	2001      	movs	r0, #1
 80a119c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a119e:	b911      	cbnz	r1, 80a11a6 <_ZNK6String6equalsEPKc+0x16>
 80a11a0:	6803      	ldr	r3, [r0, #0]
 80a11a2:	7818      	ldrb	r0, [r3, #0]
 80a11a4:	e002      	b.n	80a11ac <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a11a6:	6800      	ldr	r0, [r0, #0]
 80a11a8:	f001 f9d6 	bl	80a2558 <strcmp>
 80a11ac:	fab0 f080 	clz	r0, r0
 80a11b0:	0940      	lsrs	r0, r0, #5
}
 80a11b2:	bd08      	pop	{r3, pc}

080a11b4 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a11b4:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a11b6:	6883      	ldr	r3, [r0, #8]
 80a11b8:	4293      	cmp	r3, r2
 80a11ba:	d907      	bls.n	80a11cc <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a11bc:	6804      	ldr	r4, [r0, #0]
 80a11be:	6809      	ldr	r1, [r1, #0]
 80a11c0:	18a0      	adds	r0, r4, r2
 80a11c2:	f001 f9fe 	bl	80a25c2 <strstr>
	if (found == NULL) return -1;
 80a11c6:	b108      	cbz	r0, 80a11cc <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a11c8:	1b00      	subs	r0, r0, r4
 80a11ca:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
 80a11cc:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
 80a11d0:	bd10      	pop	{r4, pc}

080a11d2 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
 80a11d2:	2200      	movs	r2, #0
 80a11d4:	f7ff bfee 	b.w	80a11b4 <_ZNK6String7indexOfERKS_j>

080a11d8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a11d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a11da:	461d      	mov	r5, r3
	if (left > right) {
 80a11dc:	429a      	cmp	r2, r3
 80a11de:	bf88      	it	hi
 80a11e0:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a11e2:	460f      	mov	r7, r1
 80a11e4:	4614      	mov	r4, r2
	if (left > right) {
 80a11e6:	bf88      	it	hi
 80a11e8:	462c      	movhi	r4, r5
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a11ea:	490b      	ldr	r1, [pc, #44]	; (80a1218 <_ZNK6String9substringEjj+0x40>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a11ec:	bf88      	it	hi
 80a11ee:	461d      	movhi	r5, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a11f0:	4606      	mov	r6, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a11f2:	f7ff ff8e 	bl	80a1112 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a11f6:	68ba      	ldr	r2, [r7, #8]
 80a11f8:	4294      	cmp	r4, r2
 80a11fa:	d80a      	bhi.n	80a1212 <_ZNK6String9substringEjj+0x3a>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
 80a11fc:	6839      	ldr	r1, [r7, #0]
 80a11fe:	4295      	cmp	r5, r2
 80a1200:	bf94      	ite	ls
 80a1202:	ebc4 0205 	rsbls	r2, r4, r5
 80a1206:	ebc4 0202 	rsbhi	r2, r4, r2
 80a120a:	4421      	add	r1, r4
 80a120c:	4630      	mov	r0, r6
 80a120e:	f7ff ff68 	bl	80a10e2 <_ZN6String4copyEPKcj>
	return out;
}
 80a1212:	4630      	mov	r0, r6
 80a1214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1216:	bf00      	nop
 80a1218:	080a2864 	.word	0x080a2864

080a121c <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a121c:	b510      	push	{r4, lr}
 80a121e:	4604      	mov	r4, r0
	return substring(left, len);
 80a1220:	688b      	ldr	r3, [r1, #8]
 80a1222:	f7ff ffd9 	bl	80a11d8 <_ZNK6String9substringEjj>
}
 80a1226:	4620      	mov	r0, r4
 80a1228:	bd10      	pop	{r4, pc}

080a122a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a122a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a122c:	4606      	mov	r6, r0
 80a122e:	460d      	mov	r5, r1
 80a1230:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1232:	2400      	movs	r4, #0
  while (size--) {
 80a1234:	42bd      	cmp	r5, r7
 80a1236:	d00c      	beq.n	80a1252 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1238:	6833      	ldr	r3, [r6, #0]
 80a123a:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a123e:	689b      	ldr	r3, [r3, #8]
 80a1240:	4630      	mov	r0, r6
 80a1242:	4798      	blx	r3
     if (chunk>=0)
 80a1244:	2800      	cmp	r0, #0
 80a1246:	db01      	blt.n	80a124c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1248:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a124a:	e7f3      	b.n	80a1234 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a124c:	2c00      	cmp	r4, #0
 80a124e:	bf08      	it	eq
 80a1250:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1252:	4620      	mov	r0, r4
 80a1254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1256 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1256:	b570      	push	{r4, r5, r6, lr}
 80a1258:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a125a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a125c:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a125e:	b149      	cbz	r1, 80a1274 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1260:	f001 f9a7 	bl	80a25b2 <strlen>
 80a1264:	682b      	ldr	r3, [r5, #0]
 80a1266:	4602      	mov	r2, r0
 80a1268:	4621      	mov	r1, r4
 80a126a:	4628      	mov	r0, r5
    }
 80a126c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1270:	68db      	ldr	r3, [r3, #12]
 80a1272:	4718      	bx	r3
    }
 80a1274:	bd70      	pop	{r4, r5, r6, pc}

080a1276 <_ZN5Print5printEPKc>:
 80a1276:	b508      	push	{r3, lr}
 80a1278:	f7ff ffed 	bl	80a1256 <_ZN5Print5writeEPKc>
 80a127c:	bd08      	pop	{r3, pc}

080a127e <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a127e:	6803      	ldr	r3, [r0, #0]
 80a1280:	689b      	ldr	r3, [r3, #8]
 80a1282:	4718      	bx	r3

080a1284 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1284:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1286:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1288:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a128a:	f7ff fff8 	bl	80a127e <_ZN5Print5printEc>
  n += print('\n');
 80a128e:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1290:	4604      	mov	r4, r0
  n += print('\n');
 80a1292:	4628      	mov	r0, r5
 80a1294:	f7ff fff3 	bl	80a127e <_ZN5Print5printEc>
  return n;
}
 80a1298:	4420      	add	r0, r4
 80a129a:	bd38      	pop	{r3, r4, r5, pc}

080a129c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a129c:	b538      	push	{r3, r4, r5, lr}
 80a129e:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a12a0:	f7ff ffd9 	bl	80a1256 <_ZN5Print5writeEPKc>
 80a12a4:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a12a6:	4628      	mov	r0, r5
 80a12a8:	f7ff ffec 	bl	80a1284 <_ZN5Print7printlnEv>
  return n;
}
 80a12ac:	4420      	add	r0, r4
 80a12ae:	bd38      	pop	{r3, r4, r5, pc}

080a12b0 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a12b0:	2a01      	cmp	r2, #1
 80a12b2:	bf98      	it	ls
 80a12b4:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a12b6:	b530      	push	{r4, r5, lr}
 80a12b8:	460b      	mov	r3, r1
 80a12ba:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a12bc:	2100      	movs	r1, #0
 80a12be:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a12c2:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a12c6:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a12ca:	fb05 3312 	mls	r3, r5, r2, r3
 80a12ce:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a12d0:	2b09      	cmp	r3, #9
 80a12d2:	bf94      	ite	ls
 80a12d4:	3330      	addls	r3, #48	; 0x30
 80a12d6:	3337      	addhi	r3, #55	; 0x37
 80a12d8:	b2db      	uxtb	r3, r3
 80a12da:	4621      	mov	r1, r4
 80a12dc:	f804 3901 	strb.w	r3, [r4], #-1
 80a12e0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a12e2:	2d00      	cmp	r5, #0
 80a12e4:	d1ef      	bne.n	80a12c6 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a12e6:	f7ff ffb6 	bl	80a1256 <_ZN5Print5writeEPKc>
}
 80a12ea:	b00b      	add	sp, #44	; 0x2c
 80a12ec:	bd30      	pop	{r4, r5, pc}

080a12ee <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a12ee:	2300      	movs	r3, #0
 80a12f0:	461a      	mov	r2, r3
 80a12f2:	4619      	mov	r1, r3
 80a12f4:	6840      	ldr	r0, [r0, #4]
 80a12f6:	f7ff bb7b 	b.w	80a09f0 <network_on>

080a12fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a12fa:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a12fc:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a12fe:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a1300:	b17c      	cbz	r4, 80a1322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1302:	6863      	ldr	r3, [r4, #4]
 80a1304:	3b01      	subs	r3, #1
 80a1306:	6063      	str	r3, [r4, #4]
 80a1308:	b95b      	cbnz	r3, 80a1322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a130a:	6823      	ldr	r3, [r4, #0]
 80a130c:	4620      	mov	r0, r4
 80a130e:	689b      	ldr	r3, [r3, #8]
 80a1310:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1312:	68a3      	ldr	r3, [r4, #8]
 80a1314:	3b01      	subs	r3, #1
 80a1316:	60a3      	str	r3, [r4, #8]
 80a1318:	b91b      	cbnz	r3, 80a1322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a131a:	6823      	ldr	r3, [r4, #0]
 80a131c:	4620      	mov	r0, r4
 80a131e:	68db      	ldr	r3, [r3, #12]
 80a1320:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a1322:	4628      	mov	r0, r5
 80a1324:	bd38      	pop	{r3, r4, r5, pc}

080a1326 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1326:	680b      	ldr	r3, [r1, #0]
 80a1328:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a132a:	b113      	cbz	r3, 80a1332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a132c:	685a      	ldr	r2, [r3, #4]
 80a132e:	3201      	adds	r2, #1
 80a1330:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1332:	4770      	bx	lr

080a1334 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1334:	4a01      	ldr	r2, [pc, #4]	; (80a133c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1336:	4b02      	ldr	r3, [pc, #8]	; (80a1340 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1338:	601a      	str	r2, [r3, #0]
 80a133a:	4770      	bx	lr
 80a133c:	080a2971 	.word	0x080a2971
 80a1340:	20000530 	.word	0x20000530

080a1344 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1344:	4b02      	ldr	r3, [pc, #8]	; (80a1350 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1346:	681a      	ldr	r2, [r3, #0]
 80a1348:	4b02      	ldr	r3, [pc, #8]	; (80a1354 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a134a:	601a      	str	r2, [r3, #0]
 80a134c:	4770      	bx	lr
 80a134e:	bf00      	nop
 80a1350:	20000020 	.word	0x20000020
 80a1354:	20000534 	.word	0x20000534

080a1358 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1358:	2100      	movs	r1, #0
 80a135a:	f7ff bafd 	b.w	80a0958 <system_delay_ms>

080a135e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a135e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1360:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1362:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a1364:	b113      	cbz	r3, 80a136c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1366:	2203      	movs	r2, #3
 80a1368:	4601      	mov	r1, r0
 80a136a:	4798      	blx	r3
    }
 80a136c:	4620      	mov	r0, r4
 80a136e:	bd10      	pop	{r4, pc}

080a1370 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1370:	b510      	push	{r4, lr}
 80a1372:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1374:	f7ff fff3 	bl	80a135e <_ZNSt14_Function_baseD1Ev>
 80a1378:	4620      	mov	r0, r4
 80a137a:	bd10      	pop	{r4, pc}

080a137c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a137c:	b513      	push	{r0, r1, r4, lr}
 80a137e:	460b      	mov	r3, r1
 80a1380:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1382:	c803      	ldmia	r0, {r0, r1}
 80a1384:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1388:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a138c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1390:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1394:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1398:	b002      	add	sp, #8
 80a139a:	bd10      	pop	{r4, pc}

080a139c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a139c:	4803      	ldr	r0, [pc, #12]	; (80a13ac <_GLOBAL__sub_I_RGB+0x10>)
 80a139e:	2300      	movs	r3, #0
 80a13a0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a13a2:	4a03      	ldr	r2, [pc, #12]	; (80a13b0 <_GLOBAL__sub_I_RGB+0x14>)
 80a13a4:	4903      	ldr	r1, [pc, #12]	; (80a13b4 <_GLOBAL__sub_I_RGB+0x18>)
 80a13a6:	f000 bf1d 	b.w	80a21e4 <__aeabi_atexit>
 80a13aa:	bf00      	nop
 80a13ac:	20000538 	.word	0x20000538
 80a13b0:	2000008c 	.word	0x2000008c
 80a13b4:	080a1371 	.word	0x080a1371

080a13b8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a13b8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a13ba:	4b14      	ldr	r3, [pc, #80]	; (80a140c <serialEventRun+0x54>)
 80a13bc:	b133      	cbz	r3, 80a13cc <serialEventRun+0x14>
 80a13be:	f000 fc2f 	bl	80a1c20 <_Z16_fetch_usbserialv>
 80a13c2:	6803      	ldr	r3, [r0, #0]
 80a13c4:	691b      	ldr	r3, [r3, #16]
 80a13c6:	4798      	blx	r3
 80a13c8:	2800      	cmp	r0, #0
 80a13ca:	dc16      	bgt.n	80a13fa <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a13cc:	4b10      	ldr	r3, [pc, #64]	; (80a1410 <serialEventRun+0x58>)
 80a13ce:	b133      	cbz	r3, 80a13de <serialEventRun+0x26>
 80a13d0:	f000 fce4 	bl	80a1d9c <_Z22__fetch_global_Serial1v>
 80a13d4:	6803      	ldr	r3, [r0, #0]
 80a13d6:	691b      	ldr	r3, [r3, #16]
 80a13d8:	4798      	blx	r3
 80a13da:	2800      	cmp	r0, #0
 80a13dc:	dc10      	bgt.n	80a1400 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a13de:	4b0d      	ldr	r3, [pc, #52]	; (80a1414 <serialEventRun+0x5c>)
 80a13e0:	b10b      	cbz	r3, 80a13e6 <serialEventRun+0x2e>
 80a13e2:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a13e6:	4b0c      	ldr	r3, [pc, #48]	; (80a1418 <serialEventRun+0x60>)
 80a13e8:	b17b      	cbz	r3, 80a140a <serialEventRun+0x52>
 80a13ea:	f000 fc55 	bl	80a1c98 <_Z17_fetch_usbserial1v>
 80a13ee:	6803      	ldr	r3, [r0, #0]
 80a13f0:	691b      	ldr	r3, [r3, #16]
 80a13f2:	4798      	blx	r3
 80a13f4:	2800      	cmp	r0, #0
 80a13f6:	dc06      	bgt.n	80a1406 <serialEventRun+0x4e>
 80a13f8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a13fa:	f3af 8000 	nop.w
 80a13fe:	e7e5      	b.n	80a13cc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1400:	f3af 8000 	nop.w
 80a1404:	e7eb      	b.n	80a13de <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1406:	f3af 8000 	nop.w
 80a140a:	bd08      	pop	{r3, pc}
	...

080a141c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a141c:	b508      	push	{r3, lr}
	serialEventRun();
 80a141e:	f7ff ffcb 	bl	80a13b8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1422:	f7ff f96f 	bl	80a0704 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1426:	4b01      	ldr	r3, [pc, #4]	; (80a142c <_post_loop+0x10>)
 80a1428:	6018      	str	r0, [r3, #0]
 80a142a:	bd08      	pop	{r3, pc}
 80a142c:	200009d0 	.word	0x200009d0

080a1430 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1430:	4802      	ldr	r0, [pc, #8]	; (80a143c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1432:	4a03      	ldr	r2, [pc, #12]	; (80a1440 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1434:	4903      	ldr	r1, [pc, #12]	; (80a1444 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1436:	1a12      	subs	r2, r2, r0
 80a1438:	f001 b852 	b.w	80a24e0 <memcpy>
 80a143c:	40024000 	.word	0x40024000
 80a1440:	40024004 	.word	0x40024004
 80a1444:	080a2cc0 	.word	0x080a2cc0

080a1448 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1448:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a144a:	2300      	movs	r3, #0
 80a144c:	9300      	str	r3, [sp, #0]
 80a144e:	461a      	mov	r2, r3
 80a1450:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1454:	f7ff faa2 	bl	80a099c <system_ctrl_set_result>
}
 80a1458:	b003      	add	sp, #12
 80a145a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1460 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1460:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1462:	8843      	ldrh	r3, [r0, #2]
 80a1464:	2b0a      	cmp	r3, #10
 80a1466:	d008      	beq.n	80a147a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1468:	2b50      	cmp	r3, #80	; 0x50
 80a146a:	d109      	bne.n	80a1480 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a146c:	4b09      	ldr	r3, [pc, #36]	; (80a1494 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a146e:	681b      	ldr	r3, [r3, #0]
 80a1470:	b13b      	cbz	r3, 80a1482 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1472:	b003      	add	sp, #12
 80a1474:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1478:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a147a:	f7ff ffe5 	bl	80a1448 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a147e:	e006      	b.n	80a148e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1480:	2300      	movs	r3, #0
 80a1482:	9300      	str	r3, [sp, #0]
 80a1484:	461a      	mov	r2, r3
 80a1486:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a148a:	f7ff fa87 	bl	80a099c <system_ctrl_set_result>
        break;
    }
}
 80a148e:	b003      	add	sp, #12
 80a1490:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1494:	20000548 	.word	0x20000548

080a1498 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1498:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a149a:	4c10      	ldr	r4, [pc, #64]	; (80a14dc <module_user_init_hook+0x44>)
 80a149c:	4d10      	ldr	r5, [pc, #64]	; (80a14e0 <module_user_init_hook+0x48>)
 80a149e:	6823      	ldr	r3, [r4, #0]
 80a14a0:	42ab      	cmp	r3, r5
 80a14a2:	4b10      	ldr	r3, [pc, #64]	; (80a14e4 <module_user_init_hook+0x4c>)
 80a14a4:	bf0c      	ite	eq
 80a14a6:	2201      	moveq	r2, #1
 80a14a8:	2200      	movne	r2, #0
 80a14aa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a14ac:	d002      	beq.n	80a14b4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a14ae:	f7ff ffbf 	bl	80a1430 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a14b2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a14b4:	f7ff f91e 	bl	80a06f4 <HAL_RNG_GetRandomNumber>
 80a14b8:	4604      	mov	r4, r0
    srand(seed);
 80a14ba:	f001 f825 	bl	80a2508 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a14be:	4b0a      	ldr	r3, [pc, #40]	; (80a14e8 <module_user_init_hook+0x50>)
 80a14c0:	b113      	cbz	r3, 80a14c8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a14c2:	4620      	mov	r0, r4
 80a14c4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a14c8:	2100      	movs	r1, #0
 80a14ca:	4807      	ldr	r0, [pc, #28]	; (80a14e8 <module_user_init_hook+0x50>)
 80a14cc:	f7ff fad8 	bl	80a0a80 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a14d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a14d4:	2100      	movs	r1, #0
 80a14d6:	4805      	ldr	r0, [pc, #20]	; (80a14ec <module_user_init_hook+0x54>)
 80a14d8:	f7ff ba56 	b.w	80a0988 <system_ctrl_set_app_request_handler>
 80a14dc:	40024000 	.word	0x40024000
 80a14e0:	9a271c1e 	.word	0x9a271c1e
 80a14e4:	2000054c 	.word	0x2000054c
 80a14e8:	00000000 	.word	0x00000000
 80a14ec:	080a1461 	.word	0x080a1461

080a14f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a14f0:	4770      	bx	lr

080a14f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a14f2:	2000      	movs	r0, #0
 80a14f4:	4770      	bx	lr

080a14f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a14f6:	b510      	push	{r4, lr}
 80a14f8:	4604      	mov	r4, r0
 80a14fa:	2110      	movs	r1, #16
 80a14fc:	f000 fe80 	bl	80a2200 <_ZdlPvj>
 80a1500:	4620      	mov	r0, r4
 80a1502:	bd10      	pop	{r4, pc}

080a1504 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1504:	b508      	push	{r3, lr}
      { delete this; }
 80a1506:	b108      	cbz	r0, 80a150c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1508:	f7ff fff5 	bl	80a14f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a150c:	bd08      	pop	{r3, pc}

080a150e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a150e:	2200      	movs	r2, #0
 80a1510:	6002      	str	r2, [r0, #0]
 80a1512:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a1516:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1518:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a151a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a151e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1520:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1522:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1524:	680c      	ldr	r4, [r1, #0]
 80a1526:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1528:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a152a:	bd10      	pop	{r4, pc}

080a152c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a152c:	b510      	push	{r4, lr}
 80a152e:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1530:	6800      	ldr	r0, [r0, #0]
 80a1532:	f7ff fab5 	bl	80a0aa0 <free>
}
 80a1536:	4620      	mov	r0, r4
 80a1538:	bd10      	pop	{r4, pc}

080a153a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a153a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a153c:	68c4      	ldr	r4, [r0, #12]
 80a153e:	b1f4      	cbz	r4, 80a157e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a1540:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1542:	2b02      	cmp	r3, #2
 80a1544:	d103      	bne.n	80a154e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1546:	f104 000c 	add.w	r0, r4, #12
 80a154a:	f7ff ffef 	bl	80a152c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a154e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1550:	b135      	cbz	r5, 80a1560 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1552:	4628      	mov	r0, r5
 80a1554:	f7ff ff03 	bl	80a135e <_ZNSt14_Function_baseD1Ev>
 80a1558:	2110      	movs	r1, #16
 80a155a:	4628      	mov	r0, r5
 80a155c:	f000 fe50 	bl	80a2200 <_ZdlPvj>
 80a1560:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1562:	b135      	cbz	r5, 80a1572 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1564:	4628      	mov	r0, r5
 80a1566:	f7ff fefa 	bl	80a135e <_ZNSt14_Function_baseD1Ev>
 80a156a:	2110      	movs	r1, #16
 80a156c:	4628      	mov	r0, r5
 80a156e:	f000 fe47 	bl	80a2200 <_ZdlPvj>
 80a1572:	4620      	mov	r0, r4
 80a1574:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1578:	2114      	movs	r1, #20
 80a157a:	f000 be41 	b.w	80a2200 <_ZdlPvj>
 80a157e:	bd38      	pop	{r3, r4, r5, pc}

080a1580 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1580:	b513      	push	{r0, r1, r4, lr}
 80a1582:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1584:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1588:	2300      	movs	r3, #0
 80a158a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a158c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a158e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1590:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1592:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1594:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1596:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1598:	f7ff feaf 	bl	80a12fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a159c:	4620      	mov	r0, r4
 80a159e:	b002      	add	sp, #8
 80a15a0:	bd10      	pop	{r4, pc}

080a15a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a15a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a15a4:	460c      	mov	r4, r1
 80a15a6:	4606      	mov	r6, r0
 80a15a8:	460f      	mov	r7, r1
 80a15aa:	f854 3b04 	ldr.w	r3, [r4], #4
 80a15ae:	ad02      	add	r5, sp, #8
 80a15b0:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a15b4:	4621      	mov	r1, r4
 80a15b6:	a801      	add	r0, sp, #4
 80a15b8:	f7ff feb5 	bl	80a1326 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a15bc:	4629      	mov	r1, r5
 80a15be:	4630      	mov	r0, r6
 80a15c0:	f7ff ffde 	bl	80a1580 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a15c4:	a801      	add	r0, sp, #4
 80a15c6:	f7ff fe98 	bl	80a12fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a15ca:	4620      	mov	r0, r4
 80a15cc:	f7ff fe95 	bl	80a12fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a15d0:	4638      	mov	r0, r7
 80a15d2:	2108      	movs	r1, #8
 80a15d4:	f000 fe14 	bl	80a2200 <_ZdlPvj>
        return p;
    }
 80a15d8:	4630      	mov	r0, r6
 80a15da:	b003      	add	sp, #12
 80a15dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a15e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a15e0:	b538      	push	{r3, r4, r5, lr}
 80a15e2:	2300      	movs	r3, #0
 80a15e4:	4604      	mov	r4, r0
 80a15e6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a15e8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a15ea:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a15ec:	f7fe fd55 	bl	80a009a <_Znwj>
 80a15f0:	b128      	cbz	r0, 80a15fe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a15f2:	2301      	movs	r3, #1
 80a15f4:	6043      	str	r3, [r0, #4]
 80a15f6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a15f8:	4b02      	ldr	r3, [pc, #8]	; (80a1604 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a15fa:	60c5      	str	r5, [r0, #12]
 80a15fc:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a15fe:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a1600:	4620      	mov	r0, r4
 80a1602:	bd38      	pop	{r3, r4, r5, pc}
 80a1604:	080a2a0c 	.word	0x080a2a0c

080a1608 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1608:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a160a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a160c:	b90a      	cbnz	r2, 80a1612 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a160e:	f000 fe0a 	bl	80a2226 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1612:	68c3      	ldr	r3, [r0, #12]
    }
 80a1614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1618:	4718      	bx	r3

080a161a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a161a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a161c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a161e:	f100 0110 	add.w	r1, r0, #16
 80a1622:	f7ff fff1 	bl	80a1608 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1626:	bd08      	pop	{r3, pc}

080a1628 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1628:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a162a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a162c:	b90a      	cbnz	r2, 80a1632 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a162e:	f000 fdfa 	bl	80a2226 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1632:	68c3      	ldr	r3, [r0, #12]
    }
 80a1634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1638:	4718      	bx	r3

080a163a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a163a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a163c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a163e:	f100 0110 	add.w	r1, r0, #16
 80a1642:	f7ff fff1 	bl	80a1628 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1646:	bd08      	pop	{r3, pc}

080a1648 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1648:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a164a:	2300      	movs	r3, #0
 80a164c:	6083      	str	r3, [r0, #8]
 80a164e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1650:	4604      	mov	r4, r0
 80a1652:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1654:	b12b      	cbz	r3, 80a1662 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1656:	2202      	movs	r2, #2
 80a1658:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a165a:	68eb      	ldr	r3, [r5, #12]
 80a165c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a165e:	68ab      	ldr	r3, [r5, #8]
 80a1660:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1662:	4620      	mov	r0, r4
 80a1664:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1668 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1668:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a166a:	b089      	sub	sp, #36	; 0x24
 80a166c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a166e:	4668      	mov	r0, sp
 80a1670:	f7ff ff4d 	bl	80a150e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1674:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1678:	2300      	movs	r3, #0
 80a167a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a167e:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a1682:	2b00      	cmp	r3, #0
 80a1684:	d103      	bne.n	80a168e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a1686:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a168a:	2900      	cmp	r1, #0
 80a168c:	d1f7      	bne.n	80a167e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a168e:	d002      	beq.n	80a1696 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a1690:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1694:	e063      	b.n	80a175e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a1696:	f114 050c 	adds.w	r5, r4, #12
 80a169a:	d003      	beq.n	80a16a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a169c:	4669      	mov	r1, sp
 80a169e:	4628      	mov	r0, r5
 80a16a0:	f7ff ff35 	bl	80a150e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a16a4:	f3bf 8f5f 	dmb	sy
 80a16a8:	2301      	movs	r3, #1
 80a16aa:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a16ac:	f3bf 8f5f 	dmb	sy
 80a16b0:	f104 0308 	add.w	r3, r4, #8
 80a16b4:	2000      	movs	r0, #0
 80a16b6:	e853 6f00 	ldrex	r6, [r3]
 80a16ba:	e843 0200 	strex	r2, r0, [r3]
 80a16be:	2a00      	cmp	r2, #0
 80a16c0:	d1f9      	bne.n	80a16b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a16c2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a16c6:	2e00      	cmp	r6, #0
 80a16c8:	d049      	beq.n	80a175e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a16ca:	f7ff f94d 	bl	80a0968 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a16ce:	b120      	cbz	r0, 80a16da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a16d0:	4629      	mov	r1, r5
 80a16d2:	4630      	mov	r0, r6
 80a16d4:	f7ff ff98 	bl	80a1608 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a16d8:	e03a      	b.n	80a1750 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a16da:	4631      	mov	r1, r6
 80a16dc:	a802      	add	r0, sp, #8
 80a16de:	f7ff ffb3 	bl	80a1648 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a16e2:	68e0      	ldr	r0, [r4, #12]
 80a16e4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a16e8:	b108      	cbz	r0, 80a16ee <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a16ea:	f000 ff47 	bl	80a257c <strdup>
 80a16ee:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a16f0:	2010      	movs	r0, #16
 80a16f2:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a16f6:	f7fe fcd0 	bl	80a009a <_Znwj>
 80a16fa:	4605      	mov	r5, r0
 80a16fc:	b1e8      	cbz	r0, 80a173a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a16fe:	2700      	movs	r7, #0
 80a1700:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1702:	2018      	movs	r0, #24
 80a1704:	f7fe fcc9 	bl	80a009a <_Znwj>
 80a1708:	4604      	mov	r4, r0
 80a170a:	b188      	cbz	r0, 80a1730 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a170c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a170e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1710:	a802      	add	r0, sp, #8
 80a1712:	f7ff fe33 	bl	80a137c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1716:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1718:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a171a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a171c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a171e:	9204      	str	r2, [sp, #16]
 80a1720:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1722:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1724:	60e3      	str	r3, [r4, #12]
 80a1726:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a172a:	9205      	str	r2, [sp, #20]
 80a172c:	f7ff feef 	bl	80a150e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1730:	4b0d      	ldr	r3, [pc, #52]	; (80a1768 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1732:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1734:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1736:	4b0d      	ldr	r3, [pc, #52]	; (80a176c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a1738:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a173a:	a806      	add	r0, sp, #24
 80a173c:	f7ff fef6 	bl	80a152c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1740:	a802      	add	r0, sp, #8
 80a1742:	f7ff fe0c 	bl	80a135e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1746:	2200      	movs	r2, #0
 80a1748:	4629      	mov	r1, r5
 80a174a:	4809      	ldr	r0, [pc, #36]	; (80a1770 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a174c:	f7ff f914 	bl	80a0978 <application_thread_invoke>
 80a1750:	4630      	mov	r0, r6
 80a1752:	f7ff fe04 	bl	80a135e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1756:	2110      	movs	r1, #16
 80a1758:	4630      	mov	r0, r6
 80a175a:	f000 fd51 	bl	80a2200 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a175e:	4668      	mov	r0, sp
 80a1760:	f7ff fee4 	bl	80a152c <_ZN8particle5ErrorD1Ev>
    }
 80a1764:	b009      	add	sp, #36	; 0x24
 80a1766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1768:	080a161b 	.word	0x080a161b
 80a176c:	080a1891 	.word	0x080a1891
 80a1770:	080a1de9 	.word	0x080a1de9

080a1774 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1778:	b08b      	sub	sp, #44	; 0x2c
 80a177a:	4606      	mov	r6, r0
 80a177c:	460f      	mov	r7, r1
 80a177e:	4690      	mov	r8, r2
 80a1780:	4699      	mov	r9, r3
 80a1782:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1786:	f7ff f96b 	bl	80a0a60 <spark_cloud_flag_connected>
 80a178a:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a178c:	4683      	mov	fp, r0
 80a178e:	bb30      	cbnz	r0, 80a17de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1790:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a1794:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a1796:	a905      	add	r1, sp, #20
 80a1798:	4628      	mov	r0, r5
 80a179a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a179e:	f7ff feb6 	bl	80a150e <_ZN8particle5ErrorC1EOS0_>
 80a17a2:	2014      	movs	r0, #20
 80a17a4:	f7fe fc79 	bl	80a009a <_Znwj>
 80a17a8:	4604      	mov	r4, r0
 80a17aa:	b158      	cbz	r0, 80a17c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a17ac:	2302      	movs	r3, #2
 80a17ae:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a17b0:	2301      	movs	r3, #1
 80a17b2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a17b4:	f8c0 b004 	str.w	fp, [r0, #4]
 80a17b8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a17bc:	4629      	mov	r1, r5
 80a17be:	300c      	adds	r0, #12
 80a17c0:	f7ff fea5 	bl	80a150e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a17c4:	4630      	mov	r0, r6
 80a17c6:	4621      	mov	r1, r4
 80a17c8:	f840 4b04 	str.w	r4, [r0], #4
 80a17cc:	f7ff ff08 	bl	80a15e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a17d0:	4628      	mov	r0, r5
 80a17d2:	f7ff feab 	bl	80a152c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a17d6:	a805      	add	r0, sp, #20
 80a17d8:	f7ff fea8 	bl	80a152c <_ZN8particle5ErrorD1Ev>
 80a17dc:	e052      	b.n	80a1884 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a17de:	2400      	movs	r4, #0
 80a17e0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a17e2:	2014      	movs	r0, #20
 80a17e4:	606c      	str	r4, [r5, #4]
 80a17e6:	60ac      	str	r4, [r5, #8]
 80a17e8:	9307      	str	r3, [sp, #28]
 80a17ea:	f7fe fc56 	bl	80a009a <_Znwj>
 80a17ee:	4601      	mov	r1, r0
 80a17f0:	b118      	cbz	r0, 80a17fa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a17f2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a17f4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a17f6:	6044      	str	r4, [r0, #4]
 80a17f8:	6084      	str	r4, [r0, #8]
 80a17fa:	a804      	add	r0, sp, #16
 80a17fc:	9103      	str	r1, [sp, #12]
 80a17fe:	f7ff feef 	bl	80a15e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1802:	4b22      	ldr	r3, [pc, #136]	; (80a188c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1804:	2008      	movs	r0, #8
 80a1806:	9308      	str	r3, [sp, #32]
 80a1808:	f7fe fc47 	bl	80a009a <_Znwj>
 80a180c:	4604      	mov	r4, r0
 80a180e:	b128      	cbz	r0, 80a181c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1810:	9b03      	ldr	r3, [sp, #12]
 80a1812:	a904      	add	r1, sp, #16
 80a1814:	f840 3b04 	str.w	r3, [r0], #4
 80a1818:	f7ff fd85 	bl	80a1326 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a181c:	9500      	str	r5, [sp, #0]
 80a181e:	fa5f f38a 	uxtb.w	r3, sl
 80a1822:	464a      	mov	r2, r9
 80a1824:	4641      	mov	r1, r8
 80a1826:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1828:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a182a:	f7ff f921 	bl	80a0a70 <spark_send_event>
 80a182e:	b920      	cbnz	r0, 80a183a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1830:	9b03      	ldr	r3, [sp, #12]
 80a1832:	785b      	ldrb	r3, [r3, #1]
 80a1834:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1838:	b183      	cbz	r3, 80a185c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a183a:	9b03      	ldr	r3, [sp, #12]
 80a183c:	a904      	add	r1, sp, #16
 80a183e:	a806      	add	r0, sp, #24
 80a1840:	9305      	str	r3, [sp, #20]
 80a1842:	f7ff fd70 	bl	80a1326 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1846:	a905      	add	r1, sp, #20
 80a1848:	4630      	mov	r0, r6
 80a184a:	f7ff fe99 	bl	80a1580 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a184e:	a806      	add	r0, sp, #24
 80a1850:	f7ff fd53 	bl	80a12fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1854:	a804      	add	r0, sp, #16
 80a1856:	f7ff fd50 	bl	80a12fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a185a:	e013      	b.n	80a1884 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a185c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1860:	a905      	add	r1, sp, #20
 80a1862:	a803      	add	r0, sp, #12
 80a1864:	9205      	str	r2, [sp, #20]
 80a1866:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a186a:	f7ff fefd 	bl	80a1668 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a186e:	a805      	add	r0, sp, #20
 80a1870:	f7ff fe5c 	bl	80a152c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1874:	a805      	add	r0, sp, #20
 80a1876:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1878:	f7ff fe93 	bl	80a15a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a187c:	a806      	add	r0, sp, #24
 80a187e:	f7ff fd3c 	bl	80a12fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1882:	e7da      	b.n	80a183a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a1884:	4630      	mov	r0, r6
 80a1886:	b00b      	add	sp, #44	; 0x2c
 80a1888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a188c:	080a1a01 	.word	0x080a1a01

080a1890 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1890:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1892:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1894:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1896:	d006      	beq.n	80a18a6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1898:	2a03      	cmp	r2, #3
 80a189a:	d017      	beq.n	80a18cc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a189c:	2a01      	cmp	r2, #1
 80a189e:	d122      	bne.n	80a18e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a18a0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a18a2:	6003      	str	r3, [r0, #0]
	      break;
 80a18a4:	e01f      	b.n	80a18e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a18a6:	2018      	movs	r0, #24
 80a18a8:	680e      	ldr	r6, [r1, #0]
 80a18aa:	f7fe fbf6 	bl	80a009a <_Znwj>
 80a18ae:	4605      	mov	r5, r0
 80a18b0:	b150      	cbz	r0, 80a18c8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a18b2:	4631      	mov	r1, r6
 80a18b4:	f7ff fec8 	bl	80a1648 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a18b8:	6930      	ldr	r0, [r6, #16]
 80a18ba:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a18be:	b108      	cbz	r0, 80a18c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a18c0:	f000 fe5c 	bl	80a257c <strdup>
 80a18c4:	6128      	str	r0, [r5, #16]
 80a18c6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a18c8:	6025      	str	r5, [r4, #0]
 80a18ca:	e00c      	b.n	80a18e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a18cc:	6804      	ldr	r4, [r0, #0]
 80a18ce:	b154      	cbz	r4, 80a18e6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a18d0:	f104 0010 	add.w	r0, r4, #16
 80a18d4:	f7ff fe2a 	bl	80a152c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a18d8:	4620      	mov	r0, r4
 80a18da:	f7ff fd40 	bl	80a135e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a18de:	2118      	movs	r1, #24
 80a18e0:	4620      	mov	r0, r4
 80a18e2:	f000 fc8d 	bl	80a2200 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a18e6:	2000      	movs	r0, #0
 80a18e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a18ea <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a18ea:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a18ec:	2300      	movs	r3, #0
 80a18ee:	6083      	str	r3, [r0, #8]
 80a18f0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a18f2:	4604      	mov	r4, r0
 80a18f4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a18f6:	b12b      	cbz	r3, 80a1904 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a18f8:	2202      	movs	r2, #2
 80a18fa:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a18fc:	68eb      	ldr	r3, [r5, #12]
 80a18fe:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1900:	68ab      	ldr	r3, [r5, #8]
 80a1902:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1904:	4620      	mov	r0, r4
 80a1906:	bd38      	pop	{r3, r4, r5, pc}

080a1908 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1908:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a190a:	b570      	push	{r4, r5, r6, lr}
 80a190c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a190e:	d006      	beq.n	80a191e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1910:	2a03      	cmp	r2, #3
 80a1912:	d011      	beq.n	80a1938 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1914:	2a01      	cmp	r2, #1
 80a1916:	d118      	bne.n	80a194a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1918:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a191a:	6003      	str	r3, [r0, #0]
	      break;
 80a191c:	e015      	b.n	80a194a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a191e:	2014      	movs	r0, #20
 80a1920:	680e      	ldr	r6, [r1, #0]
 80a1922:	f7fe fbba 	bl	80a009a <_Znwj>
 80a1926:	4605      	mov	r5, r0
 80a1928:	b120      	cbz	r0, 80a1934 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a192a:	4631      	mov	r1, r6
 80a192c:	f7ff ffdd 	bl	80a18ea <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1930:	7c33      	ldrb	r3, [r6, #16]
 80a1932:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1934:	6025      	str	r5, [r4, #0]
 80a1936:	e008      	b.n	80a194a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1938:	6804      	ldr	r4, [r0, #0]
 80a193a:	b134      	cbz	r4, 80a194a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a193c:	4620      	mov	r0, r4
 80a193e:	f7ff fd0e 	bl	80a135e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1942:	2114      	movs	r1, #20
 80a1944:	4620      	mov	r0, r4
 80a1946:	f000 fc5b 	bl	80a2200 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a194a:	2000      	movs	r0, #0
 80a194c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1950 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1950:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1952:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1954:	f3bf 8f5f 	dmb	sy
 80a1958:	b087      	sub	sp, #28
 80a195a:	2300      	movs	r3, #0
 80a195c:	e850 6f00 	ldrex	r6, [r0]
 80a1960:	e840 3200 	strex	r2, r3, [r0]
 80a1964:	2a00      	cmp	r2, #0
 80a1966:	d1f9      	bne.n	80a195c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1968:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a196c:	2e00      	cmp	r6, #0
 80a196e:	d03f      	beq.n	80a19f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1970:	4618      	mov	r0, r3
 80a1972:	f7fe fff9 	bl	80a0968 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1976:	4607      	mov	r7, r0
 80a1978:	b120      	cbz	r0, 80a1984 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a197a:	4621      	mov	r1, r4
 80a197c:	4630      	mov	r0, r6
 80a197e:	f7ff fe53 	bl	80a1628 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1982:	e02e      	b.n	80a19e2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1984:	4631      	mov	r1, r6
 80a1986:	a801      	add	r0, sp, #4
 80a1988:	f7ff ffaf 	bl	80a18ea <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a198c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a198e:	2010      	movs	r0, #16
 80a1990:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1994:	f7fe fb81 	bl	80a009a <_Znwj>
 80a1998:	4605      	mov	r5, r0
 80a199a:	b1d0      	cbz	r0, 80a19d2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a199c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a199e:	2014      	movs	r0, #20
 80a19a0:	f7fe fb7b 	bl	80a009a <_Znwj>
 80a19a4:	4604      	mov	r4, r0
 80a19a6:	b178      	cbz	r0, 80a19c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a19a8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a19aa:	4601      	mov	r1, r0
 80a19ac:	a801      	add	r0, sp, #4
 80a19ae:	f7ff fce5 	bl	80a137c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19b2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a19b4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a19b6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a19b8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a19ba:	9203      	str	r2, [sp, #12]
 80a19bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a19be:	60e3      	str	r3, [r4, #12]
 80a19c0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a19c4:	9204      	str	r2, [sp, #16]
 80a19c6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a19c8:	4b0a      	ldr	r3, [pc, #40]	; (80a19f4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a19ca:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a19cc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a19ce:	4b0a      	ldr	r3, [pc, #40]	; (80a19f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a19d0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a19d2:	a801      	add	r0, sp, #4
 80a19d4:	f7ff fcc3 	bl	80a135e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a19d8:	2200      	movs	r2, #0
 80a19da:	4629      	mov	r1, r5
 80a19dc:	4807      	ldr	r0, [pc, #28]	; (80a19fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a19de:	f7fe ffcb 	bl	80a0978 <application_thread_invoke>
 80a19e2:	4630      	mov	r0, r6
 80a19e4:	f7ff fcbb 	bl	80a135e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a19e8:	2110      	movs	r1, #16
 80a19ea:	4630      	mov	r0, r6
 80a19ec:	f000 fc08 	bl	80a2200 <_ZdlPvj>
        }
    }
 80a19f0:	b007      	add	sp, #28
 80a19f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a19f4:	080a163b 	.word	0x080a163b
 80a19f8:	080a1909 	.word	0x080a1909
 80a19fc:	080a1de9 	.word	0x080a1de9

080a1a00 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1a00:	b530      	push	{r4, r5, lr}
 80a1a02:	4604      	mov	r4, r0
 80a1a04:	b085      	sub	sp, #20
 80a1a06:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1a08:	4668      	mov	r0, sp
 80a1a0a:	4611      	mov	r1, r2
 80a1a0c:	f7ff fdc9 	bl	80a15a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1a10:	b17c      	cbz	r4, 80a1a32 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1a12:	b224      	sxth	r4, r4
 80a1a14:	4628      	mov	r0, r5
 80a1a16:	b10d      	cbz	r5, 80a1a1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1a18:	f000 fdb0 	bl	80a257c <strdup>
 80a1a1c:	9002      	str	r0, [sp, #8]
 80a1a1e:	a902      	add	r1, sp, #8
 80a1a20:	4668      	mov	r0, sp
 80a1a22:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1a26:	f7ff fe1f 	bl	80a1668 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1a2a:	a802      	add	r0, sp, #8
 80a1a2c:	f7ff fd7e 	bl	80a152c <_ZN8particle5ErrorD1Ev>
 80a1a30:	e01d      	b.n	80a1a6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1a32:	f04f 0201 	mov.w	r2, #1
 80a1a36:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1a38:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1a3c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1a40:	42a3      	cmp	r3, r4
 80a1a42:	d103      	bne.n	80a1a4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1a44:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1a48:	2900      	cmp	r1, #0
 80a1a4a:	d1f7      	bne.n	80a1a3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1a4c:	d002      	beq.n	80a1a54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1a4e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1a52:	e00c      	b.n	80a1a6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1a54:	f110 010c 	adds.w	r1, r0, #12
 80a1a58:	f04f 0301 	mov.w	r3, #1
 80a1a5c:	bf18      	it	ne
 80a1a5e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1a60:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1a64:	3004      	adds	r0, #4
 80a1a66:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1a6a:	f7ff ff71 	bl	80a1950 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1a6e:	a801      	add	r0, sp, #4
 80a1a70:	f7ff fc43 	bl	80a12fa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1a74:	b005      	add	sp, #20
 80a1a76:	bd30      	pop	{r4, r5, pc}

080a1a78 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1a78:	4770      	bx	lr

080a1a7a <_ZN9IPAddressD0Ev>:
 80a1a7a:	b510      	push	{r4, lr}
 80a1a7c:	4604      	mov	r4, r0
 80a1a7e:	2118      	movs	r1, #24
 80a1a80:	f000 fbbe 	bl	80a2200 <_ZdlPvj>
 80a1a84:	4620      	mov	r0, r4
 80a1a86:	bd10      	pop	{r4, pc}

080a1a88 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a8a:	460f      	mov	r7, r1
 80a1a8c:	f100 0608 	add.w	r6, r0, #8
 80a1a90:	1d05      	adds	r5, r0, #4
 80a1a92:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1a94:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1a98:	220a      	movs	r2, #10
 80a1a9a:	4638      	mov	r0, r7
 80a1a9c:	f7ff fc08 	bl	80a12b0 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1aa0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1aa2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1aa4:	d007      	beq.n	80a1ab6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1aa6:	2c00      	cmp	r4, #0
 80a1aa8:	d0f4      	beq.n	80a1a94 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1aaa:	212e      	movs	r1, #46	; 0x2e
 80a1aac:	4638      	mov	r0, r7
 80a1aae:	f7ff fbe6 	bl	80a127e <_ZN5Print5printEc>
 80a1ab2:	4404      	add	r4, r0
 80a1ab4:	e7ee      	b.n	80a1a94 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1ab6:	4620      	mov	r0, r4
 80a1ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1abc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1abc:	b510      	push	{r4, lr}
 80a1abe:	4604      	mov	r4, r0
 80a1ac0:	4b04      	ldr	r3, [pc, #16]	; (80a1ad4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1ac2:	2211      	movs	r2, #17
 80a1ac4:	f840 3b04 	str.w	r3, [r0], #4
 80a1ac8:	2100      	movs	r1, #0
 80a1aca:	f000 fd14 	bl	80a24f6 <memset>
{
    clear();
}
 80a1ace:	4620      	mov	r0, r4
 80a1ad0:	bd10      	pop	{r4, pc}
 80a1ad2:	bf00      	nop
 80a1ad4:	080a2a28 	.word	0x080a2a28

080a1ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1ad8:	4603      	mov	r3, r0
 80a1ada:	4a07      	ldr	r2, [pc, #28]	; (80a1af8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1adc:	b510      	push	{r4, lr}
 80a1ade:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1ae2:	f101 0210 	add.w	r2, r1, #16
 80a1ae6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1aea:	4291      	cmp	r1, r2
 80a1aec:	f843 4b04 	str.w	r4, [r3], #4
 80a1af0:	d1f9      	bne.n	80a1ae6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1af2:	780a      	ldrb	r2, [r1, #0]
 80a1af4:	701a      	strb	r2, [r3, #0]
}
 80a1af6:	bd10      	pop	{r4, pc}
 80a1af8:	080a2a28 	.word	0x080a2a28

080a1afc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1afc:	4a02      	ldr	r2, [pc, #8]	; (80a1b08 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1afe:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1b00:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1b02:	2204      	movs	r2, #4
 80a1b04:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1b06:	4770      	bx	lr
 80a1b08:	080a2a28 	.word	0x080a2a28

080a1b0c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1b0c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1b0e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1b12:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1b16:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1b1a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1b1e:	2304      	movs	r3, #4
 80a1b20:	6041      	str	r1, [r0, #4]
 80a1b22:	7503      	strb	r3, [r0, #20]
 80a1b24:	bd10      	pop	{r4, pc}
	...

080a1b28 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1b2a:	4d04      	ldr	r5, [pc, #16]	; (80a1b3c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1b2c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1b2e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1b32:	9500      	str	r5, [sp, #0]
 80a1b34:	f7ff ffea 	bl	80a1b0c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1b38:	b003      	add	sp, #12
 80a1b3a:	bd30      	pop	{r4, r5, pc}
 80a1b3c:	080a2a28 	.word	0x080a2a28

080a1b40 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1b40:	7441      	strb	r1, [r0, #17]
 80a1b42:	4770      	bx	lr

080a1b44 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1b44:	4770      	bx	lr

080a1b46 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1b46:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1b48:	2100      	movs	r1, #0
 80a1b4a:	7c00      	ldrb	r0, [r0, #16]
 80a1b4c:	f7fe fecc 	bl	80a08e8 <HAL_USB_USART_Receive_Data>
}
 80a1b50:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1b54:	bf28      	it	cs
 80a1b56:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1b5a:	bd08      	pop	{r3, pc}

080a1b5c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1b5c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1b5e:	2101      	movs	r1, #1
 80a1b60:	7c00      	ldrb	r0, [r0, #16]
 80a1b62:	f7fe fec1 	bl	80a08e8 <HAL_USB_USART_Receive_Data>
}
 80a1b66:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1b6a:	bf28      	it	cs
 80a1b6c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1b70:	bd08      	pop	{r3, pc}

080a1b72 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1b72:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1b74:	7c00      	ldrb	r0, [r0, #16]
 80a1b76:	f7fe feaf 	bl	80a08d8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1b7a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1b7e:	bd08      	pop	{r3, pc}

080a1b80 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1b80:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1b82:	7c00      	ldrb	r0, [r0, #16]
 80a1b84:	f7fe fea0 	bl	80a08c8 <HAL_USB_USART_Available_Data>
}
 80a1b88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1b8c:	bd08      	pop	{r3, pc}

080a1b8e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1b8e:	7c00      	ldrb	r0, [r0, #16]
 80a1b90:	f7fe beba 	b.w	80a0908 <HAL_USB_USART_Flush_Data>

080a1b94 <_ZN9USBSerialD0Ev>:
 80a1b94:	b510      	push	{r4, lr}
 80a1b96:	4604      	mov	r4, r0
 80a1b98:	2114      	movs	r1, #20
 80a1b9a:	f000 fb31 	bl	80a2200 <_ZdlPvj>
 80a1b9e:	4620      	mov	r0, r4
 80a1ba0:	bd10      	pop	{r4, pc}

080a1ba2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1ba2:	b538      	push	{r3, r4, r5, lr}
 80a1ba4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1ba6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1ba8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1baa:	f7fe fe95 	bl	80a08d8 <HAL_USB_USART_Available_Data_For_Write>
 80a1bae:	2800      	cmp	r0, #0
 80a1bb0:	dc01      	bgt.n	80a1bb6 <_ZN9USBSerial5writeEh+0x14>
 80a1bb2:	7c60      	ldrb	r0, [r4, #17]
 80a1bb4:	b128      	cbz	r0, 80a1bc2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1bb6:	4629      	mov	r1, r5
 80a1bb8:	7c20      	ldrb	r0, [r4, #16]
 80a1bba:	f7fe fe9d 	bl	80a08f8 <HAL_USB_USART_Send_Data>
 80a1bbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1bc2:	bd38      	pop	{r3, r4, r5, pc}

080a1bc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1bc4:	b510      	push	{r4, lr}
 80a1bc6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1bc8:	2300      	movs	r3, #0
 80a1bca:	6063      	str	r3, [r4, #4]
 80a1bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1bd0:	60a3      	str	r3, [r4, #8]
 80a1bd2:	4b05      	ldr	r3, [pc, #20]	; (80a1be8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1bd4:	4608      	mov	r0, r1
 80a1bd6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1bd8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1bda:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1bdc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1bde:	4611      	mov	r1, r2
 80a1be0:	f7fe fe62 	bl	80a08a8 <HAL_USB_USART_Init>
}
 80a1be4:	4620      	mov	r0, r4
 80a1be6:	bd10      	pop	{r4, pc}
 80a1be8:	080a2a3c 	.word	0x080a2a3c

080a1bec <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1bec:	2200      	movs	r2, #0
 80a1bee:	7c00      	ldrb	r0, [r0, #16]
 80a1bf0:	f7fe be62 	b.w	80a08b8 <HAL_USB_USART_Begin>

080a1bf4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1bf4:	b510      	push	{r4, lr}
 80a1bf6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1bf8:	2214      	movs	r2, #20
 80a1bfa:	2100      	movs	r1, #0
 80a1bfc:	f000 fc7b 	bl	80a24f6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1c00:	4b05      	ldr	r3, [pc, #20]	; (80a1c18 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1c02:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1c04:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1c06:	4b05      	ldr	r3, [pc, #20]	; (80a1c1c <_Z19acquireSerialBufferv+0x28>)
 80a1c08:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1c0a:	f240 1301 	movw	r3, #257	; 0x101
 80a1c0e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1c10:	2381      	movs	r3, #129	; 0x81
 80a1c12:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1c14:	bd10      	pop	{r4, pc}
 80a1c16:	bf00      	nop
 80a1c18:	200005d5 	.word	0x200005d5
 80a1c1c:	20000554 	.word	0x20000554

080a1c20 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1c20:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c22:	4d0e      	ldr	r5, [pc, #56]	; (80a1c5c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1c24:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1c26:	a801      	add	r0, sp, #4
 80a1c28:	f7ff ffe4 	bl	80a1bf4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1c2c:	6829      	ldr	r1, [r5, #0]
 80a1c2e:	f011 0401 	ands.w	r4, r1, #1
 80a1c32:	d110      	bne.n	80a1c56 <_Z16_fetch_usbserialv+0x36>
 80a1c34:	4628      	mov	r0, r5
 80a1c36:	f7fe fa34 	bl	80a00a2 <__cxa_guard_acquire>
 80a1c3a:	b160      	cbz	r0, 80a1c56 <_Z16_fetch_usbserialv+0x36>
 80a1c3c:	aa01      	add	r2, sp, #4
 80a1c3e:	4621      	mov	r1, r4
 80a1c40:	4807      	ldr	r0, [pc, #28]	; (80a1c60 <_Z16_fetch_usbserialv+0x40>)
 80a1c42:	f7ff ffbf 	bl	80a1bc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1c46:	4628      	mov	r0, r5
 80a1c48:	f7fe fa30 	bl	80a00ac <__cxa_guard_release>
 80a1c4c:	4a05      	ldr	r2, [pc, #20]	; (80a1c64 <_Z16_fetch_usbserialv+0x44>)
 80a1c4e:	4906      	ldr	r1, [pc, #24]	; (80a1c68 <_Z16_fetch_usbserialv+0x48>)
 80a1c50:	4803      	ldr	r0, [pc, #12]	; (80a1c60 <_Z16_fetch_usbserialv+0x40>)
 80a1c52:	f000 fac7 	bl	80a21e4 <__aeabi_atexit>
	return _usbserial;
}
 80a1c56:	4802      	ldr	r0, [pc, #8]	; (80a1c60 <_Z16_fetch_usbserialv+0x40>)
 80a1c58:	b007      	add	sp, #28
 80a1c5a:	bd30      	pop	{r4, r5, pc}
 80a1c5c:	20000550 	.word	0x20000550
 80a1c60:	200006d8 	.word	0x200006d8
 80a1c64:	2000008c 	.word	0x2000008c
 80a1c68:	080a1b45 	.word	0x080a1b45

080a1c6c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1c6c:	b510      	push	{r4, lr}
 80a1c6e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1c70:	2214      	movs	r2, #20
 80a1c72:	2100      	movs	r1, #0
 80a1c74:	f000 fc3f 	bl	80a24f6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1c78:	4b05      	ldr	r3, [pc, #20]	; (80a1c90 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1c7a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1c7c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1c7e:	4b05      	ldr	r3, [pc, #20]	; (80a1c94 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1c80:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1c82:	f240 1301 	movw	r3, #257	; 0x101
 80a1c86:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1c88:	2381      	movs	r3, #129	; 0x81
 80a1c8a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1c8c:	bd10      	pop	{r4, pc}
 80a1c8e:	bf00      	nop
 80a1c90:	20000788 	.word	0x20000788
 80a1c94:	200006f0 	.word	0x200006f0

080a1c98 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1c98:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1c9a:	4c0e      	ldr	r4, [pc, #56]	; (80a1cd4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1c9c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1c9e:	a801      	add	r0, sp, #4
 80a1ca0:	f7ff ffe4 	bl	80a1c6c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1ca4:	6823      	ldr	r3, [r4, #0]
 80a1ca6:	07db      	lsls	r3, r3, #31
 80a1ca8:	d410      	bmi.n	80a1ccc <_Z17_fetch_usbserial1v+0x34>
 80a1caa:	4620      	mov	r0, r4
 80a1cac:	f7fe f9f9 	bl	80a00a2 <__cxa_guard_acquire>
 80a1cb0:	b160      	cbz	r0, 80a1ccc <_Z17_fetch_usbserial1v+0x34>
 80a1cb2:	aa01      	add	r2, sp, #4
 80a1cb4:	2101      	movs	r1, #1
 80a1cb6:	4808      	ldr	r0, [pc, #32]	; (80a1cd8 <_Z17_fetch_usbserial1v+0x40>)
 80a1cb8:	f7ff ff84 	bl	80a1bc4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1cbc:	4620      	mov	r0, r4
 80a1cbe:	f7fe f9f5 	bl	80a00ac <__cxa_guard_release>
 80a1cc2:	4a06      	ldr	r2, [pc, #24]	; (80a1cdc <_Z17_fetch_usbserial1v+0x44>)
 80a1cc4:	4906      	ldr	r1, [pc, #24]	; (80a1ce0 <_Z17_fetch_usbserial1v+0x48>)
 80a1cc6:	4804      	ldr	r0, [pc, #16]	; (80a1cd8 <_Z17_fetch_usbserial1v+0x40>)
 80a1cc8:	f000 fa8c 	bl	80a21e4 <__aeabi_atexit>
  return _usbserial1;
}
 80a1ccc:	4802      	ldr	r0, [pc, #8]	; (80a1cd8 <_Z17_fetch_usbserial1v+0x40>)
 80a1cce:	b006      	add	sp, #24
 80a1cd0:	bd10      	pop	{r4, pc}
 80a1cd2:	bf00      	nop
 80a1cd4:	200006ec 	.word	0x200006ec
 80a1cd8:	20000774 	.word	0x20000774
 80a1cdc:	2000008c 	.word	0x2000008c
 80a1ce0:	080a1b45 	.word	0x080a1b45

080a1ce4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1ce4:	4770      	bx	lr

080a1ce6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1ce6:	7441      	strb	r1, [r0, #17]
 80a1ce8:	4770      	bx	lr

080a1cea <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1cea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1cec:	7c00      	ldrb	r0, [r0, #16]
 80a1cee:	f7fe fd59 	bl	80a07a4 <HAL_USART_Available_Data_For_Write>
}
 80a1cf2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1cf6:	bd08      	pop	{r3, pc}

080a1cf8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1cf8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1cfa:	7c00      	ldrb	r0, [r0, #16]
 80a1cfc:	f7fe fd2a 	bl	80a0754 <HAL_USART_Available_Data>
}
 80a1d00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d04:	bd08      	pop	{r3, pc}

080a1d06 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1d06:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1d08:	7c00      	ldrb	r0, [r0, #16]
 80a1d0a:	f7fe fd33 	bl	80a0774 <HAL_USART_Peek_Data>
}
 80a1d0e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1d12:	bf28      	it	cs
 80a1d14:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1d18:	bd08      	pop	{r3, pc}

080a1d1a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1d1a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1d1c:	7c00      	ldrb	r0, [r0, #16]
 80a1d1e:	f7fe fd21 	bl	80a0764 <HAL_USART_Read_Data>
}
 80a1d22:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1d26:	bf28      	it	cs
 80a1d28:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1d2c:	bd08      	pop	{r3, pc}

080a1d2e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1d2e:	7c00      	ldrb	r0, [r0, #16]
 80a1d30:	f7fe bd28 	b.w	80a0784 <HAL_USART_Flush_Data>

080a1d34 <_ZN11USARTSerialD0Ev>:
 80a1d34:	b510      	push	{r4, lr}
 80a1d36:	4604      	mov	r4, r0
 80a1d38:	2114      	movs	r1, #20
 80a1d3a:	f000 fa61 	bl	80a2200 <_ZdlPvj>
 80a1d3e:	4620      	mov	r0, r4
 80a1d40:	bd10      	pop	{r4, pc}

080a1d42 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1d42:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1d44:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1d46:	4604      	mov	r4, r0
 80a1d48:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1d4a:	b925      	cbnz	r5, 80a1d56 <_ZN11USARTSerial5writeEh+0x14>
 80a1d4c:	7c00      	ldrb	r0, [r0, #16]
 80a1d4e:	f7fe fd29 	bl	80a07a4 <HAL_USART_Available_Data_For_Write>
 80a1d52:	2800      	cmp	r0, #0
 80a1d54:	dd05      	ble.n	80a1d62 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1d56:	4631      	mov	r1, r6
 80a1d58:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1d5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1d5e:	f7fe bcf1 	b.w	80a0744 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1d62:	4628      	mov	r0, r5
 80a1d64:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1d68 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1d68:	b510      	push	{r4, lr}
 80a1d6a:	4604      	mov	r4, r0
 80a1d6c:	4608      	mov	r0, r1
 80a1d6e:	4611      	mov	r1, r2
 80a1d70:	2200      	movs	r2, #0
 80a1d72:	6062      	str	r2, [r4, #4]
 80a1d74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1d78:	60a2      	str	r2, [r4, #8]
 80a1d7a:	4a05      	ldr	r2, [pc, #20]	; (80a1d90 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1d7c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1d7e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1d80:	2201      	movs	r2, #1
 80a1d82:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1d84:	461a      	mov	r2, r3
 80a1d86:	f7fe fcd5 	bl	80a0734 <HAL_USART_Init>
}
 80a1d8a:	4620      	mov	r0, r4
 80a1d8c:	bd10      	pop	{r4, pc}
 80a1d8e:	bf00      	nop
 80a1d90:	080a2a6c 	.word	0x080a2a6c

080a1d94 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1d94:	7c00      	ldrb	r0, [r0, #16]
 80a1d96:	f7fe bcfd 	b.w	80a0794 <HAL_USART_Is_Enabled>
	...

080a1d9c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1d9c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1d9e:	4d0c      	ldr	r5, [pc, #48]	; (80a1dd0 <_Z22__fetch_global_Serial1v+0x34>)
 80a1da0:	6829      	ldr	r1, [r5, #0]
 80a1da2:	f011 0401 	ands.w	r4, r1, #1
 80a1da6:	d111      	bne.n	80a1dcc <_Z22__fetch_global_Serial1v+0x30>
 80a1da8:	4628      	mov	r0, r5
 80a1daa:	f7fe f97a 	bl	80a00a2 <__cxa_guard_acquire>
 80a1dae:	b168      	cbz	r0, 80a1dcc <_Z22__fetch_global_Serial1v+0x30>
 80a1db0:	4a08      	ldr	r2, [pc, #32]	; (80a1dd4 <_Z22__fetch_global_Serial1v+0x38>)
 80a1db2:	4621      	mov	r1, r4
 80a1db4:	4b08      	ldr	r3, [pc, #32]	; (80a1dd8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1db6:	4809      	ldr	r0, [pc, #36]	; (80a1ddc <_Z22__fetch_global_Serial1v+0x40>)
 80a1db8:	f7ff ffd6 	bl	80a1d68 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1dbc:	4628      	mov	r0, r5
 80a1dbe:	f7fe f975 	bl	80a00ac <__cxa_guard_release>
 80a1dc2:	4a07      	ldr	r2, [pc, #28]	; (80a1de0 <_Z22__fetch_global_Serial1v+0x44>)
 80a1dc4:	4907      	ldr	r1, [pc, #28]	; (80a1de4 <_Z22__fetch_global_Serial1v+0x48>)
 80a1dc6:	4805      	ldr	r0, [pc, #20]	; (80a1ddc <_Z22__fetch_global_Serial1v+0x40>)
 80a1dc8:	f000 fa0c 	bl	80a21e4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1dcc:	4803      	ldr	r0, [pc, #12]	; (80a1ddc <_Z22__fetch_global_Serial1v+0x40>)
 80a1dce:	bd38      	pop	{r3, r4, r5, pc}
 80a1dd0:	20000924 	.word	0x20000924
 80a1dd4:	20000928 	.word	0x20000928
 80a1dd8:	200008a0 	.word	0x200008a0
 80a1ddc:	2000088c 	.word	0x2000088c
 80a1de0:	2000008c 	.word	0x2000008c
 80a1de4:	080a1ce5 	.word	0x080a1ce5

080a1de8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1de8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1dea:	6883      	ldr	r3, [r0, #8]
 80a1dec:	4604      	mov	r4, r0
 80a1dee:	b90b      	cbnz	r3, 80a1df4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a1df0:	f000 fa19 	bl	80a2226 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1df4:	68c3      	ldr	r3, [r0, #12]
 80a1df6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a1df8:	68a3      	ldr	r3, [r4, #8]
 80a1dfa:	b11b      	cbz	r3, 80a1e04 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a1dfc:	2203      	movs	r2, #3
 80a1dfe:	4621      	mov	r1, r4
 80a1e00:	4620      	mov	r0, r4
 80a1e02:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1e04:	4620      	mov	r0, r4
}
 80a1e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a1e0a:	2110      	movs	r1, #16
 80a1e0c:	f000 b9f8 	b.w	80a2200 <_ZdlPvj>

080a1e10 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a1e10:	4770      	bx	lr

080a1e12 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1e14:	4606      	mov	r6, r0
 80a1e16:	4615      	mov	r5, r2
 80a1e18:	460c      	mov	r4, r1
 80a1e1a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1e1c:	42bc      	cmp	r4, r7
 80a1e1e:	d006      	beq.n	80a1e2e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1e20:	6833      	ldr	r3, [r6, #0]
 80a1e22:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1e26:	689b      	ldr	r3, [r3, #8]
 80a1e28:	4630      	mov	r0, r6
 80a1e2a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1e2c:	e7f6      	b.n	80a1e1c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1e2e:	4628      	mov	r0, r5
 80a1e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1e32 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1e32:	2200      	movs	r2, #0
 80a1e34:	7c00      	ldrb	r0, [r0, #16]
 80a1e36:	f7fe bcbd 	b.w	80a07b4 <HAL_I2C_Write_Data>

080a1e3a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1e3a:	2100      	movs	r1, #0
 80a1e3c:	7c00      	ldrb	r0, [r0, #16]
 80a1e3e:	f7fe bcc1 	b.w	80a07c4 <HAL_I2C_Available_Data>

080a1e42 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1e42:	2100      	movs	r1, #0
 80a1e44:	7c00      	ldrb	r0, [r0, #16]
 80a1e46:	f7fe bcc5 	b.w	80a07d4 <HAL_I2C_Read_Data>

080a1e4a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1e4a:	2100      	movs	r1, #0
 80a1e4c:	7c00      	ldrb	r0, [r0, #16]
 80a1e4e:	f7fe bcc9 	b.w	80a07e4 <HAL_I2C_Peek_Data>

080a1e52 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1e52:	2100      	movs	r1, #0
 80a1e54:	7c00      	ldrb	r0, [r0, #16]
 80a1e56:	f7fe bccd 	b.w	80a07f4 <HAL_I2C_Flush_Data>

080a1e5a <_ZN7TwoWireD0Ev>:
 80a1e5a:	b510      	push	{r4, lr}
 80a1e5c:	4604      	mov	r4, r0
 80a1e5e:	2114      	movs	r1, #20
 80a1e60:	f000 f9ce 	bl	80a2200 <_ZdlPvj>
 80a1e64:	4620      	mov	r0, r4
 80a1e66:	bd10      	pop	{r4, pc}

080a1e68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a1e68:	b510      	push	{r4, lr}
 80a1e6a:	4604      	mov	r4, r0
 80a1e6c:	2300      	movs	r3, #0
 80a1e6e:	6063      	str	r3, [r4, #4]
 80a1e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1e74:	60a3      	str	r3, [r4, #8]
 80a1e76:	4b04      	ldr	r3, [pc, #16]	; (80a1e88 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a1e78:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a1e7a:	4608      	mov	r0, r1
 80a1e7c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a1e7e:	4611      	mov	r1, r2
 80a1e80:	f7fe fcc8 	bl	80a0814 <HAL_I2C_Init>
}
 80a1e84:	4620      	mov	r0, r4
 80a1e86:	bd10      	pop	{r4, pc}
 80a1e88:	080a2a9c 	.word	0x080a2a9c

080a1e8c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1e8c:	2100      	movs	r1, #0
 80a1e8e:	7c00      	ldrb	r0, [r0, #16]
 80a1e90:	f7fe bcb8 	b.w	80a0804 <HAL_I2C_Is_Enabled>

080a1e94 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1e94:	2200      	movs	r2, #0
 80a1e96:	4611      	mov	r1, r2
 80a1e98:	6840      	ldr	r0, [r0, #4]
 80a1e9a:	f7fe bda1 	b.w	80a09e0 <network_ready>

080a1e9e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1ea0:	4616      	mov	r6, r2
 80a1ea2:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1ea4:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1ea6:	460f      	mov	r7, r1
 80a1ea8:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a1eaa:	2100      	movs	r1, #0
 80a1eac:	a803      	add	r0, sp, #12
 80a1eae:	f000 fb22 	bl	80a24f6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1eb2:	4630      	mov	r0, r6
 80a1eb4:	f000 fb7d 	bl	80a25b2 <strlen>
 80a1eb8:	2500      	movs	r5, #0
 80a1eba:	9500      	str	r5, [sp, #0]
 80a1ebc:	b281      	uxth	r1, r0
 80a1ebe:	687b      	ldr	r3, [r7, #4]
 80a1ec0:	aa03      	add	r2, sp, #12
 80a1ec2:	4630      	mov	r0, r6
 80a1ec4:	f7fe fd30 	bl	80a0928 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1ec8:	b120      	cbz	r0, 80a1ed4 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a1eca:	4629      	mov	r1, r5
 80a1ecc:	4620      	mov	r0, r4
 80a1ece:	f7ff fe15 	bl	80a1afc <_ZN9IPAddressC1Em>
 80a1ed2:	e003      	b.n	80a1edc <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1ed4:	a903      	add	r1, sp, #12
 80a1ed6:	4620      	mov	r0, r4
 80a1ed8:	f7ff fdfe 	bl	80a1ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a1edc:	4620      	mov	r0, r4
 80a1ede:	b009      	add	sp, #36	; 0x24
 80a1ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1ee2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1ee2:	2200      	movs	r2, #0
 80a1ee4:	4611      	mov	r1, r2
 80a1ee6:	6840      	ldr	r0, [r0, #4]
 80a1ee8:	f7fe bd9a 	b.w	80a0a20 <network_listening>

080a1eec <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a1eec:	2200      	movs	r2, #0
 80a1eee:	4611      	mov	r1, r2
 80a1ef0:	6840      	ldr	r0, [r0, #4]
 80a1ef2:	f7fe bda5 	b.w	80a0a40 <network_get_listen_timeout>

080a1ef6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1ef6:	2200      	movs	r2, #0
 80a1ef8:	6840      	ldr	r0, [r0, #4]
 80a1efa:	f7fe bd99 	b.w	80a0a30 <network_set_listen_timeout>

080a1efe <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a1efe:	2200      	movs	r2, #0
 80a1f00:	f081 0101 	eor.w	r1, r1, #1
 80a1f04:	6840      	ldr	r0, [r0, #4]
 80a1f06:	f7fe bd83 	b.w	80a0a10 <network_listen>

080a1f0a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a1f0a:	2300      	movs	r3, #0
 80a1f0c:	461a      	mov	r2, r3
 80a1f0e:	4619      	mov	r1, r3
 80a1f10:	6840      	ldr	r0, [r0, #4]
 80a1f12:	f7fe bd75 	b.w	80a0a00 <network_off>

080a1f16 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a1f16:	2200      	movs	r2, #0
 80a1f18:	4611      	mov	r1, r2
 80a1f1a:	6840      	ldr	r0, [r0, #4]
 80a1f1c:	f7fe bd50 	b.w	80a09c0 <network_connecting>

080a1f20 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a1f20:	2200      	movs	r2, #0
 80a1f22:	2102      	movs	r1, #2
 80a1f24:	6840      	ldr	r0, [r0, #4]
 80a1f26:	f7fe bd53 	b.w	80a09d0 <network_disconnect>

080a1f2a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a1f2a:	2300      	movs	r3, #0
 80a1f2c:	461a      	mov	r2, r3
 80a1f2e:	6840      	ldr	r0, [r0, #4]
 80a1f30:	f7fe bd3e 	b.w	80a09b0 <network_connect>

080a1f34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a1f34:	4b02      	ldr	r3, [pc, #8]	; (80a1f40 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a1f36:	2204      	movs	r2, #4
 80a1f38:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a1f3a:	4a02      	ldr	r2, [pc, #8]	; (80a1f44 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1f3c:	601a      	str	r2, [r3, #0]
 80a1f3e:	4770      	bx	lr
 80a1f40:	200009ac 	.word	0x200009ac
 80a1f44:	080a2ac4 	.word	0x080a2ac4

080a1f48 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a1f48:	2300      	movs	r3, #0
 80a1f4a:	461a      	mov	r2, r3
 80a1f4c:	6840      	ldr	r0, [r0, #4]
 80a1f4e:	f7fe bd2f 	b.w	80a09b0 <network_connect>

080a1f52 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a1f52:	2200      	movs	r2, #0
 80a1f54:	2102      	movs	r1, #2
 80a1f56:	6840      	ldr	r0, [r0, #4]
 80a1f58:	f7fe bd3a 	b.w	80a09d0 <network_disconnect>

080a1f5c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a1f5c:	2200      	movs	r2, #0
 80a1f5e:	4611      	mov	r1, r2
 80a1f60:	6840      	ldr	r0, [r0, #4]
 80a1f62:	f7fe bd2d 	b.w	80a09c0 <network_connecting>

080a1f66 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a1f66:	2200      	movs	r2, #0
 80a1f68:	4611      	mov	r1, r2
 80a1f6a:	6840      	ldr	r0, [r0, #4]
 80a1f6c:	f7fe bd38 	b.w	80a09e0 <network_ready>

080a1f70 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a1f70:	2300      	movs	r3, #0
 80a1f72:	461a      	mov	r2, r3
 80a1f74:	4619      	mov	r1, r3
 80a1f76:	6840      	ldr	r0, [r0, #4]
 80a1f78:	f7fe bd3a 	b.w	80a09f0 <network_on>

080a1f7c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a1f7c:	2300      	movs	r3, #0
 80a1f7e:	461a      	mov	r2, r3
 80a1f80:	4619      	mov	r1, r3
 80a1f82:	6840      	ldr	r0, [r0, #4]
 80a1f84:	f7fe bd3c 	b.w	80a0a00 <network_off>

080a1f88 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a1f88:	2200      	movs	r2, #0
 80a1f8a:	f081 0101 	eor.w	r1, r1, #1
 80a1f8e:	6840      	ldr	r0, [r0, #4]
 80a1f90:	f7fe bd3e 	b.w	80a0a10 <network_listen>

080a1f94 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a1f94:	2200      	movs	r2, #0
 80a1f96:	6840      	ldr	r0, [r0, #4]
 80a1f98:	f7fe bd4a 	b.w	80a0a30 <network_set_listen_timeout>

080a1f9c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a1f9c:	2200      	movs	r2, #0
 80a1f9e:	4611      	mov	r1, r2
 80a1fa0:	6840      	ldr	r0, [r0, #4]
 80a1fa2:	f7fe bd4d 	b.w	80a0a40 <network_get_listen_timeout>

080a1fa6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a1fa6:	2200      	movs	r2, #0
 80a1fa8:	4611      	mov	r1, r2
 80a1faa:	6840      	ldr	r0, [r0, #4]
 80a1fac:	f7fe bd38 	b.w	80a0a20 <network_listening>

080a1fb0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a1fb0:	b570      	push	{r4, r5, r6, lr}
 80a1fb2:	4616      	mov	r6, r2
 80a1fb4:	b08e      	sub	sp, #56	; 0x38
 80a1fb6:	4604      	mov	r4, r0
    IPAddress addr;
 80a1fb8:	a808      	add	r0, sp, #32
 80a1fba:	f7ff fd7f 	bl	80a1abc <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a1fbe:	2211      	movs	r2, #17
 80a1fc0:	2100      	movs	r1, #0
 80a1fc2:	a803      	add	r0, sp, #12
 80a1fc4:	f000 fa97 	bl	80a24f6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1fc8:	4630      	mov	r0, r6
 80a1fca:	f000 faf2 	bl	80a25b2 <strlen>
 80a1fce:	2500      	movs	r5, #0
 80a1fd0:	4b0a      	ldr	r3, [pc, #40]	; (80a1ffc <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a1fd2:	9500      	str	r5, [sp, #0]
 80a1fd4:	b281      	uxth	r1, r0
 80a1fd6:	685b      	ldr	r3, [r3, #4]
 80a1fd8:	aa03      	add	r2, sp, #12
 80a1fda:	4630      	mov	r0, r6
 80a1fdc:	f7fe fca4 	bl	80a0928 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1fe0:	b120      	cbz	r0, 80a1fec <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a1fe2:	4629      	mov	r1, r5
 80a1fe4:	4620      	mov	r0, r4
 80a1fe6:	f7ff fd89 	bl	80a1afc <_ZN9IPAddressC1Em>
 80a1fea:	e003      	b.n	80a1ff4 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a1fec:	a903      	add	r1, sp, #12
 80a1fee:	4620      	mov	r0, r4
 80a1ff0:	f7ff fd72 	bl	80a1ad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a1ff4:	4620      	mov	r0, r4
 80a1ff6:	b00e      	add	sp, #56	; 0x38
 80a1ff8:	bd70      	pop	{r4, r5, r6, pc}
 80a1ffa:	bf00      	nop
 80a1ffc:	200009ac 	.word	0x200009ac

080a2000 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a2000:	4b03      	ldr	r3, [pc, #12]	; (80a2010 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a2002:	4a04      	ldr	r2, [pc, #16]	; (80a2014 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a2004:	2804      	cmp	r0, #4
 80a2006:	bf0c      	ite	eq
 80a2008:	4610      	moveq	r0, r2
 80a200a:	4618      	movne	r0, r3
 80a200c:	4770      	bx	lr
 80a200e:	bf00      	nop
 80a2010:	200009b4 	.word	0x200009b4
 80a2014:	200009ac 	.word	0x200009ac

080a2018 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2018:	4b02      	ldr	r3, [pc, #8]	; (80a2024 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a201a:	4a03      	ldr	r2, [pc, #12]	; (80a2028 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a201c:	601a      	str	r2, [r3, #0]
 80a201e:	2200      	movs	r2, #0
 80a2020:	605a      	str	r2, [r3, #4]
 80a2022:	4770      	bx	lr
 80a2024:	200009b4 	.word	0x200009b4
 80a2028:	080a2af8 	.word	0x080a2af8

080a202c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a202c:	b510      	push	{r4, lr}
 80a202e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2030:	f000 f860 	bl	80a20f4 <_ZN8particle7globals11instanceSpiEv>
 80a2034:	f7fe fd86 	bl	80a0b44 <_ZN8SPIClass9isEnabledEv>
 80a2038:	b128      	cbz	r0, 80a2046 <pinAvailable+0x1a>
 80a203a:	f1a4 030d 	sub.w	r3, r4, #13
 80a203e:	2b02      	cmp	r3, #2
 80a2040:	d801      	bhi.n	80a2046 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
 80a2042:	2000      	movs	r0, #0
 80a2044:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2046:	f000 f8a7 	bl	80a2198 <_Z19__fetch_global_Wirev>
 80a204a:	f7ff ff1f 	bl	80a1e8c <_ZN7TwoWire9isEnabledEv>
 80a204e:	b108      	cbz	r0, 80a2054 <pinAvailable+0x28>
 80a2050:	2c01      	cmp	r4, #1
 80a2052:	d9f6      	bls.n	80a2042 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2054:	f7ff fea2 	bl	80a1d9c <_Z22__fetch_global_Serial1v>
 80a2058:	f7ff fe9c 	bl	80a1d94 <_ZN11USARTSerial9isEnabledEv>
 80a205c:	b118      	cbz	r0, 80a2066 <pinAvailable+0x3a>
 80a205e:	f1a4 0312 	sub.w	r3, r4, #18
 80a2062:	2b01      	cmp	r3, #1
 80a2064:	d9ed      	bls.n	80a2042 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2066:	2c17      	cmp	r4, #23
 80a2068:	bf8c      	ite	hi
 80a206a:	2000      	movhi	r0, #0
 80a206c:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a206e:	bd10      	pop	{r4, pc}

080a2070 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2070:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2072:	b538      	push	{r3, r4, r5, lr}
 80a2074:	4604      	mov	r4, r0
 80a2076:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2078:	d80a      	bhi.n	80a2090 <pinMode+0x20>
 80a207a:	29ff      	cmp	r1, #255	; 0xff
 80a207c:	d008      	beq.n	80a2090 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a207e:	f7ff ffd5 	bl	80a202c <pinAvailable>
 80a2082:	b128      	cbz	r0, 80a2090 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2084:	4629      	mov	r1, r5
 80a2086:	4620      	mov	r0, r4
}
 80a2088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a208c:	f7fe bb02 	b.w	80a0694 <HAL_Pin_Mode>
 80a2090:	bd38      	pop	{r3, r4, r5, pc}

080a2092 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2092:	b538      	push	{r3, r4, r5, lr}
 80a2094:	4604      	mov	r4, r0
 80a2096:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2098:	f7fe fb04 	bl	80a06a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a209c:	28ff      	cmp	r0, #255	; 0xff
 80a209e:	d010      	beq.n	80a20c2 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a20a0:	2806      	cmp	r0, #6
 80a20a2:	d804      	bhi.n	80a20ae <digitalWrite+0x1c>
 80a20a4:	234d      	movs	r3, #77	; 0x4d
 80a20a6:	fa23 f000 	lsr.w	r0, r3, r0
 80a20aa:	07c3      	lsls	r3, r0, #31
 80a20ac:	d409      	bmi.n	80a20c2 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a20ae:	4620      	mov	r0, r4
 80a20b0:	f7ff ffbc 	bl	80a202c <pinAvailable>
 80a20b4:	b128      	cbz	r0, 80a20c2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a20b6:	4629      	mov	r1, r5
 80a20b8:	4620      	mov	r0, r4
}
 80a20ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a20be:	f7fe baf9 	b.w	80a06b4 <HAL_GPIO_Write>
 80a20c2:	bd38      	pop	{r3, r4, r5, pc}

080a20c4 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a20c4:	b510      	push	{r4, lr}
 80a20c6:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a20c8:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a20ca:	bf9c      	itt	ls
 80a20cc:	340a      	addls	r4, #10
 80a20ce:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a20d0:	4620      	mov	r0, r4
 80a20d2:	f7ff ffab 	bl	80a202c <pinAvailable>
 80a20d6:	b150      	cbz	r0, 80a20ee <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a20d8:	2103      	movs	r1, #3
 80a20da:	4620      	mov	r0, r4
 80a20dc:	f7fe fad2 	bl	80a0684 <HAL_Validate_Pin_Function>
 80a20e0:	2803      	cmp	r0, #3
 80a20e2:	d104      	bne.n	80a20ee <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a20e4:	4620      	mov	r0, r4
}
 80a20e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a20ea:	f7fe baeb 	b.w	80a06c4 <HAL_ADC_Read>
}
 80a20ee:	2000      	movs	r0, #0
 80a20f0:	bd10      	pop	{r4, pc}
	...

080a20f4 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
 80a20f4:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
 80a20f6:	4d0b      	ldr	r5, [pc, #44]	; (80a2124 <_ZN8particle7globals11instanceSpiEv+0x30>)
 80a20f8:	6829      	ldr	r1, [r5, #0]
 80a20fa:	f011 0401 	ands.w	r4, r1, #1
 80a20fe:	d10f      	bne.n	80a2120 <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a2100:	4628      	mov	r0, r5
 80a2102:	f7fd ffce 	bl	80a00a2 <__cxa_guard_acquire>
 80a2106:	b158      	cbz	r0, 80a2120 <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a2108:	4621      	mov	r1, r4
 80a210a:	4807      	ldr	r0, [pc, #28]	; (80a2128 <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a210c:	f7fe fd06 	bl	80a0b1c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2110:	4628      	mov	r0, r5
 80a2112:	f7fd ffcb 	bl	80a00ac <__cxa_guard_release>
 80a2116:	4a05      	ldr	r2, [pc, #20]	; (80a212c <_ZN8particle7globals11instanceSpiEv+0x38>)
 80a2118:	4905      	ldr	r1, [pc, #20]	; (80a2130 <_ZN8particle7globals11instanceSpiEv+0x3c>)
 80a211a:	4803      	ldr	r0, [pc, #12]	; (80a2128 <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a211c:	f000 f862 	bl	80a21e4 <__aeabi_atexit>
    return instance;
}
 80a2120:	4801      	ldr	r0, [pc, #4]	; (80a2128 <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a2122:	bd38      	pop	{r3, r4, r5, pc}
 80a2124:	200009cc 	.word	0x200009cc
 80a2128:	200009bc 	.word	0x200009bc
 80a212c:	2000008c 	.word	0x2000008c
 80a2130:	080a0af1 	.word	0x080a0af1

080a2134 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2134:	b513      	push	{r0, r1, r4, lr}
 80a2136:	4c08      	ldr	r4, [pc, #32]	; (80a2158 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2138:	2300      	movs	r3, #0
 80a213a:	461a      	mov	r2, r3
 80a213c:	4619      	mov	r1, r3
 80a213e:	9300      	str	r3, [sp, #0]
 80a2140:	4620      	mov	r0, r4
 80a2142:	f7ff fcf1 	bl	80a1b28 <_ZN9IPAddressC1Ehhhh>
 80a2146:	4620      	mov	r0, r4
 80a2148:	4a04      	ldr	r2, [pc, #16]	; (80a215c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a214a:	4905      	ldr	r1, [pc, #20]	; (80a2160 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a214c:	b002      	add	sp, #8
 80a214e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2152:	f000 b847 	b.w	80a21e4 <__aeabi_atexit>
 80a2156:	bf00      	nop
 80a2158:	200009d4 	.word	0x200009d4
 80a215c:	2000008c 	.word	0x2000008c
 80a2160:	080a1a79 	.word	0x080a1a79

080a2164 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a2164:	b570      	push	{r4, r5, r6, lr}
 80a2166:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2168:	2514      	movs	r5, #20
 80a216a:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a216c:	4e09      	ldr	r6, [pc, #36]	; (80a2194 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a216e:	2100      	movs	r1, #0
 80a2170:	f000 f9c1 	bl	80a24f6 <memset>
 80a2174:	8025      	strh	r5, [r4, #0]
 80a2176:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2178:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a217a:	60a5      	str	r5, [r4, #8]
 80a217c:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a217e:	4628      	mov	r0, r5
 80a2180:	f000 f840 	bl	80a2204 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2184:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2186:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2188:	4628      	mov	r0, r5
 80a218a:	f000 f83b 	bl	80a2204 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a218e:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a2190:	4620      	mov	r0, r4
 80a2192:	bd70      	pop	{r4, r5, r6, pc}
 80a2194:	080a2b24 	.word	0x080a2b24

080a2198 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2198:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a219a:	4d0e      	ldr	r5, [pc, #56]	; (80a21d4 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a219c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a219e:	6829      	ldr	r1, [r5, #0]
 80a21a0:	f011 0401 	ands.w	r4, r1, #1
 80a21a4:	d113      	bne.n	80a21ce <_Z19__fetch_global_Wirev+0x36>
 80a21a6:	4628      	mov	r0, r5
 80a21a8:	f7fd ff7b 	bl	80a00a2 <__cxa_guard_acquire>
 80a21ac:	b178      	cbz	r0, 80a21ce <_Z19__fetch_global_Wirev+0x36>
 80a21ae:	a801      	add	r0, sp, #4
 80a21b0:	f7ff ffd8 	bl	80a2164 <_Z17acquireWireBufferv>
 80a21b4:	aa01      	add	r2, sp, #4
 80a21b6:	4621      	mov	r1, r4
 80a21b8:	4807      	ldr	r0, [pc, #28]	; (80a21d8 <_Z19__fetch_global_Wirev+0x40>)
 80a21ba:	f7ff fe55 	bl	80a1e68 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a21be:	4628      	mov	r0, r5
 80a21c0:	f7fd ff74 	bl	80a00ac <__cxa_guard_release>
 80a21c4:	4a05      	ldr	r2, [pc, #20]	; (80a21dc <_Z19__fetch_global_Wirev+0x44>)
 80a21c6:	4906      	ldr	r1, [pc, #24]	; (80a21e0 <_Z19__fetch_global_Wirev+0x48>)
 80a21c8:	4803      	ldr	r0, [pc, #12]	; (80a21d8 <_Z19__fetch_global_Wirev+0x40>)
 80a21ca:	f000 f80b 	bl	80a21e4 <__aeabi_atexit>
	return wire;
}
 80a21ce:	4802      	ldr	r0, [pc, #8]	; (80a21d8 <_Z19__fetch_global_Wirev+0x40>)
 80a21d0:	b007      	add	sp, #28
 80a21d2:	bd30      	pop	{r4, r5, pc}
 80a21d4:	200009ec 	.word	0x200009ec
 80a21d8:	200009f0 	.word	0x200009f0
 80a21dc:	2000008c 	.word	0x2000008c
 80a21e0:	080a1e11 	.word	0x080a1e11

080a21e4 <__aeabi_atexit>:
 80a21e4:	460b      	mov	r3, r1
 80a21e6:	4601      	mov	r1, r0
 80a21e8:	4618      	mov	r0, r3
 80a21ea:	f000 b96b 	b.w	80a24c4 <__cxa_atexit>
	...

080a21f0 <_ZSt15get_new_handlerv>:
 80a21f0:	4b02      	ldr	r3, [pc, #8]	; (80a21fc <_ZSt15get_new_handlerv+0xc>)
 80a21f2:	6818      	ldr	r0, [r3, #0]
 80a21f4:	f3bf 8f5f 	dmb	sy
 80a21f8:	4770      	bx	lr
 80a21fa:	bf00      	nop
 80a21fc:	20000a04 	.word	0x20000a04

080a2200 <_ZdlPvj>:
 80a2200:	f7fd bf4d 	b.w	80a009e <_ZdlPv>

080a2204 <_ZnajRKSt9nothrow_t>:
 80a2204:	f000 b800 	b.w	80a2208 <_ZnwjRKSt9nothrow_t>

080a2208 <_ZnwjRKSt9nothrow_t>:
 80a2208:	b510      	push	{r4, lr}
 80a220a:	2800      	cmp	r0, #0
 80a220c:	bf14      	ite	ne
 80a220e:	4604      	movne	r4, r0
 80a2210:	2401      	moveq	r4, #1
 80a2212:	4620      	mov	r0, r4
 80a2214:	f7fe fc3c 	bl	80a0a90 <malloc>
 80a2218:	b920      	cbnz	r0, 80a2224 <_ZnwjRKSt9nothrow_t+0x1c>
 80a221a:	f7ff ffe9 	bl	80a21f0 <_ZSt15get_new_handlerv>
 80a221e:	b108      	cbz	r0, 80a2224 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2220:	4780      	blx	r0
 80a2222:	e7f6      	b.n	80a2212 <_ZnwjRKSt9nothrow_t+0xa>
 80a2224:	bd10      	pop	{r4, pc}

080a2226 <_ZSt25__throw_bad_function_callv>:
 80a2226:	b508      	push	{r3, lr}
 80a2228:	f7fe fc52 	bl	80a0ad0 <abort>

080a222c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a222c:	4b18      	ldr	r3, [pc, #96]	; (80a2290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a222e:	681a      	ldr	r2, [r3, #0]
 80a2230:	07d1      	lsls	r1, r2, #31
 80a2232:	bf5c      	itt	pl
 80a2234:	2201      	movpl	r2, #1
 80a2236:	601a      	strpl	r2, [r3, #0]
 80a2238:	4b16      	ldr	r3, [pc, #88]	; (80a2294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a223a:	681a      	ldr	r2, [r3, #0]
 80a223c:	07d2      	lsls	r2, r2, #31
 80a223e:	bf5c      	itt	pl
 80a2240:	2201      	movpl	r2, #1
 80a2242:	601a      	strpl	r2, [r3, #0]
 80a2244:	4b14      	ldr	r3, [pc, #80]	; (80a2298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2246:	681a      	ldr	r2, [r3, #0]
 80a2248:	07d0      	lsls	r0, r2, #31
 80a224a:	bf5c      	itt	pl
 80a224c:	2201      	movpl	r2, #1
 80a224e:	601a      	strpl	r2, [r3, #0]
 80a2250:	4b12      	ldr	r3, [pc, #72]	; (80a229c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2252:	681a      	ldr	r2, [r3, #0]
 80a2254:	07d1      	lsls	r1, r2, #31
 80a2256:	bf5c      	itt	pl
 80a2258:	2201      	movpl	r2, #1
 80a225a:	601a      	strpl	r2, [r3, #0]
 80a225c:	4b10      	ldr	r3, [pc, #64]	; (80a22a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a225e:	681a      	ldr	r2, [r3, #0]
 80a2260:	07d2      	lsls	r2, r2, #31
 80a2262:	bf5c      	itt	pl
 80a2264:	2201      	movpl	r2, #1
 80a2266:	601a      	strpl	r2, [r3, #0]
 80a2268:	4b0e      	ldr	r3, [pc, #56]	; (80a22a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a226a:	681a      	ldr	r2, [r3, #0]
 80a226c:	07d0      	lsls	r0, r2, #31
 80a226e:	bf5c      	itt	pl
 80a2270:	2201      	movpl	r2, #1
 80a2272:	601a      	strpl	r2, [r3, #0]
 80a2274:	4b0c      	ldr	r3, [pc, #48]	; (80a22a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2276:	681a      	ldr	r2, [r3, #0]
 80a2278:	07d1      	lsls	r1, r2, #31
 80a227a:	bf5c      	itt	pl
 80a227c:	2201      	movpl	r2, #1
 80a227e:	601a      	strpl	r2, [r3, #0]
 80a2280:	4b0a      	ldr	r3, [pc, #40]	; (80a22ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2282:	681a      	ldr	r2, [r3, #0]
 80a2284:	07d2      	lsls	r2, r2, #31
 80a2286:	bf5c      	itt	pl
 80a2288:	2201      	movpl	r2, #1
 80a228a:	601a      	strpl	r2, [r3, #0]
 80a228c:	4770      	bx	lr
 80a228e:	bf00      	nop
 80a2290:	20000a24 	.word	0x20000a24
 80a2294:	20000a20 	.word	0x20000a20
 80a2298:	20000a1c 	.word	0x20000a1c
 80a229c:	20000a18 	.word	0x20000a18
 80a22a0:	20000a14 	.word	0x20000a14
 80a22a4:	20000a10 	.word	0x20000a10
 80a22a8:	20000a0c 	.word	0x20000a0c
 80a22ac:	20000a08 	.word	0x20000a08

080a22b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a22b0:	4b24      	ldr	r3, [pc, #144]	; (80a2344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a22b2:	681a      	ldr	r2, [r3, #0]
 80a22b4:	07d0      	lsls	r0, r2, #31
 80a22b6:	bf5c      	itt	pl
 80a22b8:	2201      	movpl	r2, #1
 80a22ba:	601a      	strpl	r2, [r3, #0]
 80a22bc:	4b22      	ldr	r3, [pc, #136]	; (80a2348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a22be:	681a      	ldr	r2, [r3, #0]
 80a22c0:	07d1      	lsls	r1, r2, #31
 80a22c2:	bf5c      	itt	pl
 80a22c4:	2201      	movpl	r2, #1
 80a22c6:	601a      	strpl	r2, [r3, #0]
 80a22c8:	4b20      	ldr	r3, [pc, #128]	; (80a234c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a22ca:	681a      	ldr	r2, [r3, #0]
 80a22cc:	07d2      	lsls	r2, r2, #31
 80a22ce:	bf5c      	itt	pl
 80a22d0:	2201      	movpl	r2, #1
 80a22d2:	601a      	strpl	r2, [r3, #0]
 80a22d4:	4b1e      	ldr	r3, [pc, #120]	; (80a2350 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a22d6:	681a      	ldr	r2, [r3, #0]
 80a22d8:	07d0      	lsls	r0, r2, #31
 80a22da:	bf5c      	itt	pl
 80a22dc:	2201      	movpl	r2, #1
 80a22de:	601a      	strpl	r2, [r3, #0]
 80a22e0:	4b1c      	ldr	r3, [pc, #112]	; (80a2354 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a22e2:	681a      	ldr	r2, [r3, #0]
 80a22e4:	07d1      	lsls	r1, r2, #31
 80a22e6:	bf5c      	itt	pl
 80a22e8:	2201      	movpl	r2, #1
 80a22ea:	601a      	strpl	r2, [r3, #0]
 80a22ec:	4b1a      	ldr	r3, [pc, #104]	; (80a2358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a22ee:	681a      	ldr	r2, [r3, #0]
 80a22f0:	07d2      	lsls	r2, r2, #31
 80a22f2:	bf5c      	itt	pl
 80a22f4:	2201      	movpl	r2, #1
 80a22f6:	601a      	strpl	r2, [r3, #0]
 80a22f8:	4b18      	ldr	r3, [pc, #96]	; (80a235c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a22fa:	681a      	ldr	r2, [r3, #0]
 80a22fc:	07d0      	lsls	r0, r2, #31
 80a22fe:	bf5c      	itt	pl
 80a2300:	2201      	movpl	r2, #1
 80a2302:	601a      	strpl	r2, [r3, #0]
 80a2304:	4b16      	ldr	r3, [pc, #88]	; (80a2360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2306:	681a      	ldr	r2, [r3, #0]
 80a2308:	07d1      	lsls	r1, r2, #31
 80a230a:	bf5c      	itt	pl
 80a230c:	2201      	movpl	r2, #1
 80a230e:	601a      	strpl	r2, [r3, #0]
 80a2310:	4b14      	ldr	r3, [pc, #80]	; (80a2364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2312:	681a      	ldr	r2, [r3, #0]
 80a2314:	07d2      	lsls	r2, r2, #31
 80a2316:	bf5c      	itt	pl
 80a2318:	2201      	movpl	r2, #1
 80a231a:	601a      	strpl	r2, [r3, #0]
 80a231c:	4b12      	ldr	r3, [pc, #72]	; (80a2368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a231e:	681a      	ldr	r2, [r3, #0]
 80a2320:	07d0      	lsls	r0, r2, #31
 80a2322:	bf5c      	itt	pl
 80a2324:	2201      	movpl	r2, #1
 80a2326:	601a      	strpl	r2, [r3, #0]
 80a2328:	4b10      	ldr	r3, [pc, #64]	; (80a236c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a232a:	681a      	ldr	r2, [r3, #0]
 80a232c:	07d1      	lsls	r1, r2, #31
 80a232e:	bf5c      	itt	pl
 80a2330:	2201      	movpl	r2, #1
 80a2332:	601a      	strpl	r2, [r3, #0]
 80a2334:	4b0e      	ldr	r3, [pc, #56]	; (80a2370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2336:	681a      	ldr	r2, [r3, #0]
 80a2338:	07d2      	lsls	r2, r2, #31
 80a233a:	bf5c      	itt	pl
 80a233c:	2201      	movpl	r2, #1
 80a233e:	601a      	strpl	r2, [r3, #0]
 80a2340:	4770      	bx	lr
 80a2342:	bf00      	nop
 80a2344:	20000a54 	.word	0x20000a54
 80a2348:	20000a50 	.word	0x20000a50
 80a234c:	20000a4c 	.word	0x20000a4c
 80a2350:	20000a48 	.word	0x20000a48
 80a2354:	20000a44 	.word	0x20000a44
 80a2358:	20000a40 	.word	0x20000a40
 80a235c:	20000a3c 	.word	0x20000a3c
 80a2360:	20000a38 	.word	0x20000a38
 80a2364:	20000a34 	.word	0x20000a34
 80a2368:	20000a30 	.word	0x20000a30
 80a236c:	20000a2c 	.word	0x20000a2c
 80a2370:	20000a28 	.word	0x20000a28

080a2374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2374:	4b24      	ldr	r3, [pc, #144]	; (80a2408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2376:	681a      	ldr	r2, [r3, #0]
 80a2378:	07d0      	lsls	r0, r2, #31
 80a237a:	bf5c      	itt	pl
 80a237c:	2201      	movpl	r2, #1
 80a237e:	601a      	strpl	r2, [r3, #0]
 80a2380:	4b22      	ldr	r3, [pc, #136]	; (80a240c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2382:	681a      	ldr	r2, [r3, #0]
 80a2384:	07d1      	lsls	r1, r2, #31
 80a2386:	bf5c      	itt	pl
 80a2388:	2201      	movpl	r2, #1
 80a238a:	601a      	strpl	r2, [r3, #0]
 80a238c:	4b20      	ldr	r3, [pc, #128]	; (80a2410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a238e:	681a      	ldr	r2, [r3, #0]
 80a2390:	07d2      	lsls	r2, r2, #31
 80a2392:	bf5c      	itt	pl
 80a2394:	2201      	movpl	r2, #1
 80a2396:	601a      	strpl	r2, [r3, #0]
 80a2398:	4b1e      	ldr	r3, [pc, #120]	; (80a2414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a239a:	681a      	ldr	r2, [r3, #0]
 80a239c:	07d0      	lsls	r0, r2, #31
 80a239e:	bf5c      	itt	pl
 80a23a0:	2201      	movpl	r2, #1
 80a23a2:	601a      	strpl	r2, [r3, #0]
 80a23a4:	4b1c      	ldr	r3, [pc, #112]	; (80a2418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a23a6:	681a      	ldr	r2, [r3, #0]
 80a23a8:	07d1      	lsls	r1, r2, #31
 80a23aa:	bf5c      	itt	pl
 80a23ac:	2201      	movpl	r2, #1
 80a23ae:	601a      	strpl	r2, [r3, #0]
 80a23b0:	4b1a      	ldr	r3, [pc, #104]	; (80a241c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a23b2:	681a      	ldr	r2, [r3, #0]
 80a23b4:	07d2      	lsls	r2, r2, #31
 80a23b6:	bf5c      	itt	pl
 80a23b8:	2201      	movpl	r2, #1
 80a23ba:	601a      	strpl	r2, [r3, #0]
 80a23bc:	4b18      	ldr	r3, [pc, #96]	; (80a2420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a23be:	681a      	ldr	r2, [r3, #0]
 80a23c0:	07d0      	lsls	r0, r2, #31
 80a23c2:	bf5c      	itt	pl
 80a23c4:	2201      	movpl	r2, #1
 80a23c6:	601a      	strpl	r2, [r3, #0]
 80a23c8:	4b16      	ldr	r3, [pc, #88]	; (80a2424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a23ca:	681a      	ldr	r2, [r3, #0]
 80a23cc:	07d1      	lsls	r1, r2, #31
 80a23ce:	bf5c      	itt	pl
 80a23d0:	2201      	movpl	r2, #1
 80a23d2:	601a      	strpl	r2, [r3, #0]
 80a23d4:	4b14      	ldr	r3, [pc, #80]	; (80a2428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a23d6:	681a      	ldr	r2, [r3, #0]
 80a23d8:	07d2      	lsls	r2, r2, #31
 80a23da:	bf5c      	itt	pl
 80a23dc:	2201      	movpl	r2, #1
 80a23de:	601a      	strpl	r2, [r3, #0]
 80a23e0:	4b12      	ldr	r3, [pc, #72]	; (80a242c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a23e2:	681a      	ldr	r2, [r3, #0]
 80a23e4:	07d0      	lsls	r0, r2, #31
 80a23e6:	bf5c      	itt	pl
 80a23e8:	2201      	movpl	r2, #1
 80a23ea:	601a      	strpl	r2, [r3, #0]
 80a23ec:	4b10      	ldr	r3, [pc, #64]	; (80a2430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a23ee:	681a      	ldr	r2, [r3, #0]
 80a23f0:	07d1      	lsls	r1, r2, #31
 80a23f2:	bf5c      	itt	pl
 80a23f4:	2201      	movpl	r2, #1
 80a23f6:	601a      	strpl	r2, [r3, #0]
 80a23f8:	4b0e      	ldr	r3, [pc, #56]	; (80a2434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a23fa:	681a      	ldr	r2, [r3, #0]
 80a23fc:	07d2      	lsls	r2, r2, #31
 80a23fe:	bf5c      	itt	pl
 80a2400:	2201      	movpl	r2, #1
 80a2402:	601a      	strpl	r2, [r3, #0]
 80a2404:	4770      	bx	lr
 80a2406:	bf00      	nop
 80a2408:	20000a84 	.word	0x20000a84
 80a240c:	20000a80 	.word	0x20000a80
 80a2410:	20000a7c 	.word	0x20000a7c
 80a2414:	20000a78 	.word	0x20000a78
 80a2418:	20000a74 	.word	0x20000a74
 80a241c:	20000a70 	.word	0x20000a70
 80a2420:	20000a6c 	.word	0x20000a6c
 80a2424:	20000a68 	.word	0x20000a68
 80a2428:	20000a64 	.word	0x20000a64
 80a242c:	20000a60 	.word	0x20000a60
 80a2430:	20000a5c 	.word	0x20000a5c
 80a2434:	20000a58 	.word	0x20000a58

080a2438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2438:	4b18      	ldr	r3, [pc, #96]	; (80a249c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a243a:	681a      	ldr	r2, [r3, #0]
 80a243c:	07d1      	lsls	r1, r2, #31
 80a243e:	bf5c      	itt	pl
 80a2440:	2201      	movpl	r2, #1
 80a2442:	601a      	strpl	r2, [r3, #0]
 80a2444:	4b16      	ldr	r3, [pc, #88]	; (80a24a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2446:	681a      	ldr	r2, [r3, #0]
 80a2448:	07d2      	lsls	r2, r2, #31
 80a244a:	bf5c      	itt	pl
 80a244c:	2201      	movpl	r2, #1
 80a244e:	601a      	strpl	r2, [r3, #0]
 80a2450:	4b14      	ldr	r3, [pc, #80]	; (80a24a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2452:	681a      	ldr	r2, [r3, #0]
 80a2454:	07d0      	lsls	r0, r2, #31
 80a2456:	bf5c      	itt	pl
 80a2458:	2201      	movpl	r2, #1
 80a245a:	601a      	strpl	r2, [r3, #0]
 80a245c:	4b12      	ldr	r3, [pc, #72]	; (80a24a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a245e:	681a      	ldr	r2, [r3, #0]
 80a2460:	07d1      	lsls	r1, r2, #31
 80a2462:	bf5c      	itt	pl
 80a2464:	2201      	movpl	r2, #1
 80a2466:	601a      	strpl	r2, [r3, #0]
 80a2468:	4b10      	ldr	r3, [pc, #64]	; (80a24ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a246a:	681a      	ldr	r2, [r3, #0]
 80a246c:	07d2      	lsls	r2, r2, #31
 80a246e:	bf5c      	itt	pl
 80a2470:	2201      	movpl	r2, #1
 80a2472:	601a      	strpl	r2, [r3, #0]
 80a2474:	4b0e      	ldr	r3, [pc, #56]	; (80a24b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2476:	681a      	ldr	r2, [r3, #0]
 80a2478:	07d0      	lsls	r0, r2, #31
 80a247a:	bf5c      	itt	pl
 80a247c:	2201      	movpl	r2, #1
 80a247e:	601a      	strpl	r2, [r3, #0]
 80a2480:	4b0c      	ldr	r3, [pc, #48]	; (80a24b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2482:	681a      	ldr	r2, [r3, #0]
 80a2484:	07d1      	lsls	r1, r2, #31
 80a2486:	bf5c      	itt	pl
 80a2488:	2201      	movpl	r2, #1
 80a248a:	601a      	strpl	r2, [r3, #0]
 80a248c:	4b0a      	ldr	r3, [pc, #40]	; (80a24b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a248e:	681a      	ldr	r2, [r3, #0]
 80a2490:	07d2      	lsls	r2, r2, #31
 80a2492:	bf5c      	itt	pl
 80a2494:	2201      	movpl	r2, #1
 80a2496:	601a      	strpl	r2, [r3, #0]
 80a2498:	4770      	bx	lr
 80a249a:	bf00      	nop
 80a249c:	20000aa4 	.word	0x20000aa4
 80a24a0:	20000aa0 	.word	0x20000aa0
 80a24a4:	20000a9c 	.word	0x20000a9c
 80a24a8:	20000a98 	.word	0x20000a98
 80a24ac:	20000a94 	.word	0x20000a94
 80a24b0:	20000a90 	.word	0x20000a90
 80a24b4:	20000a8c 	.word	0x20000a8c
 80a24b8:	20000a88 	.word	0x20000a88

080a24bc <atoi>:
 80a24bc:	220a      	movs	r2, #10
 80a24be:	2100      	movs	r1, #0
 80a24c0:	f000 b920 	b.w	80a2704 <strtol>

080a24c4 <__cxa_atexit>:
 80a24c4:	b510      	push	{r4, lr}
 80a24c6:	4c05      	ldr	r4, [pc, #20]	; (80a24dc <__cxa_atexit+0x18>)
 80a24c8:	4613      	mov	r3, r2
 80a24ca:	b12c      	cbz	r4, 80a24d8 <__cxa_atexit+0x14>
 80a24cc:	460a      	mov	r2, r1
 80a24ce:	4601      	mov	r1, r0
 80a24d0:	2002      	movs	r0, #2
 80a24d2:	f3af 8000 	nop.w
 80a24d6:	bd10      	pop	{r4, pc}
 80a24d8:	4620      	mov	r0, r4
 80a24da:	bd10      	pop	{r4, pc}
 80a24dc:	00000000 	.word	0x00000000

080a24e0 <memcpy>:
 80a24e0:	b510      	push	{r4, lr}
 80a24e2:	1e43      	subs	r3, r0, #1
 80a24e4:	440a      	add	r2, r1
 80a24e6:	4291      	cmp	r1, r2
 80a24e8:	d004      	beq.n	80a24f4 <memcpy+0x14>
 80a24ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a24ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a24f2:	e7f8      	b.n	80a24e6 <memcpy+0x6>
 80a24f4:	bd10      	pop	{r4, pc}

080a24f6 <memset>:
 80a24f6:	4603      	mov	r3, r0
 80a24f8:	4402      	add	r2, r0
 80a24fa:	4293      	cmp	r3, r2
 80a24fc:	d002      	beq.n	80a2504 <memset+0xe>
 80a24fe:	f803 1b01 	strb.w	r1, [r3], #1
 80a2502:	e7fa      	b.n	80a24fa <memset+0x4>
 80a2504:	4770      	bx	lr
	...

080a2508 <srand>:
 80a2508:	b538      	push	{r3, r4, r5, lr}
 80a250a:	4b12      	ldr	r3, [pc, #72]	; (80a2554 <srand+0x4c>)
 80a250c:	4605      	mov	r5, r0
 80a250e:	681c      	ldr	r4, [r3, #0]
 80a2510:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2512:	b9d3      	cbnz	r3, 80a254a <srand+0x42>
 80a2514:	2018      	movs	r0, #24
 80a2516:	f7fe fabb 	bl	80a0a90 <malloc>
 80a251a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a251e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2520:	8003      	strh	r3, [r0, #0]
 80a2522:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2526:	8043      	strh	r3, [r0, #2]
 80a2528:	f241 2334 	movw	r3, #4660	; 0x1234
 80a252c:	8083      	strh	r3, [r0, #4]
 80a252e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2532:	80c3      	strh	r3, [r0, #6]
 80a2534:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2538:	8103      	strh	r3, [r0, #8]
 80a253a:	2305      	movs	r3, #5
 80a253c:	8143      	strh	r3, [r0, #10]
 80a253e:	230b      	movs	r3, #11
 80a2540:	8183      	strh	r3, [r0, #12]
 80a2542:	2201      	movs	r2, #1
 80a2544:	2300      	movs	r3, #0
 80a2546:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a254a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a254c:	2200      	movs	r2, #0
 80a254e:	611d      	str	r5, [r3, #16]
 80a2550:	615a      	str	r2, [r3, #20]
 80a2552:	bd38      	pop	{r3, r4, r5, pc}
 80a2554:	20000088 	.word	0x20000088

080a2558 <strcmp>:
 80a2558:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a255c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a2560:	2a01      	cmp	r2, #1
 80a2562:	bf28      	it	cs
 80a2564:	429a      	cmpcs	r2, r3
 80a2566:	d0f7      	beq.n	80a2558 <strcmp>
 80a2568:	1ad0      	subs	r0, r2, r3
 80a256a:	4770      	bx	lr

080a256c <strcpy>:
 80a256c:	4603      	mov	r3, r0
 80a256e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a2572:	f803 2b01 	strb.w	r2, [r3], #1
 80a2576:	2a00      	cmp	r2, #0
 80a2578:	d1f9      	bne.n	80a256e <strcpy+0x2>
 80a257a:	4770      	bx	lr

080a257c <strdup>:
 80a257c:	4b02      	ldr	r3, [pc, #8]	; (80a2588 <strdup+0xc>)
 80a257e:	4601      	mov	r1, r0
 80a2580:	6818      	ldr	r0, [r3, #0]
 80a2582:	f000 b803 	b.w	80a258c <_strdup_r>
 80a2586:	bf00      	nop
 80a2588:	20000088 	.word	0x20000088

080a258c <_strdup_r>:
 80a258c:	b570      	push	{r4, r5, r6, lr}
 80a258e:	4606      	mov	r6, r0
 80a2590:	4608      	mov	r0, r1
 80a2592:	460c      	mov	r4, r1
 80a2594:	f000 f80d 	bl	80a25b2 <strlen>
 80a2598:	1c45      	adds	r5, r0, #1
 80a259a:	4629      	mov	r1, r5
 80a259c:	4630      	mov	r0, r6
 80a259e:	f7fe fa9f 	bl	80a0ae0 <_malloc_r>
 80a25a2:	4606      	mov	r6, r0
 80a25a4:	b118      	cbz	r0, 80a25ae <_strdup_r+0x22>
 80a25a6:	462a      	mov	r2, r5
 80a25a8:	4621      	mov	r1, r4
 80a25aa:	f7ff ff99 	bl	80a24e0 <memcpy>
 80a25ae:	4630      	mov	r0, r6
 80a25b0:	bd70      	pop	{r4, r5, r6, pc}

080a25b2 <strlen>:
 80a25b2:	4603      	mov	r3, r0
 80a25b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a25b8:	2a00      	cmp	r2, #0
 80a25ba:	d1fb      	bne.n	80a25b4 <strlen+0x2>
 80a25bc:	1a18      	subs	r0, r3, r0
 80a25be:	3801      	subs	r0, #1
 80a25c0:	4770      	bx	lr

080a25c2 <strstr>:
 80a25c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a25c4:	7803      	ldrb	r3, [r0, #0]
 80a25c6:	b963      	cbnz	r3, 80a25e2 <strstr+0x20>
 80a25c8:	780b      	ldrb	r3, [r1, #0]
 80a25ca:	2b00      	cmp	r3, #0
 80a25cc:	bf18      	it	ne
 80a25ce:	2000      	movne	r0, #0
 80a25d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a25d2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a25d6:	b162      	cbz	r2, 80a25f2 <strstr+0x30>
 80a25d8:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80a25dc:	4630      	mov	r0, r6
 80a25de:	4297      	cmp	r7, r2
 80a25e0:	d0f7      	beq.n	80a25d2 <strstr+0x10>
 80a25e2:	4603      	mov	r3, r0
 80a25e4:	1c46      	adds	r6, r0, #1
 80a25e6:	7800      	ldrb	r0, [r0, #0]
 80a25e8:	b110      	cbz	r0, 80a25f0 <strstr+0x2e>
 80a25ea:	1e4d      	subs	r5, r1, #1
 80a25ec:	1e5c      	subs	r4, r3, #1
 80a25ee:	e7f0      	b.n	80a25d2 <strstr+0x10>
 80a25f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a25f2:	4618      	mov	r0, r3
 80a25f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a25f8 <_strtol_r>:
 80a25f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a25fc:	460f      	mov	r7, r1
 80a25fe:	4680      	mov	r8, r0
 80a2600:	483f      	ldr	r0, [pc, #252]	; (80a2700 <_strtol_r+0x108>)
 80a2602:	f8d0 9000 	ldr.w	r9, [r0]
 80a2606:	463d      	mov	r5, r7
 80a2608:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a260c:	eb09 0004 	add.w	r0, r9, r4
 80a2610:	7840      	ldrb	r0, [r0, #1]
 80a2612:	f000 0008 	and.w	r0, r0, #8
 80a2616:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a261a:	b108      	cbz	r0, 80a2620 <_strtol_r+0x28>
 80a261c:	462f      	mov	r7, r5
 80a261e:	e7f2      	b.n	80a2606 <_strtol_r+0xe>
 80a2620:	2c2d      	cmp	r4, #45	; 0x2d
 80a2622:	d103      	bne.n	80a262c <_strtol_r+0x34>
 80a2624:	1cbd      	adds	r5, r7, #2
 80a2626:	787c      	ldrb	r4, [r7, #1]
 80a2628:	2601      	movs	r6, #1
 80a262a:	e003      	b.n	80a2634 <_strtol_r+0x3c>
 80a262c:	2c2b      	cmp	r4, #43	; 0x2b
 80a262e:	bf04      	itt	eq
 80a2630:	787c      	ldrbeq	r4, [r7, #1]
 80a2632:	1cbd      	addeq	r5, r7, #2
 80a2634:	b113      	cbz	r3, 80a263c <_strtol_r+0x44>
 80a2636:	2b10      	cmp	r3, #16
 80a2638:	d10a      	bne.n	80a2650 <_strtol_r+0x58>
 80a263a:	e05b      	b.n	80a26f4 <_strtol_r+0xfc>
 80a263c:	2c30      	cmp	r4, #48	; 0x30
 80a263e:	d157      	bne.n	80a26f0 <_strtol_r+0xf8>
 80a2640:	7828      	ldrb	r0, [r5, #0]
 80a2642:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a2646:	2858      	cmp	r0, #88	; 0x58
 80a2648:	d14d      	bne.n	80a26e6 <_strtol_r+0xee>
 80a264a:	786c      	ldrb	r4, [r5, #1]
 80a264c:	2310      	movs	r3, #16
 80a264e:	3502      	adds	r5, #2
 80a2650:	2e00      	cmp	r6, #0
 80a2652:	bf14      	ite	ne
 80a2654:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a2658:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a265c:	fbbc faf3 	udiv	sl, ip, r3
 80a2660:	2700      	movs	r7, #0
 80a2662:	4638      	mov	r0, r7
 80a2664:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a2668:	eb09 0e04 	add.w	lr, r9, r4
 80a266c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a2670:	f01e 0f04 	tst.w	lr, #4
 80a2674:	d001      	beq.n	80a267a <_strtol_r+0x82>
 80a2676:	3c30      	subs	r4, #48	; 0x30
 80a2678:	e00b      	b.n	80a2692 <_strtol_r+0x9a>
 80a267a:	f01e 0e03 	ands.w	lr, lr, #3
 80a267e:	d01b      	beq.n	80a26b8 <_strtol_r+0xc0>
 80a2680:	f1be 0f01 	cmp.w	lr, #1
 80a2684:	bf0c      	ite	eq
 80a2686:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a268a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a268e:	ebce 0404 	rsb	r4, lr, r4
 80a2692:	42a3      	cmp	r3, r4
 80a2694:	dd10      	ble.n	80a26b8 <_strtol_r+0xc0>
 80a2696:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a269a:	d00a      	beq.n	80a26b2 <_strtol_r+0xba>
 80a269c:	4550      	cmp	r0, sl
 80a269e:	d806      	bhi.n	80a26ae <_strtol_r+0xb6>
 80a26a0:	d101      	bne.n	80a26a6 <_strtol_r+0xae>
 80a26a2:	4564      	cmp	r4, ip
 80a26a4:	dc03      	bgt.n	80a26ae <_strtol_r+0xb6>
 80a26a6:	fb03 4000 	mla	r0, r3, r0, r4
 80a26aa:	2701      	movs	r7, #1
 80a26ac:	e001      	b.n	80a26b2 <_strtol_r+0xba>
 80a26ae:	f04f 37ff 	mov.w	r7, #4294967295
 80a26b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a26b6:	e7d7      	b.n	80a2668 <_strtol_r+0x70>
 80a26b8:	1c7b      	adds	r3, r7, #1
 80a26ba:	d10c      	bne.n	80a26d6 <_strtol_r+0xde>
 80a26bc:	2e00      	cmp	r6, #0
 80a26be:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a26c2:	bf14      	ite	ne
 80a26c4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a26c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a26cc:	f8c8 3000 	str.w	r3, [r8]
 80a26d0:	b92a      	cbnz	r2, 80a26de <_strtol_r+0xe6>
 80a26d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a26d6:	b106      	cbz	r6, 80a26da <_strtol_r+0xe2>
 80a26d8:	4240      	negs	r0, r0
 80a26da:	b172      	cbz	r2, 80a26fa <_strtol_r+0x102>
 80a26dc:	b107      	cbz	r7, 80a26e0 <_strtol_r+0xe8>
 80a26de:	1e69      	subs	r1, r5, #1
 80a26e0:	6011      	str	r1, [r2, #0]
 80a26e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a26e6:	2430      	movs	r4, #48	; 0x30
 80a26e8:	2b00      	cmp	r3, #0
 80a26ea:	d1b1      	bne.n	80a2650 <_strtol_r+0x58>
 80a26ec:	2308      	movs	r3, #8
 80a26ee:	e7af      	b.n	80a2650 <_strtol_r+0x58>
 80a26f0:	230a      	movs	r3, #10
 80a26f2:	e7ad      	b.n	80a2650 <_strtol_r+0x58>
 80a26f4:	2c30      	cmp	r4, #48	; 0x30
 80a26f6:	d0a3      	beq.n	80a2640 <_strtol_r+0x48>
 80a26f8:	e7aa      	b.n	80a2650 <_strtol_r+0x58>
 80a26fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a26fe:	bf00      	nop
 80a2700:	20000024 	.word	0x20000024

080a2704 <strtol>:
 80a2704:	4613      	mov	r3, r2
 80a2706:	460a      	mov	r2, r1
 80a2708:	4601      	mov	r1, r0
 80a270a:	4802      	ldr	r0, [pc, #8]	; (80a2714 <strtol+0x10>)
 80a270c:	6800      	ldr	r0, [r0, #0]
 80a270e:	f7ff bf73 	b.w	80a25f8 <_strtol_r>
 80a2712:	bf00      	nop
 80a2714:	20000088 	.word	0x20000088

080a2718 <dynalib_user>:
 80a2718:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a2728:	00000000 65725f41 53006461 70757465     ....A_read.Setup
 80a2738:	6e696620 65687369 6e690064 2d6f6420      finished.in do-
 80a2748:	6867696c 42380074 355a626c 69445654     light.8BlbZ5TVDi
 80a2758:	62734733 654a4d63 42343741 6c554963     3GsbcMJeA74BcIUl
 80a2768:	6c414e78 32783546 486b6d44 2f004f76     xNAlF5x2DmkHvO./
 80a2778:	2f697061 6c2f7325 74686769 64252f73     api/%s/lights/%d
 80a2788:	6174732f 7b006574 226e6f22 6c61663a     /state.{"on":fal
 80a2798:	007d6573 6e6f227b 72743a22 007d6575     se}.{"on":true}.
 80a27a8:	2e323931 2e383631 322e3737 55500030     192.168.77.20.PU
 80a27b8:	66610054 20726574 70747468 74757020     T.after http put
 80a27c8:	66656200 2065726f 6c2d6f64 74686769     .before do-light
 80a27d8:	74664100 64207265 696c2d6f 00746867     .After do-light.
 80a27e8:	00206e6f 0066666f 746e6f43 2d746e65     on .off.Content-
 80a27f8:	65707954 70706100 6163696c 6e6f6974     Type.application
 80a2808:	772d782f 662d7777 2d6d726f 656c7275     /x-www-form-urle
 80a2818:	646f636e 41006465 70656363 2f2a0074     ncoded.Accept.*/
 80a2828:	4820002a 2f505454 0d302e31 6c63000a     *. HTTP/1.0...cl
 80a2838:	0065736f 6e6e6f43 69746365 48006e6f     ose.Connection.H
 80a2848:	0054534f 746e6f43 2d746e65 676e654c     OST.Content-Leng
 80a2858:	50006874 0054534f 0a0d0a0d 00000000     th.POST.........

080a2868 <_ZTV8SPIClass>:
	...
 80a2870:	080a0af1 080a0b09                       ........

080a2878 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a2880:	080a0be1 080a0be7 080a0fff 080a0bf5     ................
 80a2890:	080a0be3                                ....

080a2894 <_ZTV9TCPClient>:
	...
 80a289c:	080a0101 080a012d 080a0b9d 080a0bb7     ....-...........
 80a28ac:	080a0cfd 080a0c67 080a0c39 080a0bdf     ....g...9.......
 80a28bc:	080a0da9 080a1019 080a0c9b 080a0d75     ............u...
 80a28cc:	080a0ef7 080a0f49 080a0bc7 080a0ebb     ....I...........
 80a28dc:	080a0c19 69726977 5400676e 6c435043     ....wiring.TCPCl
 80a28ec:	746e6569 636f7320 3d74656b 62007825     ient socket=%x.b
 80a28fc:	00647561 69726553 55006c61 65534253     aud.Serial.USBSe
 80a290c:	6c616972 79740031 70006570 6d617261     rial1.type.param
 80a291c:	646d6300 00646900 00646e68 6d727473     .cmd.id.hnd.strm
 80a292c:	6c696600 766c0074 6461006c 6e614864     .filt.lvl.addHan
 80a293c:	72656c64 6d657200 4865766f 6c646e61     dler.removeHandl
 80a294c:	65007265 486d756e 6c646e61 00737265     er.enumHandlers.
 80a295c:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
 80a296c:	72656c64 70706100 31302500 00207530     dler.app.%010u .
 80a297c:	2500205d 202c0064 3a292800 5b200020     ] .%d., .(): . [
 80a298c:	646f6300 203d2065 00692500 61746564     .code = .%i.deta
 80a299c:	20736c69 6c00203d 6e66006e 646f6300     ils = .ln.fn.cod
 80a29ac:	65640065 6c696174 6e6f6e00 72740065     e.detail.none.tr
 80a29bc:	00656361 6f666e69 72617700 7265006e     ace.info.warn.er
 80a29cc:	00726f72 696e6170 6c610063 005a006c     ror.panic.all.Z.
 80a29dc:	33302b25 30253a64 25007532 6d252d59     %+03d:%02u.%Y-%m
 80a29ec:	5464252d 253a4825 53253a4d 61007a25     -%dT%H:%M:%S%z.a
 80a29fc:	69746373 0000656d                       sctime..

080a2a04 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a2a0c:	080a14f1 080a14f7 080a153b 080a1505     ........;.......
 80a2a1c:	080a14f3                                ....

080a2a20 <_ZTV9IPAddress>:
	...
 80a2a28:	080a1a89 080a1a79 080a1a7b              ....y...{...

080a2a34 <_ZTV9USBSerial>:
	...
 80a2a3c:	080a1b45 080a1b95 080a1ba3 080a122b     E...........+...
 80a2a4c:	080a1b81 080a1b47 080a1b5d 080a1b8f     ....G...].......
 80a2a5c:	080a1b73 080a1b41                       s...A...

080a2a64 <_ZTV11USARTSerial>:
	...
 80a2a6c:	080a1ce5 080a1d35 080a1d43 080a122b     ....5...C...+...
 80a2a7c:	080a1cf9 080a1d1b 080a1d07 080a1d2f     ............/...
 80a2a8c:	080a1ce7 080a1ceb                       ........

080a2a94 <_ZTV7TwoWire>:
	...
 80a2a9c:	080a1e11 080a1e5b 080a1e33 080a1e13     ....[...3.......
 80a2aac:	080a1e3b 080a1e43 080a1e4b 080a1e53     ;...C...K...S...

080a2abc <_ZTVN5spark9WiFiClassE>:
	...
 80a2ac4:	080a1f2b 080a1f21 080a1f17 080a1e95     +...!...........
 80a2ad4:	080a12ef 080a1f0b 080a1eff 080a1ef7     ................
 80a2ae4:	080a1eed 080a1ee3 080a1e9f              ............

080a2af0 <_ZTVN5spark12NetworkClassE>:
	...
 80a2af8:	080a1f49 080a1f53 080a1f5d 080a1f67     I...S...]...g...
 80a2b08:	080a1f71 080a1f7d 080a1f89 080a1f95     q...}...........
 80a2b18:	080a1f9d 080a1fa7 080a1fb1              ............

080a2b24 <_ZSt7nothrow>:
	...

080a2b25 <_ctype_>:
 80a2b25:	20202000 20202020 28282020 20282828     .         ((((( 
 80a2b35:	20202020 20202020 20202020 20202020                     
 80a2b45:	10108820 10101010 10101010 10101010      ...............
 80a2b55:	04040410 04040404 10040404 10101010     ................
 80a2b65:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a2b75:	01010101 01010101 01010101 10101010     ................
 80a2b85:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a2b95:	02020202 02020202 02020202 10101010     ................
 80a2ba5:	00000020 00000000 00000000 00000000      ...............
	...

080a2c28 <__sf_fake_stdin>:
	...

080a2c48 <__sf_fake_stdout>:
	...

080a2c68 <__sf_fake_stderr>:
	...
 80a2c88:	00000043                                         C.

080a2c8a <link_const_variable_data_end>:
	...

080a2c8c <link_constructors_location>:
 80a2c8c:	080a031d 	.word	0x080a031d
 80a2c90:	080a0439 	.word	0x080a0439
 80a2c94:	080a0b69 	.word	0x080a0b69
 80a2c98:	080a1335 	.word	0x080a1335
 80a2c9c:	080a1345 	.word	0x080a1345
 80a2ca0:	080a139d 	.word	0x080a139d
 80a2ca4:	080a1f35 	.word	0x080a1f35
 80a2ca8:	080a2019 	.word	0x080a2019
 80a2cac:	080a2135 	.word	0x080a2135
 80a2cb0:	080a222d 	.word	0x080a222d
 80a2cb4:	080a22b1 	.word	0x080a22b1
 80a2cb8:	080a2375 	.word	0x080a2375
 80a2cbc:	080a2439 	.word	0x080a2439
