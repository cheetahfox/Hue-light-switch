
c:/Users/Josh/Documents/Hue-light-switch/Hue/target/1.5.0/argon/Hue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002fa4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6fc0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000008c  2003dea8  000d6fc4  0001dea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000008bc  2003df34  2003df34  0002df34  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d7050  000d7050  00027050  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7078  000d7078  00027078  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f73cd  00000000  00000000  0002707c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000133e3  00000000  00000000  0011e449  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00020758  00000000  00000000  0013182c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002a40  00000000  00000000  00151f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004ed8  00000000  00000000  001549c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037df1  00000000  00000000  0015989c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002da22  00000000  00000000  0019168d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00109d77  00000000  00000000  001bf0af  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000dc38  00000000  00000000  002c8e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fba1 	bl	d6774 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fba6 	bl	d678a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dea8 	.word	0x2003dea8
   d4048:	000d6fc4 	.word	0x000d6fc4
   d404c:	2003df34 	.word	0x2003df34
   d4050:	2003df34 	.word	0x2003df34
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f809 	bl	d5070 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6fbc 	.word	0x000d6fbc
   d4080:	000d6f80 	.word	0x000d6f80

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b85c 	b.w	d4140 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8ff 	bl	d428c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f000 bfaf 	b.w	d4ff4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bd21 	b.w	d4adc <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bd27 	b.w	d4aec <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bd25 	b.w	d4aec <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
   d40b2:	6810      	ldr	r0, [r2, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40b6:	b510      	push	{r4, lr}
   d40b8:	4604      	mov	r4, r0
   d40ba:	3004      	adds	r0, #4
   d40bc:	f000 fdc6 	bl	d4c4c <_ZN6StringD1Ev>
   d40c0:	4620      	mov	r0, r4
   d40c2:	bd10      	pop	{r4, pc}

000d40c4 <_ZN14http_request_tD1Ev>:
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   d40c4:	b510      	push	{r4, lr}
   d40c6:	4604      	mov	r4, r0
   d40c8:	303c      	adds	r0, #60	; 0x3c
   d40ca:	f000 fdbf 	bl	d4c4c <_ZN6StringD1Ev>
   d40ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40d2:	f000 fdbb 	bl	d4c4c <_ZN6StringD1Ev>
   d40d6:	4620      	mov	r0, r4
   d40d8:	f000 fdb8 	bl	d4c4c <_ZN6StringD1Ev>
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}

000d40e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.11>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40e0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40e2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d40e4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d40e6:	689b      	ldr	r3, [r3, #8]
   d40e8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40ea:	68a3      	ldr	r3, [r4, #8]
   d40ec:	3b01      	subs	r3, #1
   d40ee:	60a3      	str	r3, [r4, #8]
   d40f0:	b92b      	cbnz	r3, d40fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.11+0x1e>
            _M_destroy();
   d40f2:	6823      	ldr	r3, [r4, #0]
   d40f4:	4620      	mov	r0, r4
   d40f6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d40f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d40fc:	4718      	bx	r3
   d40fe:	bd10      	pop	{r4, pc}

000d4100 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4100:	b510      	push	{r4, lr}
   d4102:	4b06      	ldr	r3, [pc, #24]	; (d411c <_ZN9TCPClientD1Ev+0x1c>)
   d4104:	6003      	str	r3, [r0, #0]
   d4106:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4108:	6980      	ldr	r0, [r0, #24]
   d410a:	b128      	cbz	r0, d4118 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d410c:	6843      	ldr	r3, [r0, #4]
   d410e:	3b01      	subs	r3, #1
   d4110:	6043      	str	r3, [r0, #4]
   d4112:	b90b      	cbnz	r3, d4118 <_ZN9TCPClientD1Ev+0x18>
   d4114:	f7ff ffe4 	bl	d40e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.11>
   d4118:	4620      	mov	r0, r4
   d411a:	bd10      	pop	{r4, pc}
   d411c:	000d6d54 	.word	0x000d6d54

000d4120 <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
   d4120:	b510      	push	{r4, lr}
   d4122:	4604      	mov	r4, r0
   d4124:	f7ff ffec 	bl	d4100 <_ZN9TCPClientD1Ev>
   d4128:	4620      	mov	r0, r4
   d412a:	bd10      	pop	{r4, pc}

000d412c <_ZN9TCPClientD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	f7ff ffe6 	bl	d4100 <_ZN9TCPClientD1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	211c      	movs	r1, #28
   d4138:	f002 f9ac 	bl	d6494 <_ZdlPvj>
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <setup>:

http_request_t request;
http_response_t response;


void setup() {
   d4140:	b510      	push	{r4, lr}
  pinMode(led1, OUTPUT);
   d4142:	4b20      	ldr	r3, [pc, #128]	; (d41c4 <setup+0x84>)

http_request_t request;
http_response_t response;


void setup() {
   d4144:	b086      	sub	sp, #24
  pinMode(led1, OUTPUT);
   d4146:	8818      	ldrh	r0, [r3, #0]
   d4148:	2101      	movs	r1, #1
   d414a:	f002 f8f3 	bl	d6334 <pinMode>
  pinMode(D0, OUTPUT); 
   d414e:	2101      	movs	r1, #1
   d4150:	2000      	movs	r0, #0
   d4152:	f002 f8ef 	bl	d6334 <pinMode>
  pinMode(A0, INPUT);
   d4156:	2100      	movs	r1, #0
   d4158:	2013      	movs	r0, #19
   d415a:	f002 f8eb 	bl	d6334 <pinMode>
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d415e:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
   d4160:	230c      	movs	r3, #12
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d4162:	9403      	str	r4, [sp, #12]
        extra.size = sizeof(extra);
   d4164:	f8ad 300c 	strh.w	r3, [sp, #12]
        extra.update = update_string_variable;
   d4168:	4b17      	ldr	r3, [pc, #92]	; (d41c8 <setup+0x88>)
   d416a:	9304      	str	r3, [sp, #16]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d416c:	2204      	movs	r2, #4
   d416e:	ab03      	add	r3, sp, #12
   d4170:	4916      	ldr	r1, [pc, #88]	; (d41cc <setup+0x8c>)
   d4172:	4817      	ldr	r0, [pc, #92]	; (d41d0 <setup+0x90>)
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
   d4174:	9405      	str	r4, [sp, #20]
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
   d4176:	f000 fc91 	bl	d4a9c <spark_variable>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d417a:	4623      	mov	r3, r4
   d417c:	2202      	movs	r2, #2
   d417e:	4915      	ldr	r1, [pc, #84]	; (d41d4 <setup+0x94>)
   d4180:	4815      	ldr	r0, [pc, #84]	; (d41d8 <setup+0x98>)
   d4182:	f000 fc8b 	bl	d4a9c <spark_variable>
   d4186:	4b15      	ldr	r3, [pc, #84]	; (d41dc <setup+0x9c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4188:	4915      	ldr	r1, [pc, #84]	; (d41e0 <setup+0xa0>)
   d418a:	781b      	ldrb	r3, [r3, #0]
   d418c:	f88d 3000 	strb.w	r3, [sp]
   d4190:	a803      	add	r0, sp, #12
   d4192:	233c      	movs	r3, #60	; 0x3c
   d4194:	4622      	mov	r2, r4
   d4196:	f001 f8d9 	bl	d534c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d419a:	9804      	ldr	r0, [sp, #16]
   d419c:	b128      	cbz	r0, d41aa <setup+0x6a>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d419e:	6843      	ldr	r3, [r0, #4]
   d41a0:	3b01      	subs	r3, #1
   d41a2:	6043      	str	r3, [r0, #4]
   d41a4:	b90b      	cbnz	r3, d41aa <setup+0x6a>
   d41a6:	f7ff ff9b 	bl	d40e0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.11>
  Particle.variable("light", status);
  Particle.variable("A_read", read_val);
  Particle.publish("Setup finished", PUBLIC);
  digitalWrite(D0,HIGH);
   d41aa:	2101      	movs	r1, #1
   d41ac:	2000      	movs	r0, #0
   d41ae:	f002 f8d2 	bl	d6356 <digitalWrite>
  Serial.begin(9600);
   d41b2:	f001 fb37 	bl	d5824 <_Z16_fetch_usbserialv>
   d41b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41ba:	f001 fb27 	bl	d580c <_ZN9USBSerial5beginEl>
}
   d41be:	b006      	add	sp, #24
   d41c0:	bd10      	pop	{r4, pc}
   d41c2:	bf00      	nop
   d41c4:	2003dec4 	.word	0x2003dec4
   d41c8:	000d40b3 	.word	0x000d40b3
   d41cc:	2003e3bc 	.word	0x2003e3bc
   d41d0:	000d6a67 	.word	0x000d6a67
   d41d4:	2003df38 	.word	0x2003df38
   d41d8:	000d69c0 	.word	0x000d69c0
   d41dc:	2003df88 	.word	0x2003df88
   d41e0:	000d69c7 	.word	0x000d69c7

000d41e4 <_Z15do_light_updatebi>:
    read_val = analogRead(A0);
    delay(200);
}

// do_light_update - On/Off, HUE light ID number
void do_light_update(bool state, int light_id) { 
   d41e4:	b530      	push	{r4, r5, lr}
   d41e6:	b0b3      	sub	sp, #204	; 0xcc
   d41e8:	460d      	mov	r5, r1
   d41ea:	4604      	mov	r4, r0
    Serial.println("in do-light");
   d41ec:	f001 fb1a 	bl	d5824 <_Z16_fetch_usbserialv>
   d41f0:	491a      	ldr	r1, [pc, #104]	; (d425c <_Z15do_light_updatebi+0x78>)
   d41f2:	f000 fe74 	bl	d4ede <_ZN5Print7printlnEPKc>
    char path[128]; 
    char body[64];
    
    sprintf(path, "/api/%s/lights/%d/state", HUE_DEVELOPER_NAME, light_id);
   d41f6:	491a      	ldr	r1, [pc, #104]	; (d4260 <_Z15do_light_updatebi+0x7c>)
   d41f8:	4a1a      	ldr	r2, [pc, #104]	; (d4264 <_Z15do_light_updatebi+0x80>)
   d41fa:	462b      	mov	r3, r5
   d41fc:	a812      	add	r0, sp, #72	; 0x48
   d41fe:	f000 fc85 	bl	d4b0c <sprintf>
    
    // Alsways default to turning the lights off.
    sprintf(body, "{\"on\":false}" );
   d4202:	4919      	ldr	r1, [pc, #100]	; (d4268 <_Z15do_light_updatebi+0x84>)
   d4204:	a802      	add	r0, sp, #8
   d4206:	f002 fafb 	bl	d6800 <strcpy>
    
    if (state) {
   d420a:	b11c      	cbz	r4, d4214 <_Z15do_light_updatebi+0x30>
        sprintf(body, "{\"on\":true}" );
   d420c:	4917      	ldr	r1, [pc, #92]	; (d426c <_Z15do_light_updatebi+0x88>)
   d420e:	a802      	add	r0, sp, #8
   d4210:	f002 faf6 	bl	d6800 <strcpy>
    }
    
    request.hostname = HUE_HUB_IP_ADDRESS; 
   d4214:	4c16      	ldr	r4, [pc, #88]	; (d4270 <_Z15do_light_updatebi+0x8c>)
   d4216:	4917      	ldr	r1, [pc, #92]	; (d4274 <_Z15do_light_updatebi+0x90>)
   d4218:	4620      	mov	r0, r4
   d421a:	f000 fd71 	bl	d4d00 <_ZN6StringaSEPKc>
    request.port = 80;
   d421e:	2350      	movs	r3, #80	; 0x50
    request.path = path; 
   d4220:	a912      	add	r1, sp, #72	; 0x48
   d4222:	f104 0028 	add.w	r0, r4, #40	; 0x28
    if (state) {
        sprintf(body, "{\"on\":true}" );
    }
    
    request.hostname = HUE_HUB_IP_ADDRESS; 
    request.port = 80;
   d4226:	63a3      	str	r3, [r4, #56]	; 0x38
    request.path = path; 
   d4228:	f000 fd6a 	bl	d4d00 <_ZN6StringaSEPKc>
    request.body = body;
   d422c:	a902      	add	r1, sp, #8
   d422e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4232:	f000 fd65 	bl	d4d00 <_ZN6StringaSEPKc>
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
    }

    void put(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_PUT);
   d4236:	4b10      	ldr	r3, [pc, #64]	; (d4278 <_Z15do_light_updatebi+0x94>)
   d4238:	4a10      	ldr	r2, [pc, #64]	; (d427c <_Z15do_light_updatebi+0x98>)
   d423a:	9300      	str	r3, [sp, #0]
   d423c:	4621      	mov	r1, r4
   d423e:	4b10      	ldr	r3, [pc, #64]	; (d4280 <_Z15do_light_updatebi+0x9c>)
   d4240:	4810      	ldr	r0, [pc, #64]	; (d4284 <_Z15do_light_updatebi+0xa0>)
   d4242:	f000 f8fb 	bl	d443c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
    
    http.put(request, response, headers);
    Serial.println("after http put"); 
   d4246:	f001 faed 	bl	d5824 <_Z16_fetch_usbserialv>
   d424a:	490f      	ldr	r1, [pc, #60]	; (d4288 <_Z15do_light_updatebi+0xa4>)
   d424c:	f000 fe47 	bl	d4ede <_ZN5Print7printlnEPKc>
    delay(1000);
   d4250:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4254:	f000 fe80 	bl	d4f58 <delay>
   d4258:	b033      	add	sp, #204	; 0xcc
   d425a:	bd30      	pop	{r4, r5, pc}
   d425c:	000d69d6 	.word	0x000d69d6
   d4260:	000d6a0b 	.word	0x000d6a0b
   d4264:	000d69e2 	.word	0x000d69e2
   d4268:	000d6a23 	.word	0x000d6a23
   d426c:	000d6a30 	.word	0x000d6a30
   d4270:	2003df3c 	.word	0x2003df3c
   d4274:	000d6a3c 	.word	0x000d6a3c
   d4278:	000d6a4a 	.word	0x000d6a4a
   d427c:	2003e3a8 	.word	0x2003e3a8
   d4280:	2003deac 	.word	0x2003deac
   d4284:	2003df8c 	.word	0x2003df8c
   d4288:	000d6a4e 	.word	0x000d6a4e

000d428c <loop>:
  Particle.publish("Setup finished", PUBLIC);
  digitalWrite(D0,HIGH);
  Serial.begin(9600);
}

void loop() {
   d428c:	b510      	push	{r4, lr}
    bool state_crm = FALSE;
    if (analogRead(A0) > 80 ) {
   d428e:	2013      	movs	r0, #19
   d4290:	f002 f87a 	bl	d6388 <analogRead>
        state_crm = TRUE;
    }

    if (state_crm != light) {
   d4294:	4c18      	ldr	r4, [pc, #96]	; (d42f8 <loop+0x6c>)
  Serial.begin(9600);
}

void loop() {
    bool state_crm = FALSE;
    if (analogRead(A0) > 80 ) {
   d4296:	2850      	cmp	r0, #80	; 0x50
        state_crm = TRUE;
    }

    if (state_crm != light) {
   d4298:	7823      	ldrb	r3, [r4, #0]
  Serial.begin(9600);
}

void loop() {
    bool state_crm = FALSE;
    if (analogRead(A0) > 80 ) {
   d429a:	bfd4      	ite	le
   d429c:	2000      	movle	r0, #0
   d429e:	2001      	movgt	r0, #1
        state_crm = TRUE;
    }

    if (state_crm != light) {
   d42a0:	4283      	cmp	r3, r0
   d42a2:	d01f      	beq.n	d42e4 <loop+0x58>
        light = state_crm;
   d42a4:	7020      	strb	r0, [r4, #0]
        Serial.println("before do-light");
   d42a6:	f001 fabd 	bl	d5824 <_Z16_fetch_usbserialv>
   d42aa:	4914      	ldr	r1, [pc, #80]	; (d42fc <loop+0x70>)
   d42ac:	f000 fe17 	bl	d4ede <_ZN5Print7printlnEPKc>
        do_light_update(light,HUE_LIGHT_CRM_1);
   d42b0:	4b13      	ldr	r3, [pc, #76]	; (d4300 <loop+0x74>)
   d42b2:	7820      	ldrb	r0, [r4, #0]
   d42b4:	6819      	ldr	r1, [r3, #0]
   d42b6:	f7ff ff95 	bl	d41e4 <_Z15do_light_updatebi>
        // do_light_update(light,HUE_LIGHT_CRM_2);
        Serial.println("After do-light");
   d42ba:	f001 fab3 	bl	d5824 <_Z16_fetch_usbserialv>
   d42be:	4911      	ldr	r1, [pc, #68]	; (d4304 <loop+0x78>)
   d42c0:	f000 fe0d 	bl	d4ede <_ZN5Print7printlnEPKc>
        if (light) {
   d42c4:	7821      	ldrb	r1, [r4, #0]
   d42c6:	4b10      	ldr	r3, [pc, #64]	; (d4308 <loop+0x7c>)
   d42c8:	b129      	cbz	r1, d42d6 <loop+0x4a>
            digitalWrite(led1, HIGH);
   d42ca:	2101      	movs	r1, #1
   d42cc:	8818      	ldrh	r0, [r3, #0]
   d42ce:	f002 f842 	bl	d6356 <digitalWrite>
            status = "on ";
   d42d2:	490e      	ldr	r1, [pc, #56]	; (d430c <loop+0x80>)
   d42d4:	e003      	b.n	d42de <loop+0x52>
        }
        else {
            digitalWrite(led1, LOW); 
   d42d6:	8818      	ldrh	r0, [r3, #0]
   d42d8:	f002 f83d 	bl	d6356 <digitalWrite>
            status = "off";
   d42dc:	490c      	ldr	r1, [pc, #48]	; (d4310 <loop+0x84>)
   d42de:	480d      	ldr	r0, [pc, #52]	; (d4314 <loop+0x88>)
   d42e0:	f000 fd0e 	bl	d4d00 <_ZN6StringaSEPKc>
        }
    }
    read_val = analogRead(A0);
   d42e4:	2013      	movs	r0, #19
   d42e6:	f002 f84f 	bl	d6388 <analogRead>
   d42ea:	4b0b      	ldr	r3, [pc, #44]	; (d4318 <loop+0x8c>)
   d42ec:	6018      	str	r0, [r3, #0]
    delay(200);
}
   d42ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            digitalWrite(led1, LOW); 
            status = "off";
        }
    }
    read_val = analogRead(A0);
    delay(200);
   d42f2:	20c8      	movs	r0, #200	; 0xc8
   d42f4:	f000 be30 	b.w	d4f58 <delay>
   d42f8:	2003df89 	.word	0x2003df89
   d42fc:	000d6a5d 	.word	0x000d6a5d
   d4300:	2003dea8 	.word	0x2003dea8
   d4304:	000d6a6d 	.word	0x000d6a6d
   d4308:	2003dec4 	.word	0x2003dec4
   d430c:	000d6a7c 	.word	0x000d6a7c
   d4310:	000d6a80 	.word	0x000d6a80
   d4314:	2003e3bc 	.word	0x2003e3bc
   d4318:	2003df38 	.word	0x2003df38

000d431c <_GLOBAL__sub_I_HUE_LIGHT_CRM_1>:
    request.body = body;
    
    http.put(request, response, headers);
    Serial.println("after http put"); 
    delay(1000);
   d431c:	b570      	push	{r4, r5, r6, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d431e:	4b1f      	ldr	r3, [pc, #124]	; (d439c <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x80>)
#include "HttpClient.h"
#include "application.h"

int led1 = D7;
bool light = FALSE;
String status = "off";
   d4320:	4c1f      	ldr	r4, [pc, #124]	; (d43a0 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x84>)
   d4322:	4d20      	ldr	r5, [pc, #128]	; (d43a4 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x88>)
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
   d4324:	4e20      	ldr	r6, [pc, #128]	; (d43a8 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x8c>)
   d4326:	2200      	movs	r2, #0
   d4328:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d432a:	f000 f9b3 	bl	d4694 <HAL_Pin_Map>
   d432e:	491f      	ldr	r1, [pc, #124]	; (d43ac <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x90>)
   d4330:	4620      	mov	r0, r4
   d4332:	f000 fcd2 	bl	d4cda <_ZN6StringC1EPK19__FlashStringHelper>
   d4336:	4620      	mov	r0, r4
int read_val = 0;

HttpClient http;
   d4338:	4c1d      	ldr	r4, [pc, #116]	; (d43b0 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x94>)
#include "HttpClient.h"
#include "application.h"

int led1 = D7;
bool light = FALSE;
String status = "off";
   d433a:	491e      	ldr	r1, [pc, #120]	; (d43b4 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x98>)
   d433c:	462a      	mov	r2, r5
   d433e:	f002 f89b 	bl	d6478 <__aeabi_atexit>
int read_val = 0;

HttpClient http;
   d4342:	4620      	mov	r0, r4
   d4344:	f000 f842 	bl	d43cc <_ZN10HttpClientC1Ev>
   d4348:	4620      	mov	r0, r4
   d434a:	4c1b      	ldr	r4, [pc, #108]	; (d43b8 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0x9c>)
   d434c:	491b      	ldr	r1, [pc, #108]	; (d43bc <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0xa0>)
   d434e:	462a      	mov	r2, r5
   d4350:	f002 f892 	bl	d6478 <__aeabi_atexit>
   d4354:	4631      	mov	r1, r6
   d4356:	4620      	mov	r0, r4
   d4358:	f000 fcbf 	bl	d4cda <_ZN6StringC1EPK19__FlashStringHelper>
   d435c:	f104 0010 	add.w	r0, r4, #16
   d4360:	f001 f9b0 	bl	d56c4 <_ZN9IPAddressC1Ev>
   d4364:	4631      	mov	r1, r6
   d4366:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d436a:	f000 fcb6 	bl	d4cda <_ZN6StringC1EPK19__FlashStringHelper>
   d436e:	4631      	mov	r1, r6
   d4370:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4374:	f000 fcb1 	bl	d4cda <_ZN6StringC1EPK19__FlashStringHelper>
  { "Content-Type", "application/x-www-form-urlencoded" },
  { "Accept", "*/*"},
  { NULL, NULL }
};

http_request_t request;
   d4378:	4620      	mov	r0, r4
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
   d437a:	4c11      	ldr	r4, [pc, #68]	; (d43c0 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0xa4>)
   d437c:	4911      	ldr	r1, [pc, #68]	; (d43c4 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0xa8>)
   d437e:	462a      	mov	r2, r5
   d4380:	f002 f87a 	bl	d6478 <__aeabi_atexit>
   d4384:	4631      	mov	r1, r6
   d4386:	1d20      	adds	r0, r4, #4
   d4388:	f000 fca7 	bl	d4cda <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   d438c:	462a      	mov	r2, r5
   d438e:	4620      	mov	r0, r4
   d4390:	490d      	ldr	r1, [pc, #52]	; (d43c8 <_GLOBAL__sub_I_HUE_LIGHT_CRM_1+0xac>)
    request.body = body;
    
    http.put(request, response, headers);
    Serial.println("after http put"); 
    delay(1000);
   d4392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  { "Accept", "*/*"},
  { NULL, NULL }
};

http_request_t request;
http_response_t response;
   d4396:	f002 b86f 	b.w	d6478 <__aeabi_atexit>
   d439a:	bf00      	nop
   d439c:	2003df88 	.word	0x2003df88
   d43a0:	2003e3bc 	.word	0x2003e3bc
   d43a4:	2003df34 	.word	0x2003df34
   d43a8:	000d6af8 	.word	0x000d6af8
   d43ac:	000d6a80 	.word	0x000d6a80
   d43b0:	2003df8c 	.word	0x2003df8c
   d43b4:	000d4c4d 	.word	0x000d4c4d
   d43b8:	2003df3c 	.word	0x2003df3c
   d43bc:	000d4121 	.word	0x000d4121
   d43c0:	2003e3a8 	.word	0x2003e3a8
   d43c4:	000d40c5 	.word	0x000d40c5
   d43c8:	000d40b7 	.word	0x000d40b7

000d43cc <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d43cc:	b510      	push	{r4, lr}
   d43ce:	4604      	mov	r4, r0
   d43d0:	f001 fe8e 	bl	d60f0 <_ZN9TCPClientC1Ev>
{

}
   d43d4:	4620      	mov	r0, r4
   d43d6:	bd10      	pop	{r4, pc}

000d43d8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d43d8:	b538      	push	{r3, r4, r5, lr}
   d43da:	4604      	mov	r4, r0
   d43dc:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d43de:	f000 fd6b 	bl	d4eb8 <_ZN5Print5printEPKc>
    client.print(": ");
   d43e2:	4905      	ldr	r1, [pc, #20]	; (d43f8 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   d43e4:	4620      	mov	r0, r4
   d43e6:	f000 fd67 	bl	d4eb8 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d43ea:	4629      	mov	r1, r5
   d43ec:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d43ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d43f2:	f000 bd74 	b.w	d4ede <_ZN5Print7printlnEPKc>
   d43f6:	bf00      	nop
   d43f8:	000d6bc6 	.word	0x000d6bc6

000d43fc <_ZN10HttpClient10sendHeaderEPKci>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   d43fc:	b538      	push	{r3, r4, r5, lr}
   d43fe:	4605      	mov	r5, r0
   d4400:	4614      	mov	r4, r2
    client.print(aHeaderName);
   d4402:	f000 fd59 	bl	d4eb8 <_ZN5Print5printEPKc>
    client.print(": ");
   d4406:	490b      	ldr	r1, [pc, #44]	; (d4434 <_ZN10HttpClient10sendHeaderEPKci+0x38>)
   d4408:	4628      	mov	r0, r5
   d440a:	f000 fd55 	bl	d4eb8 <_ZN5Print5printEPKc>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
   d440e:	2c00      	cmp	r4, #0
   d4410:	da05      	bge.n	d441e <_ZN10HttpClient10sendHeaderEPKci+0x22>
            t = print('-');
   d4412:	212d      	movs	r1, #45	; 0x2d
   d4414:	4628      	mov	r0, r5
   d4416:	f000 fd53 	bl	d4ec0 <_ZN5Print5printEc>
            val = -n;
   d441a:	4261      	negs	r1, r4
   d441c:	e000      	b.n	d4420 <_ZN10HttpClient10sendHeaderEPKci+0x24>
        } else {
            val = n;
   d441e:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
   d4420:	4628      	mov	r0, r5
   d4422:	220a      	movs	r2, #10
   d4424:	f000 fd65 	bl	d4ef2 <_ZN5Print11printNumberEmh>
    size_t println(char);
    template <typename T, std::enable_if_t<std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value, int> = 0>
    size_t println(T b, int base = DEC) {
        size_t n = print(b, base);
        n += println();
   d4428:	4628      	mov	r0, r5
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d442a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d442e:	f000 bd4a 	b.w	d4ec6 <_ZN5Print7printlnEv>
   d4432:	bf00      	nop
   d4434:	000d6bc6 	.word	0x000d6bc6

000d4438 <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
   d4438:	f000 b92c 	b.w	d4694 <HAL_Pin_Map>

000d443c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4440:	460d      	mov	r5, r1
   d4442:	461e      	mov	r6, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4444:	f04f 33ff 	mov.w	r3, #4294967295
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4448:	b08f      	sub	sp, #60	; 0x3c
   d444a:	4604      	mov	r4, r0
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d444c:	6013      	str	r3, [r2, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d444e:	2100      	movs	r1, #0
   d4450:	4628      	mov	r0, r5
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4452:	4617      	mov	r7, r2
   d4454:	f000 fc80 	bl	d4d58 <_ZNK6String6equalsEPKc>
   d4458:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d445c:	b960      	cbnz	r0, d4478 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
   d445e:	6829      	ldr	r1, [r5, #0]
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d4460:	f1b8 0f00 	cmp.w	r8, #0
   d4464:	d002      	beq.n	d446c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x30>
   d4466:	fa1f f288 	uxth.w	r2, r8
   d446a:	e000      	b.n	d446e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32>
   d446c:	2250      	movs	r2, #80	; 0x50
   d446e:	2300      	movs	r3, #0
   d4470:	4620      	mov	r0, r4
   d4472:	f001 fc8d 	bl	d5d90 <_ZN9TCPClient7connectEPKctm>
   d4476:	e014      	b.n	d44a2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x66>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4478:	4b74      	ldr	r3, [pc, #464]	; (d464c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>)
   d447a:	9308      	str	r3, [sp, #32]
   d447c:	f105 0c14 	add.w	ip, r5, #20
   d4480:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4484:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
   d4488:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d448c:	f8dc 3000 	ldr.w	r3, [ip]
   d4490:	f88e 3000 	strb.w	r3, [lr]
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d4494:	fa1f f288 	uxth.w	r2, r8
   d4498:	2300      	movs	r3, #0
   d449a:	a908      	add	r1, sp, #32
   d449c:	4620      	mov	r0, r4
   d449e:	f001 fcf9 	bl	d5e94 <_ZN9TCPClient7connectE9IPAddresstm>
   d44a2:	3000      	adds	r0, #0
   d44a4:	bf18      	it	ne
   d44a6:	2001      	movne	r0, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   d44a8:	b918      	cbnz	r0, d44b2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   d44aa:	4620      	mov	r0, r4
   d44ac:	f001 fd6c 	bl	d5f88 <_ZN9TCPClient4stopEv>
        // If TCP Client can't connect to host, exit here.
        return;
   d44b0:	e0c8      	b.n	d4644 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x208>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d44b2:	9918      	ldr	r1, [sp, #96]	; 0x60
   d44b4:	4620      	mov	r0, r4
   d44b6:	f000 fcff 	bl	d4eb8 <_ZN5Print5printEPKc>
    client.print(" ");
   d44ba:	4965      	ldr	r1, [pc, #404]	; (d4650 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x214>)
   d44bc:	4620      	mov	r0, r4
   d44be:	f000 fcfb 	bl	d4eb8 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d44c2:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   d44c4:	4620      	mov	r0, r4
   d44c6:	f000 fcf7 	bl	d4eb8 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d44ca:	4962      	ldr	r1, [pc, #392]	; (d4654 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>)
   d44cc:	4620      	mov	r0, r4
   d44ce:	f000 fcf3 	bl	d4eb8 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
    Serial.print(" HTTP/1.0\r\n");
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d44d2:	4961      	ldr	r1, [pc, #388]	; (d4658 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x21c>)
   d44d4:	4a61      	ldr	r2, [pc, #388]	; (d465c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x220>)
   d44d6:	4620      	mov	r0, r4
   d44d8:	f7ff ff7e 	bl	d43d8 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d44dc:	2100      	movs	r1, #0
   d44de:	4628      	mov	r0, r5
   d44e0:	f000 fc3a 	bl	d4d58 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d44e4:	b920      	cbnz	r0, d44f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   d44e6:	682a      	ldr	r2, [r5, #0]
   d44e8:	495d      	ldr	r1, [pc, #372]	; (d4660 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x224>)
   d44ea:	4620      	mov	r0, r4
   d44ec:	f7ff ff74 	bl	d43d8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d44f0:	f105 083c 	add.w	r8, r5, #60	; 0x3c
   d44f4:	2100      	movs	r1, #0
   d44f6:	4640      	mov	r0, r8
   d44f8:	f000 fc2e 	bl	d4d58 <_ZNK6String6equalsEPKc>
   d44fc:	b908      	cbnz	r0, d4502 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc6>
        sendHeader("Content-Length", (aRequest.body).length());
   d44fe:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   d4500:	e005      	b.n	d450e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd2>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d4502:	4958      	ldr	r1, [pc, #352]	; (d4664 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
   d4504:	9818      	ldr	r0, [sp, #96]	; 0x60
   d4506:	f002 f971 	bl	d67ec <strcmp>
   d450a:	4602      	mov	r2, r0
   d450c:	b918      	cbnz	r0, d4516 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xda>
        sendHeader("Content-Length", 0);
   d450e:	4956      	ldr	r1, [pc, #344]	; (d4668 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   d4510:	4620      	mov	r0, r4
   d4512:	f7ff ff73 	bl	d43fc <_ZN10HttpClient10sendHeaderEPKci>
    }

    if (headers != NULL)
   d4516:	b15e      	cbz	r6, d4530 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    {
        int i = 0;
        while (headers[i].header != NULL)
   d4518:	6831      	ldr	r1, [r6, #0]
   d451a:	b149      	cbz	r1, d4530 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
        {
            if (headers[i].value != NULL) {
   d451c:	6872      	ldr	r2, [r6, #4]
                sendHeader(headers[i].header, headers[i].value);
   d451e:	4620      	mov	r0, r4
    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
        {
            if (headers[i].value != NULL) {
   d4520:	b112      	cbz	r2, d4528 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xec>
                sendHeader(headers[i].header, headers[i].value);
   d4522:	f7ff ff59 	bl	d43d8 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d4526:	e001      	b.n	d452c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf0>
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
    client.println(aHeaderName);
   d4528:	f000 fcd9 	bl	d4ede <_ZN5Print7printlnEPKc>
   d452c:	3608      	adds	r6, #8
    }

    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
   d452e:	e7f3      	b.n	d4518 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
            i++;
        }
    }

    // Empty line to finish headers
    client.println();
   d4530:	4620      	mov	r0, r4
   d4532:	f000 fcc8 	bl	d4ec6 <_ZN5Print7printlnEv>
    client.flush();
   d4536:	4620      	mov	r0, r4
   d4538:	f001 fb52 	bl	d5be0 <_ZN9TCPClient5flushEv>
   d453c:	2100      	movs	r1, #0
   d453e:	4640      	mov	r0, r8
   d4540:	f000 fc0a 	bl	d4d58 <_ZNK6String6equalsEPKc>

    //
    // Send HTTP Request Body
    //

    if (aRequest.body != NULL) {
   d4544:	b918      	cbnz	r0, d454e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x112>
        client.println(aRequest.body);
   d4546:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d4548:	4620      	mov	r0, r4
   d454a:	f000 fcc8 	bl	d4ede <_ZN5Print7printlnEPKc>
    #ifdef LOGGING
    Serial.println("HttpClient>\tEnd of HTTP Request.");
    #endif

    // clear response buffer
    memset(&buffer[0], 0, sizeof(buffer));
   d454e:	f104 081c 	add.w	r8, r4, #28
   d4552:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d4556:	2100      	movs	r1, #0
   d4558:	4640      	mov	r0, r8
   d455a:	f002 f916 	bl	d678a <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d455e:	f000 f8e9 	bl	d4734 <HAL_Timer_Get_Milli_Seconds>
   d4562:	4681      	mov	r9, r0
   d4564:	f000 f8e6 	bl	d4734 <HAL_Timer_Get_Milli_Seconds>
    // timeout or an error.

    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
   d4568:	2600      	movs	r6, #0
    // of terminating the connection there is a delay and another attempt
    // to read data.
    // The loop exits when the connection is closed, or if there is a
    // timeout or an error.

    unsigned int bufferPosition = 0;
   d456a:	4635      	mov	r5, r6
        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
            delay(200);
        }
    } while (client.connected() && !timeout && !error);
   d456c:	f241 3a88 	movw	sl, #5000	; 0x1388
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
   d4570:	4620      	mov	r0, r4
   d4572:	f001 fd21 	bl	d5fb8 <_ZN9TCPClient9availableEv>
   d4576:	b1d8      	cbz	r0, d45b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x174>
            char c = client.read();
   d4578:	4620      	mov	r0, r4
   d457a:	f001 fbc6 	bl	d5d0a <_ZN9TCPClient4readEv>
   d457e:	4683      	mov	fp, r0
   d4580:	f000 f8d8 	bl	d4734 <HAL_Timer_Get_Milli_Seconds>

                break;
            }

            // Check that received character fits in buffer before storing.
            if (bufferPosition < sizeof(buffer)-1) {
   d4584:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d4588:	429d      	cmp	r5, r3
   d458a:	4681      	mov	r9, r0
   d458c:	d803      	bhi.n	d4596 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15a>
                buffer[bufferPosition] = c;
   d458e:	1963      	adds	r3, r4, r5
   d4590:	f883 b01c 	strb.w	fp, [r3, #28]
   d4594:	e00a      	b.n	d45ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d4596:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d459a:	429d      	cmp	r5, r3
   d459c:	d106      	bne.n	d45ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d459e:	2300      	movs	r3, #0
   d45a0:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d45a4:	4620      	mov	r0, r4
   d45a6:	f001 fcef 	bl	d5f88 <_ZN9TCPClient4stopEv>
                error = true;
   d45aa:	2601      	movs	r6, #1

                #ifdef LOGGING
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
   d45ac:	3501      	adds	r5, #1
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
   d45ae:	e7df      	b.n	d4570 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
        }
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d45b0:	1963      	adds	r3, r4, r5
   d45b2:	7718      	strb	r0, [r3, #28]
   d45b4:	f000 f8be 	bl	d4734 <HAL_Timer_Get_Milli_Seconds>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
        }
        #endif

        // Check that there hasn't been more than 5s since last read.
        timeout = millis() - lastRead > TIMEOUT;
   d45b8:	ebc9 0b00 	rsb	fp, r9, r0

        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
   d45bc:	b926      	cbnz	r6, d45c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
   d45be:	45d3      	cmp	fp, sl
   d45c0:	d802      	bhi.n	d45c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
            delay(200);
   d45c2:	20c8      	movs	r0, #200	; 0xc8
   d45c4:	f000 fcc8 	bl	d4f58 <delay>
        }
    } while (client.connected() && !timeout && !error);
   d45c8:	4620      	mov	r0, r4
   d45ca:	f001 fb0a 	bl	d5be2 <_ZN9TCPClient9connectedEv>
   d45ce:	b118      	cbz	r0, d45d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
   d45d0:	45d3      	cmp	fp, sl
   d45d2:	d801      	bhi.n	d45d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
   d45d4:	2e00      	cmp	r6, #0
   d45d6:	d0cb      	beq.n	d4570 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
    }
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
    Serial.print(millis() - firstRead);
    Serial.println("ms).");
    #endif
    client.stop();
   d45d8:	4620      	mov	r0, r4
   d45da:	f001 fcd5 	bl	d5f88 <_ZN9TCPClient4stopEv>

    String raw_response(buffer);
   d45de:	4641      	mov	r1, r8
   d45e0:	4668      	mov	r0, sp
   d45e2:	f000 fb7a 	bl	d4cda <_ZN6StringC1EPK19__FlashStringHelper>

    // Not super elegant way of finding the status code, but it works.
    String statusCode = raw_response.substring(9,12);
   d45e6:	230c      	movs	r3, #12
   d45e8:	2209      	movs	r2, #9
   d45ea:	4669      	mov	r1, sp
   d45ec:	a804      	add	r0, sp, #16
   d45ee:	f000 fbd7 	bl	d4da0 <_ZNK6String9substringEjj>
    #ifdef LOGGING
    Serial.print("HttpClient>\tStatus Code: ");
    Serial.println(statusCode);
    #endif

    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d45f2:	491e      	ldr	r1, [pc, #120]	; (d466c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   d45f4:	a808      	add	r0, sp, #32
   d45f6:	f000 fb70 	bl	d4cda <_ZN6StringC1EPK19__FlashStringHelper>
   d45fa:	a908      	add	r1, sp, #32
   d45fc:	4668      	mov	r0, sp
   d45fe:	f000 fbcc 	bl	d4d9a <_ZNK6String7indexOfERKS_>
   d4602:	4604      	mov	r4, r0
   d4604:	a808      	add	r0, sp, #32
   d4606:	f000 fb21 	bl	d4c4c <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d460a:	1c63      	adds	r3, r4, #1
   d460c:	d014      	beq.n	d4638 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fc>
        #endif

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
   d460e:	1d3d      	adds	r5, r7, #4
   d4610:	4917      	ldr	r1, [pc, #92]	; (d4670 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   d4612:	4628      	mov	r0, r5
   d4614:	f000 fb74 	bl	d4d00 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d4618:	1d22      	adds	r2, r4, #4
   d461a:	4669      	mov	r1, sp
   d461c:	a808      	add	r0, sp, #32
   d461e:	f000 fbdf 	bl	d4de0 <_ZNK6String9substringEj>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4622:	a908      	add	r1, sp, #32
   d4624:	4628      	mov	r0, r5
   d4626:	f000 fb93 	bl	d4d50 <_ZN6String6concatERKS_>
   d462a:	a808      	add	r0, sp, #32
   d462c:	f000 fb0e 	bl	d4c4c <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d4630:	9804      	ldr	r0, [sp, #16]
   d4632:	f002 f88d 	bl	d6750 <atoi>
   d4636:	6038      	str	r0, [r7, #0]
    if (bodyPos == -1) {
        #ifdef LOGGING
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
        #endif

        return;
   d4638:	a804      	add	r0, sp, #16
   d463a:	f000 fb07 	bl	d4c4c <_ZN6StringD1Ev>
   d463e:	4668      	mov	r0, sp
   d4640:	f000 fb04 	bl	d4c4c <_ZN6StringD1Ev>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d4644:	b00f      	add	sp, #60	; 0x3c
   d4646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d464a:	bf00      	nop
   d464c:	000d6c68 	.word	0x000d6c68
   d4650:	000d6bc2 	.word	0x000d6bc2
   d4654:	000d6abe 	.word	0x000d6abe
   d4658:	000d6ad0 	.word	0x000d6ad0
   d465c:	000d6aca 	.word	0x000d6aca
   d4660:	000d6adb 	.word	0x000d6adb
   d4664:	000d6aef 	.word	0x000d6aef
   d4668:	000d6ae0 	.word	0x000d6ae0
   d466c:	000d6af4 	.word	0x000d6af4
   d4670:	000d6af8 	.word	0x000d6af8

000d4674 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <netdb_freeaddrinfo+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	689b      	ldr	r3, [r3, #8]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030268 	.word	0x00030268

000d4684 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <netdb_getaddrinfo+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	68db      	ldr	r3, [r3, #12]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030268 	.word	0x00030268

000d4694 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_Pin_Map+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	681b      	ldr	r3, [r3, #0]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003022c 	.word	0x0003022c

000d46a4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_Validate_Pin_Function+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	685b      	ldr	r3, [r3, #4]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	0003022c 	.word	0x0003022c

000d46b4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_Pin_Mode+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	689b      	ldr	r3, [r3, #8]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	0003022c 	.word	0x0003022c

000d46c4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_Get_Pin_Mode+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	68db      	ldr	r3, [r3, #12]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	0003022c 	.word	0x0003022c

000d46d4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <HAL_GPIO_Write+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	691b      	ldr	r3, [r3, #16]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	0003022c 	.word	0x0003022c

000d46e4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <HAL_ADC_Read+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	0003022c 	.word	0x0003022c

000d46f4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <HAL_SPI_Init+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	69db      	ldr	r3, [r3, #28]
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030230 	.word	0x00030230

000d4704 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <HAL_SPI_Is_Enabled+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6a1b      	ldr	r3, [r3, #32]
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030230 	.word	0x00030230

000d4714 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b02      	ldr	r3, [pc, #8]	; (d4720 <if_index_to_name+0xc>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	695b      	ldr	r3, [r3, #20]
   d471c:	9301      	str	r3, [sp, #4]
   d471e:	bd08      	pop	{r3, pc}
   d4720:	0003026c 	.word	0x0003026c

000d4724 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4724:	b508      	push	{r3, lr}
   d4726:	4b02      	ldr	r3, [pc, #8]	; (d4730 <HAL_RNG_GetRandomNumber+0xc>)
   d4728:	681b      	ldr	r3, [r3, #0]
   d472a:	685b      	ldr	r3, [r3, #4]
   d472c:	9301      	str	r3, [sp, #4]
   d472e:	bd08      	pop	{r3, pc}
   d4730:	00030218 	.word	0x00030218

000d4734 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4734:	b508      	push	{r3, lr}
   d4736:	4b02      	ldr	r3, [pc, #8]	; (d4740 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4738:	681b      	ldr	r3, [r3, #0]
   d473a:	695b      	ldr	r3, [r3, #20]
   d473c:	9301      	str	r3, [sp, #4]
   d473e:	bd08      	pop	{r3, pc}
   d4740:	00030218 	.word	0x00030218

000d4744 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4744:	b508      	push	{r3, lr}
   d4746:	4b02      	ldr	r3, [pc, #8]	; (d4750 <os_thread_is_current+0xc>)
   d4748:	681b      	ldr	r3, [r3, #0]
   d474a:	689b      	ldr	r3, [r3, #8]
   d474c:	9301      	str	r3, [sp, #4]
   d474e:	bd08      	pop	{r3, pc}
   d4750:	00030248 	.word	0x00030248

000d4754 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4754:	b508      	push	{r3, lr}
   d4756:	4b02      	ldr	r3, [pc, #8]	; (d4760 <os_thread_join+0xc>)
   d4758:	681b      	ldr	r3, [r3, #0]
   d475a:	691b      	ldr	r3, [r3, #16]
   d475c:	9301      	str	r3, [sp, #4]
   d475e:	bd08      	pop	{r3, pc}
   d4760:	00030248 	.word	0x00030248

000d4764 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b02      	ldr	r3, [pc, #8]	; (d4770 <os_thread_cleanup+0xc>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	695b      	ldr	r3, [r3, #20]
   d476c:	9301      	str	r3, [sp, #4]
   d476e:	bd08      	pop	{r3, pc}
   d4770:	00030248 	.word	0x00030248

000d4774 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4774:	b508      	push	{r3, lr}
   d4776:	4b02      	ldr	r3, [pc, #8]	; (d4780 <os_mutex_recursive_create+0xc>)
   d4778:	681b      	ldr	r3, [r3, #0]
   d477a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d477c:	9301      	str	r3, [sp, #4]
   d477e:	bd08      	pop	{r3, pc}
   d4780:	00030248 	.word	0x00030248

000d4784 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4784:	b508      	push	{r3, lr}
   d4786:	4b02      	ldr	r3, [pc, #8]	; (d4790 <os_mutex_recursive_destroy+0xc>)
   d4788:	681b      	ldr	r3, [r3, #0]
   d478a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d478c:	9301      	str	r3, [sp, #4]
   d478e:	bd08      	pop	{r3, pc}
   d4790:	00030248 	.word	0x00030248

000d4794 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4794:	b508      	push	{r3, lr}
   d4796:	4b02      	ldr	r3, [pc, #8]	; (d47a0 <inet_inet_ntop+0xc>)
   d4798:	681b      	ldr	r3, [r3, #0]
   d479a:	695b      	ldr	r3, [r3, #20]
   d479c:	9301      	str	r3, [sp, #4]
   d479e:	bd08      	pop	{r3, pc}
   d47a0:	00030264 	.word	0x00030264

000d47a4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d47a4:	b508      	push	{r3, lr}
   d47a6:	4b02      	ldr	r3, [pc, #8]	; (d47b0 <inet_htonl+0xc>)
   d47a8:	681b      	ldr	r3, [r3, #0]
   d47aa:	6a1b      	ldr	r3, [r3, #32]
   d47ac:	9301      	str	r3, [sp, #4]
   d47ae:	bd08      	pop	{r3, pc}
   d47b0:	00030264 	.word	0x00030264

000d47b4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b02      	ldr	r3, [pc, #8]	; (d47c0 <inet_htons+0xc>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47bc:	9301      	str	r3, [sp, #4]
   d47be:	bd08      	pop	{r3, pc}
   d47c0:	00030264 	.word	0x00030264

000d47c4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d47c4:	b508      	push	{r3, lr}
   d47c6:	4b02      	ldr	r3, [pc, #8]	; (d47d0 <HAL_USART_Init+0xc>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	681b      	ldr	r3, [r3, #0]
   d47cc:	9301      	str	r3, [sp, #4]
   d47ce:	bd08      	pop	{r3, pc}
   d47d0:	0003023c 	.word	0x0003023c

000d47d4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d47d4:	b508      	push	{r3, lr}
   d47d6:	4b02      	ldr	r3, [pc, #8]	; (d47e0 <HAL_USART_Write_Data+0xc>)
   d47d8:	681b      	ldr	r3, [r3, #0]
   d47da:	68db      	ldr	r3, [r3, #12]
   d47dc:	9301      	str	r3, [sp, #4]
   d47de:	bd08      	pop	{r3, pc}
   d47e0:	0003023c 	.word	0x0003023c

000d47e4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d47e4:	b508      	push	{r3, lr}
   d47e6:	4b02      	ldr	r3, [pc, #8]	; (d47f0 <HAL_USART_Available_Data+0xc>)
   d47e8:	681b      	ldr	r3, [r3, #0]
   d47ea:	691b      	ldr	r3, [r3, #16]
   d47ec:	9301      	str	r3, [sp, #4]
   d47ee:	bd08      	pop	{r3, pc}
   d47f0:	0003023c 	.word	0x0003023c

000d47f4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d47f4:	b508      	push	{r3, lr}
   d47f6:	4b02      	ldr	r3, [pc, #8]	; (d4800 <HAL_USART_Read_Data+0xc>)
   d47f8:	681b      	ldr	r3, [r3, #0]
   d47fa:	695b      	ldr	r3, [r3, #20]
   d47fc:	9301      	str	r3, [sp, #4]
   d47fe:	bd08      	pop	{r3, pc}
   d4800:	0003023c 	.word	0x0003023c

000d4804 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4804:	b508      	push	{r3, lr}
   d4806:	4b02      	ldr	r3, [pc, #8]	; (d4810 <HAL_USART_Peek_Data+0xc>)
   d4808:	681b      	ldr	r3, [r3, #0]
   d480a:	699b      	ldr	r3, [r3, #24]
   d480c:	9301      	str	r3, [sp, #4]
   d480e:	bd08      	pop	{r3, pc}
   d4810:	0003023c 	.word	0x0003023c

000d4814 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4814:	b508      	push	{r3, lr}
   d4816:	4b02      	ldr	r3, [pc, #8]	; (d4820 <HAL_USART_Flush_Data+0xc>)
   d4818:	681b      	ldr	r3, [r3, #0]
   d481a:	69db      	ldr	r3, [r3, #28]
   d481c:	9301      	str	r3, [sp, #4]
   d481e:	bd08      	pop	{r3, pc}
   d4820:	0003023c 	.word	0x0003023c

000d4824 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4824:	b508      	push	{r3, lr}
   d4826:	4b02      	ldr	r3, [pc, #8]	; (d4830 <HAL_USART_Is_Enabled+0xc>)
   d4828:	681b      	ldr	r3, [r3, #0]
   d482a:	6a1b      	ldr	r3, [r3, #32]
   d482c:	9301      	str	r3, [sp, #4]
   d482e:	bd08      	pop	{r3, pc}
   d4830:	0003023c 	.word	0x0003023c

000d4834 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4834:	b508      	push	{r3, lr}
   d4836:	4b02      	ldr	r3, [pc, #8]	; (d4840 <HAL_USART_Available_Data_For_Write+0xc>)
   d4838:	681b      	ldr	r3, [r3, #0]
   d483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d483c:	9301      	str	r3, [sp, #4]
   d483e:	bd08      	pop	{r3, pc}
   d4840:	0003023c 	.word	0x0003023c

000d4844 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4844:	b508      	push	{r3, lr}
   d4846:	4b02      	ldr	r3, [pc, #8]	; (d4850 <HAL_I2C_Write_Data+0xc>)
   d4848:	681b      	ldr	r3, [r3, #0]
   d484a:	6a1b      	ldr	r3, [r3, #32]
   d484c:	9301      	str	r3, [sp, #4]
   d484e:	bd08      	pop	{r3, pc}
   d4850:	00030228 	.word	0x00030228

000d4854 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4854:	b508      	push	{r3, lr}
   d4856:	4b02      	ldr	r3, [pc, #8]	; (d4860 <HAL_I2C_Available_Data+0xc>)
   d4858:	681b      	ldr	r3, [r3, #0]
   d485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d485c:	9301      	str	r3, [sp, #4]
   d485e:	bd08      	pop	{r3, pc}
   d4860:	00030228 	.word	0x00030228

000d4864 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4864:	b508      	push	{r3, lr}
   d4866:	4b02      	ldr	r3, [pc, #8]	; (d4870 <HAL_I2C_Read_Data+0xc>)
   d4868:	681b      	ldr	r3, [r3, #0]
   d486a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d486c:	9301      	str	r3, [sp, #4]
   d486e:	bd08      	pop	{r3, pc}
   d4870:	00030228 	.word	0x00030228

000d4874 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4874:	b508      	push	{r3, lr}
   d4876:	4b02      	ldr	r3, [pc, #8]	; (d4880 <HAL_I2C_Peek_Data+0xc>)
   d4878:	681b      	ldr	r3, [r3, #0]
   d487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d487c:	9301      	str	r3, [sp, #4]
   d487e:	bd08      	pop	{r3, pc}
   d4880:	00030228 	.word	0x00030228

000d4884 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4884:	b508      	push	{r3, lr}
   d4886:	4b02      	ldr	r3, [pc, #8]	; (d4890 <HAL_I2C_Flush_Data+0xc>)
   d4888:	681b      	ldr	r3, [r3, #0]
   d488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d488c:	9301      	str	r3, [sp, #4]
   d488e:	bd08      	pop	{r3, pc}
   d4890:	00030228 	.word	0x00030228

000d4894 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4894:	b508      	push	{r3, lr}
   d4896:	4b02      	ldr	r3, [pc, #8]	; (d48a0 <HAL_I2C_Is_Enabled+0xc>)
   d4898:	681b      	ldr	r3, [r3, #0]
   d489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d489c:	9301      	str	r3, [sp, #4]
   d489e:	bd08      	pop	{r3, pc}
   d48a0:	00030228 	.word	0x00030228

000d48a4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d48a4:	b508      	push	{r3, lr}
   d48a6:	4b02      	ldr	r3, [pc, #8]	; (d48b0 <HAL_I2C_Init+0xc>)
   d48a8:	681b      	ldr	r3, [r3, #0]
   d48aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48ac:	9301      	str	r3, [sp, #4]
   d48ae:	bd08      	pop	{r3, pc}
   d48b0:	00030228 	.word	0x00030228

000d48b4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d48b4:	b508      	push	{r3, lr}
   d48b6:	4b02      	ldr	r3, [pc, #8]	; (d48c0 <sock_setsockopt+0xc>)
   d48b8:	681b      	ldr	r3, [r3, #0]
   d48ba:	699b      	ldr	r3, [r3, #24]
   d48bc:	9301      	str	r3, [sp, #4]
   d48be:	bd08      	pop	{r3, pc}
   d48c0:	00030238 	.word	0x00030238

000d48c4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d48c4:	b508      	push	{r3, lr}
   d48c6:	4b02      	ldr	r3, [pc, #8]	; (d48d0 <sock_close+0xc>)
   d48c8:	681b      	ldr	r3, [r3, #0]
   d48ca:	69db      	ldr	r3, [r3, #28]
   d48cc:	9301      	str	r3, [sp, #4]
   d48ce:	bd08      	pop	{r3, pc}
   d48d0:	00030238 	.word	0x00030238

000d48d4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d48d4:	b508      	push	{r3, lr}
   d48d6:	4b02      	ldr	r3, [pc, #8]	; (d48e0 <sock_connect+0xc>)
   d48d8:	681b      	ldr	r3, [r3, #0]
   d48da:	6a1b      	ldr	r3, [r3, #32]
   d48dc:	9301      	str	r3, [sp, #4]
   d48de:	bd08      	pop	{r3, pc}
   d48e0:	00030238 	.word	0x00030238

000d48e4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d48e4:	b508      	push	{r3, lr}
   d48e6:	4b02      	ldr	r3, [pc, #8]	; (d48f0 <sock_recv+0xc>)
   d48e8:	681b      	ldr	r3, [r3, #0]
   d48ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48ec:	9301      	str	r3, [sp, #4]
   d48ee:	bd08      	pop	{r3, pc}
   d48f0:	00030238 	.word	0x00030238

000d48f4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d48f4:	b508      	push	{r3, lr}
   d48f6:	4b02      	ldr	r3, [pc, #8]	; (d4900 <sock_send+0xc>)
   d48f8:	681b      	ldr	r3, [r3, #0]
   d48fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d48fc:	9301      	str	r3, [sp, #4]
   d48fe:	bd08      	pop	{r3, pc}
   d4900:	00030238 	.word	0x00030238

000d4904 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <sock_socket+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030238 	.word	0x00030238

000d4914 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <HAL_USB_USART_Init+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	681b      	ldr	r3, [r3, #0]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	0003024c 	.word	0x0003024c

000d4924 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <HAL_USB_USART_Begin+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	685b      	ldr	r3, [r3, #4]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	0003024c 	.word	0x0003024c

000d4934 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <HAL_USB_USART_Available_Data+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	691b      	ldr	r3, [r3, #16]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	0003024c 	.word	0x0003024c

000d4944 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	695b      	ldr	r3, [r3, #20]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	0003024c 	.word	0x0003024c

000d4954 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <HAL_USB_USART_Receive_Data+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	699b      	ldr	r3, [r3, #24]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	0003024c 	.word	0x0003024c

000d4964 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <HAL_USB_USART_Send_Data+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	69db      	ldr	r3, [r3, #28]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	0003024c 	.word	0x0003024c

000d4974 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <HAL_USB_USART_Flush_Data+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	6a1b      	ldr	r3, [r3, #32]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	0003024c 	.word	0x0003024c

000d4984 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <log_message+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030260 	.word	0x00030260

000d4994 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <set_system_mode+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	685b      	ldr	r3, [r3, #4]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030220 	.word	0x00030220

000d49a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <system_delay_ms+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	695b      	ldr	r3, [r3, #20]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030220 	.word	0x00030220

000d49b4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <application_thread_current+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030220 	.word	0x00030220

000d49c4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <application_thread_invoke+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030220 	.word	0x00030220

000d49d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b03      	ldr	r3, [pc, #12]	; (d49e4 <system_ctrl_set_app_request_handler+0x10>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d49de:	9301      	str	r3, [sp, #4]
   d49e0:	bd08      	pop	{r3, pc}
   d49e2:	0000      	.short	0x0000
   d49e4:	00030220 	.word	0x00030220

000d49e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d49e8:	b508      	push	{r3, lr}
   d49ea:	4b03      	ldr	r3, [pc, #12]	; (d49f8 <system_ctrl_set_result+0x10>)
   d49ec:	681b      	ldr	r3, [r3, #0]
   d49ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d49f2:	9301      	str	r3, [sp, #4]
   d49f4:	bd08      	pop	{r3, pc}
   d49f6:	0000      	.short	0x0000
   d49f8:	00030220 	.word	0x00030220

000d49fc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <network_connect+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	685b      	ldr	r3, [r3, #4]
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	00030240 	.word	0x00030240

000d4a0c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <network_connecting+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	689b      	ldr	r3, [r3, #8]
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	00030240 	.word	0x00030240

000d4a1c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <network_disconnect+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	68db      	ldr	r3, [r3, #12]
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	00030240 	.word	0x00030240

000d4a2c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <network_ready+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	691b      	ldr	r3, [r3, #16]
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	00030240 	.word	0x00030240

000d4a3c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <network_on+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	695b      	ldr	r3, [r3, #20]
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	00030240 	.word	0x00030240

000d4a4c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <network_off+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	699b      	ldr	r3, [r3, #24]
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	00030240 	.word	0x00030240

000d4a5c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <network_listen+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	69db      	ldr	r3, [r3, #28]
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	00030240 	.word	0x00030240

000d4a6c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <network_listening+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	6a1b      	ldr	r3, [r3, #32]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	00030240 	.word	0x00030240

000d4a7c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <network_set_listen_timeout+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	00030240 	.word	0x00030240

000d4a8c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <network_get_listen_timeout+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	00030240 	.word	0x00030240

000d4a9c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <spark_variable+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	681b      	ldr	r3, [r3, #0]
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	00030244 	.word	0x00030244

000d4aac <spark_cloud_flag_connected>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <spark_cloud_flag_connected+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	695b      	ldr	r3, [r3, #20]
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	00030244 	.word	0x00030244

000d4abc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <spark_send_event+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	6a1b      	ldr	r3, [r3, #32]
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	00030244 	.word	0x00030244

000d4acc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	00030244 	.word	0x00030244

000d4adc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <malloc+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	681b      	ldr	r3, [r3, #0]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	0003021c 	.word	0x0003021c

000d4aec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <free+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	685b      	ldr	r3, [r3, #4]
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	0003021c 	.word	0x0003021c

000d4afc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <realloc+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	689b      	ldr	r3, [r3, #8]
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	0003021c 	.word	0x0003021c

000d4b0c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <sprintf+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	68db      	ldr	r3, [r3, #12]
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	0003021c 	.word	0x0003021c

000d4b1c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <abort+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	0003021c 	.word	0x0003021c

000d4b2c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <_malloc_r+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	0003021c 	.word	0x0003021c

000d4b3c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <__errno+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	0003021c 	.word	0x0003021c

000d4b4c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4b4c:	2200      	movs	r2, #0
   d4b4e:	4611      	mov	r1, r2
   d4b50:	6840      	ldr	r0, [r0, #4]
   d4b52:	f7ff bf8b 	b.w	d4a6c <network_listening>

000d4b56 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4b56:	2200      	movs	r2, #0
   d4b58:	4611      	mov	r1, r2
   d4b5a:	6840      	ldr	r0, [r0, #4]
   d4b5c:	f7ff bf96 	b.w	d4a8c <network_get_listen_timeout>

000d4b60 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4b60:	2200      	movs	r2, #0
   d4b62:	6840      	ldr	r0, [r0, #4]
   d4b64:	f7ff bf8a 	b.w	d4a7c <network_set_listen_timeout>

000d4b68 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4b68:	2200      	movs	r2, #0
   d4b6a:	f081 0101 	eor.w	r1, r1, #1
   d4b6e:	6840      	ldr	r0, [r0, #4]
   d4b70:	f7ff bf74 	b.w	d4a5c <network_listen>

000d4b74 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4b74:	2300      	movs	r3, #0
   d4b76:	461a      	mov	r2, r3
   d4b78:	4619      	mov	r1, r3
   d4b7a:	6840      	ldr	r0, [r0, #4]
   d4b7c:	f7ff bf66 	b.w	d4a4c <network_off>

000d4b80 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4b80:	2300      	movs	r3, #0
   d4b82:	461a      	mov	r2, r3
   d4b84:	4619      	mov	r1, r3
   d4b86:	6840      	ldr	r0, [r0, #4]
   d4b88:	f7ff bf58 	b.w	d4a3c <network_on>

000d4b8c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b8c:	2200      	movs	r2, #0
   d4b8e:	4611      	mov	r1, r2
   d4b90:	6840      	ldr	r0, [r0, #4]
   d4b92:	f7ff bf4b 	b.w	d4a2c <network_ready>

000d4b96 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b96:	2200      	movs	r2, #0
   d4b98:	4611      	mov	r1, r2
   d4b9a:	6840      	ldr	r0, [r0, #4]
   d4b9c:	f7ff bf36 	b.w	d4a0c <network_connecting>

000d4ba0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ba0:	2200      	movs	r2, #0
   d4ba2:	2102      	movs	r1, #2
   d4ba4:	6840      	ldr	r0, [r0, #4]
   d4ba6:	f7ff bf39 	b.w	d4a1c <network_disconnect>

000d4baa <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4baa:	2300      	movs	r3, #0
   d4bac:	461a      	mov	r2, r3
   d4bae:	6840      	ldr	r0, [r0, #4]
   d4bb0:	f7ff bf24 	b.w	d49fc <network_connect>

000d4bb4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4bb4:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4bb6:	2203      	movs	r2, #3
   d4bb8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4bba:	4a02      	ldr	r2, [pc, #8]	; (d4bc4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4bbc:	601a      	str	r2, [r3, #0]
   d4bbe:	4770      	bx	lr
   d4bc0:	2003e3cc 	.word	0x2003e3cc
   d4bc4:	000d6b04 	.word	0x000d6b04

000d4bc8 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4bc8:	4770      	bx	lr

000d4bca <_ZN8SPIClassD0Ev>:
   d4bca:	b510      	push	{r4, lr}
   d4bcc:	210c      	movs	r1, #12
   d4bce:	4604      	mov	r4, r0
   d4bd0:	f001 fc60 	bl	d6494 <_ZdlPvj>
   d4bd4:	4620      	mov	r0, r4
   d4bd6:	bd10      	pop	{r4, pc}

000d4bd8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4bd8:	b510      	push	{r4, lr}
   d4bda:	4b05      	ldr	r3, [pc, #20]	; (d4bf0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d4bdc:	6003      	str	r3, [r0, #0]
   d4bde:	4604      	mov	r4, r0
{
    _spi = spi;
   d4be0:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d4be2:	4608      	mov	r0, r1
   d4be4:	f7ff fd86 	bl	d46f4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4be8:	2300      	movs	r3, #0
   d4bea:	60a3      	str	r3, [r4, #8]
}
   d4bec:	4620      	mov	r0, r4
   d4bee:	bd10      	pop	{r4, pc}
   d4bf0:	000d6b38 	.word	0x000d6b38

000d4bf4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4bf4:	7900      	ldrb	r0, [r0, #4]
   d4bf6:	f7ff bd85 	b.w	d4704 <HAL_SPI_Is_Enabled>

000d4bfa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4bfa:	b510      	push	{r4, lr}
   d4bfc:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4bfe:	6800      	ldr	r0, [r0, #0]
   d4c00:	b118      	cbz	r0, d4c0a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4c02:	f7ff ff73 	bl	d4aec <free>
            wakeupSource_ = nullptr;
   d4c06:	2300      	movs	r3, #0
   d4c08:	6023      	str	r3, [r4, #0]
   d4c0a:	bd10      	pop	{r4, pc}

000d4c0c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4c0c:	b510      	push	{r4, lr}
   d4c0e:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4c10:	f7ff fff3 	bl	d4bfa <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4c14:	4620      	mov	r0, r4
   d4c16:	bd10      	pop	{r4, pc}

000d4c18 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4c18:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c1a:	4c09      	ldr	r4, [pc, #36]	; (d4c40 <_GLOBAL__sub_I_System+0x28>)
   d4c1c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c22:	6020      	str	r0, [r4, #0]
   d4c24:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4c26:	71a0      	strb	r0, [r4, #6]
   d4c28:	8120      	strh	r0, [r4, #8]
   d4c2a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4c2c:	f7ff feb2 	bl	d4994 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4c30:	4620      	mov	r0, r4
   d4c32:	4a04      	ldr	r2, [pc, #16]	; (d4c44 <_GLOBAL__sub_I_System+0x2c>)
   d4c34:	4904      	ldr	r1, [pc, #16]	; (d4c48 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4c3a:	f001 bc1d 	b.w	d6478 <__aeabi_atexit>
   d4c3e:	bf00      	nop
   d4c40:	2003e3d4 	.word	0x2003e3d4
   d4c44:	2003df34 	.word	0x2003df34
   d4c48:	000d4c0d 	.word	0x000d4c0d

000d4c4c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4c4c:	b510      	push	{r4, lr}
   d4c4e:	4604      	mov	r4, r0
{
	free(buffer);
   d4c50:	6800      	ldr	r0, [r0, #0]
   d4c52:	f7ff ff4b 	bl	d4aec <free>
}
   d4c56:	4620      	mov	r0, r4
   d4c58:	bd10      	pop	{r4, pc}

000d4c5a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4c5a:	b510      	push	{r4, lr}
   d4c5c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4c5e:	6800      	ldr	r0, [r0, #0]
   d4c60:	b108      	cbz	r0, d4c66 <_ZN6String10invalidateEv+0xc>
   d4c62:	f7ff ff43 	bl	d4aec <free>
	buffer = NULL;
   d4c66:	2300      	movs	r3, #0
   d4c68:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4c6a:	60a3      	str	r3, [r4, #8]
   d4c6c:	6063      	str	r3, [r4, #4]
   d4c6e:	bd10      	pop	{r4, pc}

000d4c70 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4c70:	b538      	push	{r3, r4, r5, lr}
   d4c72:	4604      	mov	r4, r0
   d4c74:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4c76:	6800      	ldr	r0, [r0, #0]
   d4c78:	3101      	adds	r1, #1
   d4c7a:	f7ff ff3f 	bl	d4afc <realloc>
	if (newbuffer) {
   d4c7e:	b110      	cbz	r0, d4c86 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4c80:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4c84:	2001      	movs	r0, #1
	}
	return 0;
}
   d4c86:	bd38      	pop	{r3, r4, r5, pc}

000d4c88 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4c88:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4c8a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4c8c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4c8e:	b113      	cbz	r3, d4c96 <_ZN6String7reserveEj+0xe>
   d4c90:	6843      	ldr	r3, [r0, #4]
   d4c92:	428b      	cmp	r3, r1
   d4c94:	d207      	bcs.n	d4ca6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4c96:	4620      	mov	r0, r4
   d4c98:	f7ff ffea 	bl	d4c70 <_ZN6String12changeBufferEj>
   d4c9c:	b120      	cbz	r0, d4ca8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4c9e:	68a3      	ldr	r3, [r4, #8]
   d4ca0:	b90b      	cbnz	r3, d4ca6 <_ZN6String7reserveEj+0x1e>
   d4ca2:	6822      	ldr	r2, [r4, #0]
   d4ca4:	7013      	strb	r3, [r2, #0]
   d4ca6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4ca8:	bd10      	pop	{r4, pc}

000d4caa <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4caa:	b570      	push	{r4, r5, r6, lr}
   d4cac:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4cae:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4cb0:	4604      	mov	r4, r0
   d4cb2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4cb4:	f7ff ffe8 	bl	d4c88 <_ZN6String7reserveEj>
   d4cb8:	b918      	cbnz	r0, d4cc2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4cba:	4620      	mov	r0, r4
   d4cbc:	f7ff ffcd 	bl	d4c5a <_ZN6String10invalidateEv>
		return *this;
   d4cc0:	e009      	b.n	d4cd6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4cc2:	462a      	mov	r2, r5
   d4cc4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4cc6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4cc8:	6820      	ldr	r0, [r4, #0]
   d4cca:	f001 fd53 	bl	d6774 <memcpy>
	buffer[len] = 0;
   d4cce:	6822      	ldr	r2, [r4, #0]
   d4cd0:	68a3      	ldr	r3, [r4, #8]
   d4cd2:	2100      	movs	r1, #0
   d4cd4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4cd6:	4620      	mov	r0, r4
   d4cd8:	bd70      	pop	{r4, r5, r6, pc}

000d4cda <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4cda:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4cdc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4cde:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ce0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4ce2:	6043      	str	r3, [r0, #4]
	len = 0;
   d4ce4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4ce6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4ce8:	460d      	mov	r5, r1
   d4cea:	b139      	cbz	r1, d4cfc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4cec:	4608      	mov	r0, r1
   d4cee:	f001 fdaa 	bl	d6846 <strlen>
   d4cf2:	4629      	mov	r1, r5
   d4cf4:	4602      	mov	r2, r0
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	f7ff ffd7 	bl	d4caa <_ZN6String4copyEPKcj>
}
   d4cfc:	4620      	mov	r0, r4
   d4cfe:	bd38      	pop	{r3, r4, r5, pc}

000d4d00 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4d00:	b538      	push	{r3, r4, r5, lr}
   d4d02:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4d04:	460c      	mov	r4, r1
   d4d06:	b141      	cbz	r1, d4d1a <_ZN6StringaSEPKc+0x1a>
   d4d08:	4608      	mov	r0, r1
   d4d0a:	f001 fd9c 	bl	d6846 <strlen>
   d4d0e:	4621      	mov	r1, r4
   d4d10:	4602      	mov	r2, r0
   d4d12:	4628      	mov	r0, r5
   d4d14:	f7ff ffc9 	bl	d4caa <_ZN6String4copyEPKcj>
   d4d18:	e001      	b.n	d4d1e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4d1a:	f7ff ff9e 	bl	d4c5a <_ZN6String10invalidateEv>

	return *this;
}
   d4d1e:	4628      	mov	r0, r5
   d4d20:	bd38      	pop	{r3, r4, r5, pc}

000d4d22 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4d22:	b570      	push	{r4, r5, r6, lr}
   d4d24:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4d26:	460e      	mov	r6, r1
   d4d28:	b909      	cbnz	r1, d4d2e <_ZN6String6concatEPKcj+0xc>
   d4d2a:	2000      	movs	r0, #0
   d4d2c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4d2e:	b16a      	cbz	r2, d4d4c <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d4d30:	6883      	ldr	r3, [r0, #8]
   d4d32:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d4d34:	4629      	mov	r1, r5
   d4d36:	f7ff ffa7 	bl	d4c88 <_ZN6String7reserveEj>
   d4d3a:	2800      	cmp	r0, #0
   d4d3c:	d0f5      	beq.n	d4d2a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4d3e:	6820      	ldr	r0, [r4, #0]
   d4d40:	68a3      	ldr	r3, [r4, #8]
   d4d42:	4631      	mov	r1, r6
   d4d44:	4418      	add	r0, r3
   d4d46:	f001 fd5b 	bl	d6800 <strcpy>
	len = newlen;
   d4d4a:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d4d4c:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d4d4e:	bd70      	pop	{r4, r5, r6, pc}

000d4d50 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   d4d50:	688a      	ldr	r2, [r1, #8]
   d4d52:	6809      	ldr	r1, [r1, #0]
   d4d54:	f7ff bfe5 	b.w	d4d22 <_ZN6String6concatEPKcj>

000d4d58 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4d58:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4d5a:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d4d5c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d4d5e:	b912      	cbnz	r2, d4d66 <_ZNK6String6equalsEPKc+0xe>
   d4d60:	b919      	cbnz	r1, d4d6a <_ZNK6String6equalsEPKc+0x12>
   d4d62:	2001      	movs	r0, #1
   d4d64:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d4d66:	b911      	cbnz	r1, d4d6e <_ZNK6String6equalsEPKc+0x16>
   d4d68:	6803      	ldr	r3, [r0, #0]
   d4d6a:	7818      	ldrb	r0, [r3, #0]
   d4d6c:	e002      	b.n	d4d74 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d4d6e:	6800      	ldr	r0, [r0, #0]
   d4d70:	f001 fd3c 	bl	d67ec <strcmp>
   d4d74:	fab0 f080 	clz	r0, r0
   d4d78:	0940      	lsrs	r0, r0, #5
}
   d4d7a:	bd08      	pop	{r3, pc}

000d4d7c <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d4d7c:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d4d7e:	6883      	ldr	r3, [r0, #8]
   d4d80:	4293      	cmp	r3, r2
   d4d82:	d907      	bls.n	d4d94 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d4d84:	6804      	ldr	r4, [r0, #0]
   d4d86:	6809      	ldr	r1, [r1, #0]
   d4d88:	18a0      	adds	r0, r4, r2
   d4d8a:	f001 fd64 	bl	d6856 <strstr>
	if (found == NULL) return -1;
   d4d8e:	b108      	cbz	r0, d4d94 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d4d90:	1b00      	subs	r0, r0, r4
   d4d92:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
   d4d94:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
   d4d98:	bd10      	pop	{r4, pc}

000d4d9a <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
   d4d9a:	2200      	movs	r2, #0
   d4d9c:	f7ff bfee 	b.w	d4d7c <_ZNK6String7indexOfERKS_j>

000d4da0 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d4da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d4da2:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d4da4:	460f      	mov	r7, r1
   d4da6:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d4da8:	490c      	ldr	r1, [pc, #48]	; (d4ddc <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d4daa:	bf88      	it	hi
   d4dac:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d4dae:	4614      	mov	r4, r2
   d4db0:	4606      	mov	r6, r0
	if (left > right) {
   d4db2:	bf84      	itt	hi
   d4db4:	462c      	movhi	r4, r5
   d4db6:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d4db8:	f7ff ff8f 	bl	d4cda <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d4dbc:	68ba      	ldr	r2, [r7, #8]
   d4dbe:	4294      	cmp	r4, r2
   d4dc0:	d80a      	bhi.n	d4dd8 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d4dc2:	6839      	ldr	r1, [r7, #0]
   d4dc4:	4295      	cmp	r5, r2
   d4dc6:	bf94      	ite	ls
   d4dc8:	ebc4 0205 	rsbls	r2, r4, r5
   d4dcc:	ebc4 0202 	rsbhi	r2, r4, r2
   d4dd0:	4421      	add	r1, r4
   d4dd2:	4630      	mov	r0, r6
   d4dd4:	f7ff ff69 	bl	d4caa <_ZN6String4copyEPKcj>
	return out;
}
   d4dd8:	4630      	mov	r0, r6
   d4dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4ddc:	000d6af8 	.word	0x000d6af8

000d4de0 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   d4de0:	b510      	push	{r4, lr}
   d4de2:	4604      	mov	r4, r0
	return substring(left, len);
   d4de4:	688b      	ldr	r3, [r1, #8]
   d4de6:	f7ff ffdb 	bl	d4da0 <_ZNK6String9substringEjj>
}
   d4dea:	4620      	mov	r0, r4
   d4dec:	bd10      	pop	{r4, pc}

000d4dee <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4dee:	b510      	push	{r4, lr}
   d4df0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4df2:	6800      	ldr	r0, [r0, #0]
   d4df4:	b108      	cbz	r0, d4dfa <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4df6:	f7ff fcc5 	bl	d4784 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4dfa:	4620      	mov	r0, r4
   d4dfc:	bd10      	pop	{r4, pc}

000d4dfe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4dfe:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4e00:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4e02:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4e04:	689b      	ldr	r3, [r3, #8]
   d4e06:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4e08:	68a3      	ldr	r3, [r4, #8]
   d4e0a:	3b01      	subs	r3, #1
   d4e0c:	60a3      	str	r3, [r4, #8]
   d4e0e:	b92b      	cbnz	r3, d4e1c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4e10:	6823      	ldr	r3, [r4, #0]
   d4e12:	4620      	mov	r0, r4
   d4e14:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4e1a:	4718      	bx	r3
   d4e1c:	bd10      	pop	{r4, pc}

000d4e1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4e1e:	680b      	ldr	r3, [r1, #0]
   d4e20:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4e22:	b113      	cbz	r3, d4e2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4e24:	685a      	ldr	r2, [r3, #4]
   d4e26:	3201      	adds	r2, #1
   d4e28:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4e2a:	4770      	bx	lr

000d4e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4e2c:	b510      	push	{r4, lr}
   d4e2e:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4e30:	6800      	ldr	r0, [r0, #0]
   d4e32:	b128      	cbz	r0, d4e40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4e34:	6843      	ldr	r3, [r0, #4]
   d4e36:	3b01      	subs	r3, #1
   d4e38:	6043      	str	r3, [r0, #4]
   d4e3a:	b90b      	cbnz	r3, d4e40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4e3c:	f7ff ffdf 	bl	d4dfe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4e40:	4620      	mov	r0, r4
   d4e42:	bd10      	pop	{r4, pc}

000d4e44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4e44:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4e46:	4c06      	ldr	r4, [pc, #24]	; (d4e60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4e48:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4e4a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4e4c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4e4e:	f7ff fc91 	bl	d4774 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4e52:	4620      	mov	r0, r4
   d4e54:	4a03      	ldr	r2, [pc, #12]	; (d4e64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4e56:	4904      	ldr	r1, [pc, #16]	; (d4e68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4e5c:	f001 bb0c 	b.w	d6478 <__aeabi_atexit>
   d4e60:	2003e3e0 	.word	0x2003e3e0
   d4e64:	2003df34 	.word	0x2003df34
   d4e68:	000d4def 	.word	0x000d4def

000d4e6c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4e6e:	4606      	mov	r6, r0
   d4e70:	460d      	mov	r5, r1
   d4e72:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4e74:	2400      	movs	r4, #0
  while (size--) {
   d4e76:	42bd      	cmp	r5, r7
   d4e78:	d00c      	beq.n	d4e94 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4e7a:	6833      	ldr	r3, [r6, #0]
   d4e7c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4e80:	689b      	ldr	r3, [r3, #8]
   d4e82:	4630      	mov	r0, r6
   d4e84:	4798      	blx	r3
     if (chunk>=0)
   d4e86:	2800      	cmp	r0, #0
   d4e88:	db01      	blt.n	d4e8e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4e8a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4e8c:	e7f3      	b.n	d4e76 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4e8e:	2c00      	cmp	r4, #0
   d4e90:	bf08      	it	eq
   d4e92:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4e94:	4620      	mov	r0, r4
   d4e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4e98 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4e98:	b570      	push	{r4, r5, r6, lr}
   d4e9a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4e9c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4e9e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4ea0:	b149      	cbz	r1, d4eb6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4ea2:	f001 fcd0 	bl	d6846 <strlen>
   d4ea6:	682b      	ldr	r3, [r5, #0]
   d4ea8:	4602      	mov	r2, r0
   d4eaa:	4621      	mov	r1, r4
   d4eac:	4628      	mov	r0, r5
   d4eae:	68db      	ldr	r3, [r3, #12]
    }
   d4eb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4eb4:	4718      	bx	r3
    }
   d4eb6:	bd70      	pop	{r4, r5, r6, pc}

000d4eb8 <_ZN5Print5printEPKc>:
   d4eb8:	b508      	push	{r3, lr}
   d4eba:	f7ff ffed 	bl	d4e98 <_ZN5Print5writeEPKc>
   d4ebe:	bd08      	pop	{r3, pc}

000d4ec0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4ec0:	6803      	ldr	r3, [r0, #0]
   d4ec2:	689b      	ldr	r3, [r3, #8]
   d4ec4:	4718      	bx	r3

000d4ec6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4ec6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4ec8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4eca:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4ecc:	f7ff fff8 	bl	d4ec0 <_ZN5Print5printEc>
  n += print('\n');
   d4ed0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d4ed2:	4604      	mov	r4, r0
  n += print('\n');
   d4ed4:	4628      	mov	r0, r5
   d4ed6:	f7ff fff3 	bl	d4ec0 <_ZN5Print5printEc>
  return n;
}
   d4eda:	4420      	add	r0, r4
   d4edc:	bd38      	pop	{r3, r4, r5, pc}

000d4ede <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d4ede:	b538      	push	{r3, r4, r5, lr}
   d4ee0:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d4ee2:	f7ff ffd9 	bl	d4e98 <_ZN5Print5writeEPKc>
   d4ee6:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d4ee8:	4628      	mov	r0, r5
   d4eea:	f7ff ffec 	bl	d4ec6 <_ZN5Print7printlnEv>
  return n;
}
   d4eee:	4420      	add	r0, r4
   d4ef0:	bd38      	pop	{r3, r4, r5, pc}

000d4ef2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4ef2:	b530      	push	{r4, r5, lr}
   d4ef4:	b08b      	sub	sp, #44	; 0x2c
   d4ef6:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4ef8:	2100      	movs	r1, #0
   d4efa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4efe:	2a01      	cmp	r2, #1
   d4f00:	bf98      	it	ls
   d4f02:	220a      	movls	r2, #10
   d4f04:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d4f08:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d4f0c:	fb05 3312 	mls	r3, r5, r2, r3
   d4f10:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4f14:	2b09      	cmp	r3, #9
   d4f16:	bf94      	ite	ls
   d4f18:	3330      	addls	r3, #48	; 0x30
   d4f1a:	3337      	addhi	r3, #55	; 0x37
   d4f1c:	b2db      	uxtb	r3, r3
   d4f1e:	4621      	mov	r1, r4
   d4f20:	f804 3901 	strb.w	r3, [r4], #-1
   d4f24:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d4f26:	2d00      	cmp	r5, #0
   d4f28:	d1ee      	bne.n	d4f08 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d4f2a:	f7ff ffb5 	bl	d4e98 <_ZN5Print5writeEPKc>
}
   d4f2e:	b00b      	add	sp, #44	; 0x2c
   d4f30:	bd30      	pop	{r4, r5, pc}
	...

000d4f34 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f34:	4b01      	ldr	r3, [pc, #4]	; (d4f3c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f36:	4a02      	ldr	r2, [pc, #8]	; (d4f40 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f38:	601a      	str	r2, [r3, #0]
   d4f3a:	4770      	bx	lr
   d4f3c:	2003e3e4 	.word	0x2003e3e4
   d4f40:	000d6bb3 	.word	0x000d6bb3

000d4f44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f44:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f46:	681a      	ldr	r2, [r3, #0]
   d4f48:	4b02      	ldr	r3, [pc, #8]	; (d4f54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4f4a:	601a      	str	r2, [r3, #0]
   d4f4c:	4770      	bx	lr
   d4f4e:	bf00      	nop
   d4f50:	2003dec8 	.word	0x2003dec8
   d4f54:	2003e3e8 	.word	0x2003e3e8

000d4f58 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4f58:	2100      	movs	r1, #0
   d4f5a:	f7ff bd23 	b.w	d49a4 <system_delay_ms>

000d4f5e <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f5e:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4f60:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4f62:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4f64:	b113      	cbz	r3, d4f6c <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4f66:	2203      	movs	r2, #3
   d4f68:	4601      	mov	r1, r0
   d4f6a:	4798      	blx	r3
    }
   d4f6c:	4620      	mov	r0, r4
   d4f6e:	bd10      	pop	{r4, pc}

000d4f70 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4f70:	b510      	push	{r4, lr}
   d4f72:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f74:	f7ff fff3 	bl	d4f5e <_ZNSt14_Function_baseD1Ev>
   d4f78:	4620      	mov	r0, r4
   d4f7a:	bd10      	pop	{r4, pc}

000d4f7c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4f7c:	b513      	push	{r0, r1, r4, lr}
   d4f7e:	460b      	mov	r3, r1
   d4f80:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4f82:	c803      	ldmia	r0, {r0, r1}
   d4f84:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4f88:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4f8c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4f90:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d4f94:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4f98:	b002      	add	sp, #8
   d4f9a:	bd10      	pop	{r4, pc}

000d4f9c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4f9c:	4803      	ldr	r0, [pc, #12]	; (d4fac <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4f9e:	4a04      	ldr	r2, [pc, #16]	; (d4fb0 <_GLOBAL__sub_I_RGB+0x14>)
   d4fa0:	4904      	ldr	r1, [pc, #16]	; (d4fb4 <_GLOBAL__sub_I_RGB+0x18>)
   d4fa2:	2300      	movs	r3, #0
   d4fa4:	6083      	str	r3, [r0, #8]
   d4fa6:	f001 ba67 	b.w	d6478 <__aeabi_atexit>
   d4faa:	bf00      	nop
   d4fac:	2003e3ec 	.word	0x2003e3ec
   d4fb0:	2003df34 	.word	0x2003df34
   d4fb4:	000d4f71 	.word	0x000d4f71

000d4fb8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d4fb8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4fba:	4b0c      	ldr	r3, [pc, #48]	; (d4fec <serialEventRun+0x34>)
   d4fbc:	b133      	cbz	r3, d4fcc <serialEventRun+0x14>
   d4fbe:	f000 fc31 	bl	d5824 <_Z16_fetch_usbserialv>
   d4fc2:	6803      	ldr	r3, [r0, #0]
   d4fc4:	691b      	ldr	r3, [r3, #16]
   d4fc6:	4798      	blx	r3
   d4fc8:	2800      	cmp	r0, #0
   d4fca:	dc09      	bgt.n	d4fe0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d4fcc:	4b08      	ldr	r3, [pc, #32]	; (d4ff0 <serialEventRun+0x38>)
   d4fce:	b163      	cbz	r3, d4fea <serialEventRun+0x32>
   d4fd0:	f000 fcaa 	bl	d5928 <_Z22__fetch_global_Serial1v>
   d4fd4:	6803      	ldr	r3, [r0, #0]
   d4fd6:	691b      	ldr	r3, [r3, #16]
   d4fd8:	4798      	blx	r3
   d4fda:	2800      	cmp	r0, #0
   d4fdc:	dc03      	bgt.n	d4fe6 <serialEventRun+0x2e>
   d4fde:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d4fe0:	f3af 8000 	nop.w
   d4fe4:	e7f2      	b.n	d4fcc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d4fe6:	f3af 8000 	nop.w
   d4fea:	bd08      	pop	{r3, pc}
	...

000d4ff4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d4ff4:	b508      	push	{r3, lr}
	serialEventRun();
   d4ff6:	f7ff ffdf 	bl	d4fb8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4ffa:	f7ff fb9b 	bl	d4734 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4ffe:	4b01      	ldr	r3, [pc, #4]	; (d5004 <_post_loop+0x10>)
   d5000:	6018      	str	r0, [r3, #0]
   d5002:	bd08      	pop	{r3, pc}
   d5004:	2003e730 	.word	0x2003e730

000d5008 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5008:	4802      	ldr	r0, [pc, #8]	; (d5014 <_Z33system_initialize_user_backup_ramv+0xc>)
   d500a:	4a03      	ldr	r2, [pc, #12]	; (d5018 <_Z33system_initialize_user_backup_ramv+0x10>)
   d500c:	4903      	ldr	r1, [pc, #12]	; (d501c <_Z33system_initialize_user_backup_ramv+0x14>)
   d500e:	1a12      	subs	r2, r2, r0
   d5010:	f001 bbb0 	b.w	d6774 <memcpy>
   d5014:	2003f400 	.word	0x2003f400
   d5018:	2003f404 	.word	0x2003f404
   d501c:	000d6fc0 	.word	0x000d6fc0

000d5020 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5020:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5022:	2300      	movs	r3, #0
   d5024:	9300      	str	r3, [sp, #0]
   d5026:	461a      	mov	r2, r3
   d5028:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d502c:	f7ff fcdc 	bl	d49e8 <system_ctrl_set_result>
}
   d5030:	b003      	add	sp, #12
   d5032:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5038 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5038:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d503a:	8843      	ldrh	r3, [r0, #2]
   d503c:	2b0a      	cmp	r3, #10
   d503e:	d008      	beq.n	d5052 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5040:	2b50      	cmp	r3, #80	; 0x50
   d5042:	d109      	bne.n	d5058 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d5044:	4b09      	ldr	r3, [pc, #36]	; (d506c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d5046:	681b      	ldr	r3, [r3, #0]
   d5048:	b13b      	cbz	r3, d505a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d504a:	b003      	add	sp, #12
   d504c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d5050:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d5052:	f7ff ffe5 	bl	d5020 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d5056:	e006      	b.n	d5066 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5058:	2300      	movs	r3, #0
   d505a:	9300      	str	r3, [sp, #0]
   d505c:	461a      	mov	r2, r3
   d505e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5062:	f7ff fcc1 	bl	d49e8 <system_ctrl_set_result>
        break;
    }
}
   d5066:	b003      	add	sp, #12
   d5068:	f85d fb04 	ldr.w	pc, [sp], #4
   d506c:	2003e3fc 	.word	0x2003e3fc

000d5070 <module_user_init_hook>:

void module_user_init_hook()
{
   d5070:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5072:	4c10      	ldr	r4, [pc, #64]	; (d50b4 <module_user_init_hook+0x44>)
   d5074:	4d10      	ldr	r5, [pc, #64]	; (d50b8 <module_user_init_hook+0x48>)
   d5076:	6823      	ldr	r3, [r4, #0]
   d5078:	42ab      	cmp	r3, r5
   d507a:	4b10      	ldr	r3, [pc, #64]	; (d50bc <module_user_init_hook+0x4c>)
   d507c:	bf0c      	ite	eq
   d507e:	2201      	moveq	r2, #1
   d5080:	2200      	movne	r2, #0
   d5082:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5084:	d002      	beq.n	d508c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d5086:	f7ff ffbf 	bl	d5008 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d508a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d508c:	f7ff fb4a 	bl	d4724 <HAL_RNG_GetRandomNumber>
   d5090:	4604      	mov	r4, r0
    srand(seed);
   d5092:	f001 fb83 	bl	d679c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5096:	4b0a      	ldr	r3, [pc, #40]	; (d50c0 <module_user_init_hook+0x50>)
   d5098:	b113      	cbz	r3, d50a0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d509a:	4620      	mov	r0, r4
   d509c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d50a0:	2100      	movs	r1, #0
   d50a2:	4807      	ldr	r0, [pc, #28]	; (d50c0 <module_user_init_hook+0x50>)
   d50a4:	f7ff fd12 	bl	d4acc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d50a8:	2100      	movs	r1, #0
   d50aa:	4806      	ldr	r0, [pc, #24]	; (d50c4 <module_user_init_hook+0x54>)
}
   d50ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d50b0:	f7ff bc90 	b.w	d49d4 <system_ctrl_set_app_request_handler>
   d50b4:	2003f400 	.word	0x2003f400
   d50b8:	9a271c1e 	.word	0x9a271c1e
   d50bc:	2003e400 	.word	0x2003e400
   d50c0:	00000000 	.word	0x00000000
   d50c4:	000d5039 	.word	0x000d5039

000d50c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d50c8:	4770      	bx	lr

000d50ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d50ca:	2000      	movs	r0, #0
   d50cc:	4770      	bx	lr

000d50ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d50ce:	b510      	push	{r4, lr}
   d50d0:	2110      	movs	r1, #16
   d50d2:	4604      	mov	r4, r0
   d50d4:	f001 f9de 	bl	d6494 <_ZdlPvj>
   d50d8:	4620      	mov	r0, r4
   d50da:	bd10      	pop	{r4, pc}

000d50dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d50dc:	b508      	push	{r3, lr}
      { delete this; }
   d50de:	b108      	cbz	r0, d50e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d50e0:	f7ff fff5 	bl	d50ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d50e4:	bd08      	pop	{r3, pc}

000d50e6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d50e6:	2200      	movs	r2, #0
   d50e8:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d50ea:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d50ec:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d50f0:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d50f2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d50f6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d50f8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50fa:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d50fc:	680c      	ldr	r4, [r1, #0]
   d50fe:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5100:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d5102:	bd10      	pop	{r4, pc}

000d5104 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5104:	b510      	push	{r4, lr}
   d5106:	4604      	mov	r4, r0
    free((void*)msg_);
   d5108:	6800      	ldr	r0, [r0, #0]
   d510a:	f7ff fcef 	bl	d4aec <free>
}
   d510e:	4620      	mov	r0, r4
   d5110:	bd10      	pop	{r4, pc}

000d5112 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5112:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5114:	68c4      	ldr	r4, [r0, #12]
   d5116:	b1f4      	cbz	r4, d5156 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d5118:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d511a:	2b02      	cmp	r3, #2
   d511c:	d103      	bne.n	d5126 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d511e:	f104 000c 	add.w	r0, r4, #12
   d5122:	f7ff ffef 	bl	d5104 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d5126:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d5128:	b135      	cbz	r5, d5138 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d512a:	4628      	mov	r0, r5
   d512c:	f7ff ff17 	bl	d4f5e <_ZNSt14_Function_baseD1Ev>
   d5130:	2110      	movs	r1, #16
   d5132:	4628      	mov	r0, r5
   d5134:	f001 f9ae 	bl	d6494 <_ZdlPvj>
   d5138:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d513a:	b135      	cbz	r5, d514a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d513c:	4628      	mov	r0, r5
   d513e:	f7ff ff0e 	bl	d4f5e <_ZNSt14_Function_baseD1Ev>
   d5142:	2110      	movs	r1, #16
   d5144:	4628      	mov	r0, r5
   d5146:	f001 f9a5 	bl	d6494 <_ZdlPvj>
   d514a:	4620      	mov	r0, r4
   d514c:	2114      	movs	r1, #20
   d514e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5152:	f001 b99f 	b.w	d6494 <_ZdlPvj>
   d5156:	bd38      	pop	{r3, r4, r5, pc}

000d5158 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d5158:	b513      	push	{r0, r1, r4, lr}
   d515a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d515c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d5160:	2300      	movs	r3, #0
   d5162:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5164:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5166:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5168:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d516a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d516c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d516e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5170:	f7ff fe5c 	bl	d4e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5174:	4620      	mov	r0, r4
   d5176:	b002      	add	sp, #8
   d5178:	bd10      	pop	{r4, pc}

000d517a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d517a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d517c:	460c      	mov	r4, r1
   d517e:	ad02      	add	r5, sp, #8
   d5180:	f854 3b04 	ldr.w	r3, [r4], #4
   d5184:	f845 3d08 	str.w	r3, [r5, #-8]!
   d5188:	4606      	mov	r6, r0
   d518a:	460f      	mov	r7, r1
   d518c:	a801      	add	r0, sp, #4
   d518e:	4621      	mov	r1, r4
   d5190:	f7ff fe45 	bl	d4e1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d5194:	4629      	mov	r1, r5
   d5196:	4630      	mov	r0, r6
   d5198:	f7ff ffde 	bl	d5158 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d519c:	a801      	add	r0, sp, #4
   d519e:	f7ff fe45 	bl	d4e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51a2:	4620      	mov	r0, r4
   d51a4:	f7ff fe42 	bl	d4e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d51a8:	4638      	mov	r0, r7
   d51aa:	2108      	movs	r1, #8
   d51ac:	f001 f972 	bl	d6494 <_ZdlPvj>
        return p;
    }
   d51b0:	4630      	mov	r0, r6
   d51b2:	b003      	add	sp, #12
   d51b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d51b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d51b8:	b538      	push	{r3, r4, r5, lr}
   d51ba:	2300      	movs	r3, #0
   d51bc:	4604      	mov	r4, r0
   d51be:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51c0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d51c2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51c4:	f7fe ff67 	bl	d4096 <_Znwj>
   d51c8:	b128      	cbz	r0, d51d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d51ca:	2301      	movs	r3, #1
   d51cc:	6043      	str	r3, [r0, #4]
   d51ce:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d51d0:	4b02      	ldr	r3, [pc, #8]	; (d51dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d51d2:	6003      	str	r3, [r0, #0]
   d51d4:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d51d6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d51d8:	4620      	mov	r0, r4
   d51da:	bd38      	pop	{r3, r4, r5, pc}
   d51dc:	000d6c4c 	.word	0x000d6c4c

000d51e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d51e0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d51e2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d51e4:	b90a      	cbnz	r2, d51ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d51e6:	f001 f968 	bl	d64ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d51ea:	68c3      	ldr	r3, [r0, #12]
    }
   d51ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d51f0:	4718      	bx	r3

000d51f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d51f2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d51f4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d51f6:	f100 0110 	add.w	r1, r0, #16
   d51fa:	f7ff fff1 	bl	d51e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d51fe:	bd08      	pop	{r3, pc}

000d5200 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5200:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d5202:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5204:	b90a      	cbnz	r2, d520a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5206:	f001 f958 	bl	d64ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d520a:	68c3      	ldr	r3, [r0, #12]
    }
   d520c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5210:	4718      	bx	r3

000d5212 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5212:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5214:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5216:	f100 0110 	add.w	r1, r0, #16
   d521a:	f7ff fff1 	bl	d5200 <_ZNKSt8functionIFvRKbEEclES1_>
   d521e:	bd08      	pop	{r3, pc}

000d5220 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5220:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5222:	2300      	movs	r3, #0
   d5224:	6083      	str	r3, [r0, #8]
   d5226:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5228:	4604      	mov	r4, r0
   d522a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d522c:	b12b      	cbz	r3, d523a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d522e:	2202      	movs	r2, #2
   d5230:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5232:	68eb      	ldr	r3, [r5, #12]
   d5234:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5236:	68ab      	ldr	r3, [r5, #8]
   d5238:	60a3      	str	r3, [r4, #8]
	}
    }
   d523a:	4620      	mov	r0, r4
   d523c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5240 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d5240:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5242:	b089      	sub	sp, #36	; 0x24
   d5244:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5246:	4668      	mov	r0, sp
   d5248:	f7ff ff4d 	bl	d50e6 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d524c:	2300      	movs	r3, #0
   d524e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5252:	f04f 0202 	mov.w	r2, #2
   d5256:	e8d4 3f4f 	ldrexb	r3, [r4]
   d525a:	2b00      	cmp	r3, #0
   d525c:	d103      	bne.n	d5266 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d525e:	e8c4 2f41 	strexb	r1, r2, [r4]
   d5262:	2900      	cmp	r1, #0
   d5264:	d1f7      	bne.n	d5256 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d5266:	d002      	beq.n	d526e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d5268:	f88d 3008 	strb.w	r3, [sp, #8]
   d526c:	e063      	b.n	d5336 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d526e:	f114 050c 	adds.w	r5, r4, #12
   d5272:	d003      	beq.n	d527c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d5274:	4669      	mov	r1, sp
   d5276:	4628      	mov	r0, r5
   d5278:	f7ff ff35 	bl	d50e6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d527c:	f3bf 8f5f 	dmb	sy
   d5280:	2301      	movs	r3, #1
   d5282:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5284:	2000      	movs	r0, #0
   d5286:	f104 0308 	add.w	r3, r4, #8
   d528a:	f3bf 8f5f 	dmb	sy
   d528e:	e853 6f00 	ldrex	r6, [r3]
   d5292:	e843 0200 	strex	r2, r0, [r3]
   d5296:	2a00      	cmp	r2, #0
   d5298:	d1f9      	bne.n	d528e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d529a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d529e:	2e00      	cmp	r6, #0
   d52a0:	d049      	beq.n	d5336 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d52a2:	f7ff fb87 	bl	d49b4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d52a6:	b120      	cbz	r0, d52b2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d52a8:	4629      	mov	r1, r5
   d52aa:	4630      	mov	r0, r6
   d52ac:	f7ff ff98 	bl	d51e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d52b0:	e03a      	b.n	d5328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d52b2:	4631      	mov	r1, r6
   d52b4:	a802      	add	r0, sp, #8
   d52b6:	f7ff ffb3 	bl	d5220 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d52ba:	68e0      	ldr	r0, [r4, #12]
   d52bc:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d52c0:	b108      	cbz	r0, d52c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d52c2:	f001 faa5 	bl	d6810 <strdup>
   d52c6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d52c8:	2010      	movs	r0, #16
   d52ca:	f8ad 501c 	strh.w	r5, [sp, #28]
   d52ce:	f7fe fee2 	bl	d4096 <_Znwj>
   d52d2:	4605      	mov	r5, r0
   d52d4:	b1e8      	cbz	r0, d5312 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52d6:	2700      	movs	r7, #0
   d52d8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d52da:	2018      	movs	r0, #24
   d52dc:	f7fe fedb 	bl	d4096 <_Znwj>
   d52e0:	4604      	mov	r4, r0
   d52e2:	b188      	cbz	r0, d5308 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d52e4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d52e6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d52e8:	a802      	add	r0, sp, #8
   d52ea:	f7ff fe47 	bl	d4f7c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52ee:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d52f0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d52f2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d52f4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d52f6:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d52f8:	a906      	add	r1, sp, #24
   d52fa:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d52fc:	60e3      	str	r3, [r4, #12]
   d52fe:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5302:	9205      	str	r2, [sp, #20]
   d5304:	f7ff feef 	bl	d50e6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d5308:	4b0d      	ldr	r3, [pc, #52]	; (d5340 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d530a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d530c:	4b0d      	ldr	r3, [pc, #52]	; (d5344 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d530e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5310:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d5312:	a806      	add	r0, sp, #24
   d5314:	f7ff fef6 	bl	d5104 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5318:	a802      	add	r0, sp, #8
   d531a:	f7ff fe20 	bl	d4f5e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d531e:	2200      	movs	r2, #0
   d5320:	4629      	mov	r1, r5
   d5322:	4809      	ldr	r0, [pc, #36]	; (d5348 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d5324:	f7ff fb4e 	bl	d49c4 <application_thread_invoke>
   d5328:	4630      	mov	r0, r6
   d532a:	f7ff fe18 	bl	d4f5e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d532e:	2110      	movs	r1, #16
   d5330:	4630      	mov	r0, r6
   d5332:	f001 f8af 	bl	d6494 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d5336:	4668      	mov	r0, sp
   d5338:	f7ff fee4 	bl	d5104 <_ZN8particle5ErrorD1Ev>
    }
   d533c:	b009      	add	sp, #36	; 0x24
   d533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5340:	000d51f3 	.word	0x000d51f3
   d5344:	000d5469 	.word	0x000d5469
   d5348:	000d5975 	.word	0x000d5975

000d534c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d534c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5350:	b08b      	sub	sp, #44	; 0x2c
   d5352:	4606      	mov	r6, r0
   d5354:	460f      	mov	r7, r1
   d5356:	4690      	mov	r8, r2
   d5358:	4699      	mov	r9, r3
   d535a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d535e:	f7ff fba5 	bl	d4aac <spark_cloud_flag_connected>
   d5362:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d5364:	4683      	mov	fp, r0
   d5366:	bb30      	cbnz	r0, d53b6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5368:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d536c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d536e:	a905      	add	r1, sp, #20
   d5370:	4628      	mov	r0, r5
   d5372:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5376:	f7ff feb6 	bl	d50e6 <_ZN8particle5ErrorC1EOS0_>
   d537a:	2014      	movs	r0, #20
   d537c:	f7fe fe8b 	bl	d4096 <_Znwj>
   d5380:	4604      	mov	r4, r0
   d5382:	b158      	cbz	r0, d539c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5384:	2302      	movs	r3, #2
   d5386:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5388:	2301      	movs	r3, #1
   d538a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d538c:	f8c0 b004 	str.w	fp, [r0, #4]
   d5390:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d5394:	4629      	mov	r1, r5
   d5396:	300c      	adds	r0, #12
   d5398:	f7ff fea5 	bl	d50e6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d539c:	4630      	mov	r0, r6
   d539e:	4621      	mov	r1, r4
   d53a0:	f840 4b04 	str.w	r4, [r0], #4
   d53a4:	f7ff ff08 	bl	d51b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d53a8:	4628      	mov	r0, r5
   d53aa:	f7ff feab 	bl	d5104 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d53ae:	a805      	add	r0, sp, #20
   d53b0:	f7ff fea8 	bl	d5104 <_ZN8particle5ErrorD1Ev>
   d53b4:	e052      	b.n	d545c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d53b6:	2400      	movs	r4, #0
   d53b8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d53ba:	2014      	movs	r0, #20
   d53bc:	606c      	str	r4, [r5, #4]
   d53be:	60ac      	str	r4, [r5, #8]
   d53c0:	9307      	str	r3, [sp, #28]
   d53c2:	f7fe fe68 	bl	d4096 <_Znwj>
   d53c6:	4601      	mov	r1, r0
   d53c8:	b118      	cbz	r0, d53d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d53ca:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d53cc:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d53ce:	6044      	str	r4, [r0, #4]
   d53d0:	6084      	str	r4, [r0, #8]
   d53d2:	a804      	add	r0, sp, #16
   d53d4:	9103      	str	r1, [sp, #12]
   d53d6:	f7ff feef 	bl	d51b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d53da:	4b22      	ldr	r3, [pc, #136]	; (d5464 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d53dc:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d53de:	2008      	movs	r0, #8
   d53e0:	f7fe fe59 	bl	d4096 <_Znwj>
   d53e4:	4604      	mov	r4, r0
   d53e6:	b128      	cbz	r0, d53f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d53e8:	9b03      	ldr	r3, [sp, #12]
   d53ea:	f840 3b04 	str.w	r3, [r0], #4
   d53ee:	a904      	add	r1, sp, #16
   d53f0:	f7ff fd15 	bl	d4e1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d53f4:	9500      	str	r5, [sp, #0]
   d53f6:	fa5f f38a 	uxtb.w	r3, sl
   d53fa:	464a      	mov	r2, r9
   d53fc:	4641      	mov	r1, r8
   d53fe:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5400:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5402:	f7ff fb5b 	bl	d4abc <spark_send_event>
   d5406:	b920      	cbnz	r0, d5412 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d5408:	9b03      	ldr	r3, [sp, #12]
   d540a:	785b      	ldrb	r3, [r3, #1]
   d540c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5410:	b183      	cbz	r3, d5434 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d5412:	9b03      	ldr	r3, [sp, #12]
   d5414:	9305      	str	r3, [sp, #20]
   d5416:	a904      	add	r1, sp, #16
   d5418:	a806      	add	r0, sp, #24
   d541a:	f7ff fd00 	bl	d4e1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d541e:	a905      	add	r1, sp, #20
   d5420:	4630      	mov	r0, r6
   d5422:	f7ff fe99 	bl	d5158 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5426:	a806      	add	r0, sp, #24
   d5428:	f7ff fd00 	bl	d4e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d542c:	a804      	add	r0, sp, #16
   d542e:	f7ff fcfd 	bl	d4e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5432:	e013      	b.n	d545c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d5434:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d5438:	a905      	add	r1, sp, #20
   d543a:	a803      	add	r0, sp, #12
   d543c:	9205      	str	r2, [sp, #20]
   d543e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5442:	f7ff fefd 	bl	d5240 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5446:	a805      	add	r0, sp, #20
   d5448:	f7ff fe5c 	bl	d5104 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d544c:	a805      	add	r0, sp, #20
   d544e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5450:	f7ff fe93 	bl	d517a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d5454:	a806      	add	r0, sp, #24
   d5456:	f7ff fce9 	bl	d4e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d545a:	e7da      	b.n	d5412 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d545c:	4630      	mov	r0, r6
   d545e:	b00b      	add	sp, #44	; 0x2c
   d5460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5464:	000d55d9 	.word	0x000d55d9

000d5468 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5468:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d546a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d546c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d546e:	d006      	beq.n	d547e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d5470:	2a03      	cmp	r2, #3
   d5472:	d017      	beq.n	d54a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d5474:	2a01      	cmp	r2, #1
   d5476:	d122      	bne.n	d54be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5478:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d547a:	6003      	str	r3, [r0, #0]
	      break;
   d547c:	e01f      	b.n	d54be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d547e:	2018      	movs	r0, #24
   d5480:	680e      	ldr	r6, [r1, #0]
   d5482:	f7fe fe08 	bl	d4096 <_Znwj>
   d5486:	4605      	mov	r5, r0
   d5488:	b150      	cbz	r0, d54a0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d548a:	4631      	mov	r1, r6
   d548c:	f7ff fec8 	bl	d5220 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d5490:	6930      	ldr	r0, [r6, #16]
   d5492:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5496:	b108      	cbz	r0, d549c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d5498:	f001 f9ba 	bl	d6810 <strdup>
   d549c:	6128      	str	r0, [r5, #16]
   d549e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d54a0:	6025      	str	r5, [r4, #0]
   d54a2:	e00c      	b.n	d54be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d54a4:	6804      	ldr	r4, [r0, #0]
   d54a6:	b154      	cbz	r4, d54be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d54a8:	f104 0010 	add.w	r0, r4, #16
   d54ac:	f7ff fe2a 	bl	d5104 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54b0:	4620      	mov	r0, r4
   d54b2:	f7ff fd54 	bl	d4f5e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d54b6:	2118      	movs	r1, #24
   d54b8:	4620      	mov	r0, r4
   d54ba:	f000 ffeb 	bl	d6494 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d54be:	2000      	movs	r0, #0
   d54c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54c2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54c2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54c4:	2300      	movs	r3, #0
   d54c6:	6083      	str	r3, [r0, #8]
   d54c8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54ca:	4604      	mov	r4, r0
   d54cc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d54ce:	b12b      	cbz	r3, d54dc <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d54d0:	2202      	movs	r2, #2
   d54d2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d54d4:	68eb      	ldr	r3, [r5, #12]
   d54d6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d54d8:	68ab      	ldr	r3, [r5, #8]
   d54da:	60a3      	str	r3, [r4, #8]
	}
    }
   d54dc:	4620      	mov	r0, r4
   d54de:	bd38      	pop	{r3, r4, r5, pc}

000d54e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d54e0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d54e2:	b570      	push	{r4, r5, r6, lr}
   d54e4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d54e6:	d006      	beq.n	d54f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d54e8:	2a03      	cmp	r2, #3
   d54ea:	d011      	beq.n	d5510 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d54ec:	2a01      	cmp	r2, #1
   d54ee:	d118      	bne.n	d5522 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d54f0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d54f2:	6003      	str	r3, [r0, #0]
	      break;
   d54f4:	e015      	b.n	d5522 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d54f6:	2014      	movs	r0, #20
   d54f8:	680e      	ldr	r6, [r1, #0]
   d54fa:	f7fe fdcc 	bl	d4096 <_Znwj>
   d54fe:	4605      	mov	r5, r0
   d5500:	b120      	cbz	r0, d550c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5502:	4631      	mov	r1, r6
   d5504:	f7ff ffdd 	bl	d54c2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5508:	7c33      	ldrb	r3, [r6, #16]
   d550a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d550c:	6025      	str	r5, [r4, #0]
   d550e:	e008      	b.n	d5522 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5510:	6804      	ldr	r4, [r0, #0]
   d5512:	b134      	cbz	r4, d5522 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5514:	4620      	mov	r0, r4
   d5516:	f7ff fd22 	bl	d4f5e <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d551a:	2114      	movs	r1, #20
   d551c:	4620      	mov	r0, r4
   d551e:	f000 ffb9 	bl	d6494 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5522:	2000      	movs	r0, #0
   d5524:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5528 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5528:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d552a:	2300      	movs	r3, #0
   d552c:	b087      	sub	sp, #28
   d552e:	460c      	mov	r4, r1
   d5530:	f3bf 8f5f 	dmb	sy
   d5534:	e850 6f00 	ldrex	r6, [r0]
   d5538:	e840 3200 	strex	r2, r3, [r0]
   d553c:	2a00      	cmp	r2, #0
   d553e:	d1f9      	bne.n	d5534 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d5540:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5544:	2e00      	cmp	r6, #0
   d5546:	d03f      	beq.n	d55c8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5548:	4618      	mov	r0, r3
   d554a:	f7ff fa33 	bl	d49b4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d554e:	4607      	mov	r7, r0
   d5550:	b120      	cbz	r0, d555c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5552:	4621      	mov	r1, r4
   d5554:	4630      	mov	r0, r6
   d5556:	f7ff fe53 	bl	d5200 <_ZNKSt8functionIFvRKbEEclES1_>
   d555a:	e02e      	b.n	d55ba <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d555c:	4631      	mov	r1, r6
   d555e:	a801      	add	r0, sp, #4
   d5560:	f7ff ffaf 	bl	d54c2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5564:	7823      	ldrb	r3, [r4, #0]
   d5566:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d556a:	2010      	movs	r0, #16
   d556c:	f7fe fd93 	bl	d4096 <_Znwj>
   d5570:	4605      	mov	r5, r0
   d5572:	b1d0      	cbz	r0, d55aa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5574:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5576:	2014      	movs	r0, #20
   d5578:	f7fe fd8d 	bl	d4096 <_Znwj>
   d557c:	4604      	mov	r4, r0
   d557e:	b178      	cbz	r0, d55a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5580:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5582:	4601      	mov	r1, r0
   d5584:	a801      	add	r0, sp, #4
   d5586:	f7ff fcf9 	bl	d4f7c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d558a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d558c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d558e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5590:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5592:	9203      	str	r2, [sp, #12]
   d5594:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5596:	60e3      	str	r3, [r4, #12]
   d5598:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d559c:	9204      	str	r2, [sp, #16]
   d559e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d55a0:	4b0a      	ldr	r3, [pc, #40]	; (d55cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d55a2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d55a4:	4b0a      	ldr	r3, [pc, #40]	; (d55d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55a6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d55a8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55aa:	a801      	add	r0, sp, #4
   d55ac:	f7ff fcd7 	bl	d4f5e <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d55b0:	2200      	movs	r2, #0
   d55b2:	4629      	mov	r1, r5
   d55b4:	4807      	ldr	r0, [pc, #28]	; (d55d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d55b6:	f7ff fa05 	bl	d49c4 <application_thread_invoke>
   d55ba:	4630      	mov	r0, r6
   d55bc:	f7ff fccf 	bl	d4f5e <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d55c0:	2110      	movs	r1, #16
   d55c2:	4630      	mov	r0, r6
   d55c4:	f000 ff66 	bl	d6494 <_ZdlPvj>
        }
    }
   d55c8:	b007      	add	sp, #28
   d55ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55cc:	000d5213 	.word	0x000d5213
   d55d0:	000d54e1 	.word	0x000d54e1
   d55d4:	000d5975 	.word	0x000d5975

000d55d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d55d8:	b530      	push	{r4, r5, lr}
   d55da:	b085      	sub	sp, #20
   d55dc:	4604      	mov	r4, r0
   d55de:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d55e0:	4668      	mov	r0, sp
   d55e2:	4611      	mov	r1, r2
   d55e4:	f7ff fdc9 	bl	d517a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d55e8:	b17c      	cbz	r4, d560a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d55ea:	b224      	sxth	r4, r4
   d55ec:	4628      	mov	r0, r5
   d55ee:	b10d      	cbz	r5, d55f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d55f0:	f001 f90e 	bl	d6810 <strdup>
   d55f4:	9002      	str	r0, [sp, #8]
   d55f6:	a902      	add	r1, sp, #8
   d55f8:	4668      	mov	r0, sp
   d55fa:	f8ad 400c 	strh.w	r4, [sp, #12]
   d55fe:	f7ff fe1f 	bl	d5240 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5602:	a802      	add	r0, sp, #8
   d5604:	f7ff fd7e 	bl	d5104 <_ZN8particle5ErrorD1Ev>
   d5608:	e01d      	b.n	d5646 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d560a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d560c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d5610:	f04f 0201 	mov.w	r2, #1
   d5614:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5618:	42a3      	cmp	r3, r4
   d561a:	d103      	bne.n	d5624 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d561c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d5620:	2900      	cmp	r1, #0
   d5622:	d1f7      	bne.n	d5614 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5624:	d002      	beq.n	d562c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5626:	f88d 3008 	strb.w	r3, [sp, #8]
   d562a:	e00c      	b.n	d5646 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d562c:	f110 010c 	adds.w	r1, r0, #12
   d5630:	f04f 0301 	mov.w	r3, #1
   d5634:	bf18      	it	ne
   d5636:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5638:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d563c:	3004      	adds	r0, #4
   d563e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d5642:	f7ff ff71 	bl	d5528 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5646:	a801      	add	r0, sp, #4
   d5648:	f7ff fbf0 	bl	d4e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d564c:	b005      	add	sp, #20
   d564e:	bd30      	pop	{r4, r5, pc}

000d5650 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5650:	4770      	bx	lr

000d5652 <_ZN9IPAddressD0Ev>:
   d5652:	b510      	push	{r4, lr}
   d5654:	2118      	movs	r1, #24
   d5656:	4604      	mov	r4, r0
   d5658:	f000 ff1c 	bl	d6494 <_ZdlPvj>
   d565c:	4620      	mov	r0, r4
   d565e:	bd10      	pop	{r4, pc}

000d5660 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5660:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5662:	7d03      	ldrb	r3, [r0, #20]
   d5664:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5666:	b08d      	sub	sp, #52	; 0x34
   d5668:	460e      	mov	r6, r1
   d566a:	f100 0704 	add.w	r7, r0, #4
   d566e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5672:	d002      	beq.n	d567a <_ZNK9IPAddress7printToER5Print+0x1a>
   d5674:	f100 0508 	add.w	r5, r0, #8
   d5678:	e018      	b.n	d56ac <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d567a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d567c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d567e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5682:	232f      	movs	r3, #47	; 0x2f
   d5684:	462a      	mov	r2, r5
   d5686:	200a      	movs	r0, #10
   d5688:	f7ff f884 	bl	d4794 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d568c:	4628      	mov	r0, r5
   d568e:	f001 f8da 	bl	d6846 <strlen>
   d5692:	6833      	ldr	r3, [r6, #0]
   d5694:	4602      	mov	r2, r0
   d5696:	68db      	ldr	r3, [r3, #12]
   d5698:	4629      	mov	r1, r5
   d569a:	4630      	mov	r0, r6
   d569c:	4798      	blx	r3
   d569e:	e00f      	b.n	d56c0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d56a0:	b124      	cbz	r4, d56ac <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d56a2:	212e      	movs	r1, #46	; 0x2e
   d56a4:	4630      	mov	r0, r6
   d56a6:	f7ff fc0b 	bl	d4ec0 <_ZN5Print5printEc>
   d56aa:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d56ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d56b0:	220a      	movs	r2, #10
   d56b2:	4630      	mov	r0, r6
   d56b4:	f7ff fc1d 	bl	d4ef2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d56b8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d56ba:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d56bc:	d1f0      	bne.n	d56a0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d56be:	4620      	mov	r0, r4
    }
    return n;
}
   d56c0:	b00d      	add	sp, #52	; 0x34
   d56c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d56c4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d56c4:	b510      	push	{r4, lr}
   d56c6:	4b05      	ldr	r3, [pc, #20]	; (d56dc <_ZN9IPAddressC1Ev+0x18>)
   d56c8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d56ca:	2211      	movs	r2, #17
   d56cc:	f840 3b04 	str.w	r3, [r0], #4
   d56d0:	2100      	movs	r1, #0
   d56d2:	f001 f85a 	bl	d678a <memset>
{
    clear();
}
   d56d6:	4620      	mov	r0, r4
   d56d8:	bd10      	pop	{r4, pc}
   d56da:	bf00      	nop
   d56dc:	000d6c68 	.word	0x000d6c68

000d56e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d56e0:	4603      	mov	r3, r0
   d56e2:	4a07      	ldr	r2, [pc, #28]	; (d5700 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d56e4:	b510      	push	{r4, lr}
   d56e6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d56ea:	f101 0210 	add.w	r2, r1, #16
   d56ee:	f851 4b04 	ldr.w	r4, [r1], #4
   d56f2:	f843 4b04 	str.w	r4, [r3], #4
   d56f6:	4291      	cmp	r1, r2
   d56f8:	d1f9      	bne.n	d56ee <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d56fa:	780a      	ldrb	r2, [r1, #0]
   d56fc:	701a      	strb	r2, [r3, #0]
}
   d56fe:	bd10      	pop	{r4, pc}
   d5700:	000d6c68 	.word	0x000d6c68

000d5704 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5704:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5706:	2b04      	cmp	r3, #4
   d5708:	d101      	bne.n	d570e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d570a:	6840      	ldr	r0, [r0, #4]
   d570c:	e008      	b.n	d5720 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d570e:	2b06      	cmp	r3, #6
   d5710:	d10a      	bne.n	d5728 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d5712:	6843      	ldr	r3, [r0, #4]
   d5714:	b953      	cbnz	r3, d572c <_ZNK9IPAddresscvbEv+0x28>
   d5716:	6883      	ldr	r3, [r0, #8]
   d5718:	b943      	cbnz	r3, d572c <_ZNK9IPAddresscvbEv+0x28>
   d571a:	68c3      	ldr	r3, [r0, #12]
   d571c:	b933      	cbnz	r3, d572c <_ZNK9IPAddresscvbEv+0x28>
   d571e:	6900      	ldr	r0, [r0, #16]
   d5720:	3000      	adds	r0, #0
   d5722:	bf18      	it	ne
   d5724:	2001      	movne	r0, #1
   d5726:	4770      	bx	lr
    } else {
        return false;
   d5728:	2000      	movs	r0, #0
   d572a:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d572c:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d572e:	4770      	bx	lr

000d5730 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d5730:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d5732:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5736:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d573a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d573e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d5742:	2304      	movs	r3, #4
   d5744:	6041      	str	r1, [r0, #4]
   d5746:	7503      	strb	r3, [r0, #20]
   d5748:	bd10      	pop	{r4, pc}

000d574a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d574a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d574c:	780d      	ldrb	r5, [r1, #0]
   d574e:	788b      	ldrb	r3, [r1, #2]
   d5750:	784a      	ldrb	r2, [r1, #1]
   d5752:	78c9      	ldrb	r1, [r1, #3]
   d5754:	9100      	str	r1, [sp, #0]
   d5756:	4629      	mov	r1, r5
   d5758:	f7ff ffea 	bl	d5730 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d575c:	b003      	add	sp, #12
   d575e:	bd30      	pop	{r4, r5, pc}

000d5760 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5760:	7441      	strb	r1, [r0, #17]
   d5762:	4770      	bx	lr

000d5764 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5764:	4770      	bx	lr

000d5766 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5766:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5768:	2100      	movs	r1, #0
   d576a:	7c00      	ldrb	r0, [r0, #16]
   d576c:	f7ff f8f2 	bl	d4954 <HAL_USB_USART_Receive_Data>
}
   d5770:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5774:	bf28      	it	cs
   d5776:	f04f 30ff 	movcs.w	r0, #4294967295
   d577a:	bd08      	pop	{r3, pc}

000d577c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d577c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d577e:	2101      	movs	r1, #1
   d5780:	7c00      	ldrb	r0, [r0, #16]
   d5782:	f7ff f8e7 	bl	d4954 <HAL_USB_USART_Receive_Data>
}
   d5786:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d578a:	bf28      	it	cs
   d578c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5790:	bd08      	pop	{r3, pc}

000d5792 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5792:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5794:	7c00      	ldrb	r0, [r0, #16]
   d5796:	f7ff f8d5 	bl	d4944 <HAL_USB_USART_Available_Data_For_Write>
}
   d579a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d579e:	bd08      	pop	{r3, pc}

000d57a0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d57a0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d57a2:	7c00      	ldrb	r0, [r0, #16]
   d57a4:	f7ff f8c6 	bl	d4934 <HAL_USB_USART_Available_Data>
}
   d57a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d57ac:	bd08      	pop	{r3, pc}

000d57ae <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d57ae:	7c00      	ldrb	r0, [r0, #16]
   d57b0:	f7ff b8e0 	b.w	d4974 <HAL_USB_USART_Flush_Data>

000d57b4 <_ZN9USBSerialD0Ev>:
   d57b4:	b510      	push	{r4, lr}
   d57b6:	2114      	movs	r1, #20
   d57b8:	4604      	mov	r4, r0
   d57ba:	f000 fe6b 	bl	d6494 <_ZdlPvj>
   d57be:	4620      	mov	r0, r4
   d57c0:	bd10      	pop	{r4, pc}

000d57c2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d57c2:	b538      	push	{r3, r4, r5, lr}
   d57c4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d57c6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d57c8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d57ca:	f7ff f8bb 	bl	d4944 <HAL_USB_USART_Available_Data_For_Write>
   d57ce:	2800      	cmp	r0, #0
   d57d0:	dc01      	bgt.n	d57d6 <_ZN9USBSerial5writeEh+0x14>
   d57d2:	7c60      	ldrb	r0, [r4, #17]
   d57d4:	b128      	cbz	r0, d57e2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d57d6:	4629      	mov	r1, r5
   d57d8:	7c20      	ldrb	r0, [r4, #16]
   d57da:	f7ff f8c3 	bl	d4964 <HAL_USB_USART_Send_Data>
   d57de:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d57e2:	bd38      	pop	{r3, r4, r5, pc}

000d57e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d57e4:	b510      	push	{r4, lr}
   d57e6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d57e8:	2300      	movs	r3, #0
   d57ea:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d57ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57f0:	60a3      	str	r3, [r4, #8]
   d57f2:	4b05      	ldr	r3, [pc, #20]	; (d5808 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d57f4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d57f6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d57f8:	4608      	mov	r0, r1
{
  _serial = serial;
   d57fa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d57fc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d57fe:	4611      	mov	r1, r2
   d5800:	f7ff f888 	bl	d4914 <HAL_USB_USART_Init>
}
   d5804:	4620      	mov	r0, r4
   d5806:	bd10      	pop	{r4, pc}
   d5808:	000d6c7c 	.word	0x000d6c7c

000d580c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d580c:	2200      	movs	r2, #0
   d580e:	7c00      	ldrb	r0, [r0, #16]
   d5810:	f7ff b888 	b.w	d4924 <HAL_USB_USART_Begin>

000d5814 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5814:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5816:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5818:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d581a:	2100      	movs	r1, #0
   d581c:	f000 ffb5 	bl	d678a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5820:	4620      	mov	r0, r4
   d5822:	bd10      	pop	{r4, pc}

000d5824 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5824:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5826:	4d0e      	ldr	r5, [pc, #56]	; (d5860 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5828:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d582a:	a801      	add	r0, sp, #4
   d582c:	f7ff fff2 	bl	d5814 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5830:	6829      	ldr	r1, [r5, #0]
   d5832:	f011 0401 	ands.w	r4, r1, #1
   d5836:	d110      	bne.n	d585a <_Z16_fetch_usbserialv+0x36>
   d5838:	4628      	mov	r0, r5
   d583a:	f7fe fc32 	bl	d40a2 <__cxa_guard_acquire>
   d583e:	b160      	cbz	r0, d585a <_Z16_fetch_usbserialv+0x36>
   d5840:	aa01      	add	r2, sp, #4
   d5842:	4621      	mov	r1, r4
   d5844:	4807      	ldr	r0, [pc, #28]	; (d5864 <_Z16_fetch_usbserialv+0x40>)
   d5846:	f7ff ffcd 	bl	d57e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d584a:	4628      	mov	r0, r5
   d584c:	f7fe fc2e 	bl	d40ac <__cxa_guard_release>
   d5850:	4a05      	ldr	r2, [pc, #20]	; (d5868 <_Z16_fetch_usbserialv+0x44>)
   d5852:	4906      	ldr	r1, [pc, #24]	; (d586c <_Z16_fetch_usbserialv+0x48>)
   d5854:	4803      	ldr	r0, [pc, #12]	; (d5864 <_Z16_fetch_usbserialv+0x40>)
   d5856:	f000 fe0f 	bl	d6478 <__aeabi_atexit>
	return _usbserial;
}
   d585a:	4802      	ldr	r0, [pc, #8]	; (d5864 <_Z16_fetch_usbserialv+0x40>)
   d585c:	b007      	add	sp, #28
   d585e:	bd30      	pop	{r4, r5, pc}
   d5860:	2003e404 	.word	0x2003e404
   d5864:	2003e408 	.word	0x2003e408
   d5868:	2003df34 	.word	0x2003df34
   d586c:	000d5765 	.word	0x000d5765

000d5870 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5870:	4770      	bx	lr

000d5872 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5872:	7441      	strb	r1, [r0, #17]
   d5874:	4770      	bx	lr

000d5876 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5876:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5878:	7c00      	ldrb	r0, [r0, #16]
   d587a:	f7fe ffdb 	bl	d4834 <HAL_USART_Available_Data_For_Write>
}
   d587e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5882:	bd08      	pop	{r3, pc}

000d5884 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5884:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5886:	7c00      	ldrb	r0, [r0, #16]
   d5888:	f7fe ffac 	bl	d47e4 <HAL_USART_Available_Data>
}
   d588c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5890:	bd08      	pop	{r3, pc}

000d5892 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5892:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5894:	7c00      	ldrb	r0, [r0, #16]
   d5896:	f7fe ffb5 	bl	d4804 <HAL_USART_Peek_Data>
}
   d589a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d589e:	bf28      	it	cs
   d58a0:	f04f 30ff 	movcs.w	r0, #4294967295
   d58a4:	bd08      	pop	{r3, pc}

000d58a6 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d58a6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d58a8:	7c00      	ldrb	r0, [r0, #16]
   d58aa:	f7fe ffa3 	bl	d47f4 <HAL_USART_Read_Data>
}
   d58ae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d58b2:	bf28      	it	cs
   d58b4:	f04f 30ff 	movcs.w	r0, #4294967295
   d58b8:	bd08      	pop	{r3, pc}

000d58ba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d58ba:	7c00      	ldrb	r0, [r0, #16]
   d58bc:	f7fe bfaa 	b.w	d4814 <HAL_USART_Flush_Data>

000d58c0 <_ZN11USARTSerialD0Ev>:
   d58c0:	b510      	push	{r4, lr}
   d58c2:	2114      	movs	r1, #20
   d58c4:	4604      	mov	r4, r0
   d58c6:	f000 fde5 	bl	d6494 <_ZdlPvj>
   d58ca:	4620      	mov	r0, r4
   d58cc:	bd10      	pop	{r4, pc}

000d58ce <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d58ce:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d58d0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d58d2:	4604      	mov	r4, r0
   d58d4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d58d6:	b925      	cbnz	r5, d58e2 <_ZN11USARTSerial5writeEh+0x14>
   d58d8:	7c00      	ldrb	r0, [r0, #16]
   d58da:	f7fe ffab 	bl	d4834 <HAL_USART_Available_Data_For_Write>
   d58de:	2800      	cmp	r0, #0
   d58e0:	dd05      	ble.n	d58ee <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d58e2:	4631      	mov	r1, r6
   d58e4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d58e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d58ea:	f7fe bf73 	b.w	d47d4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d58ee:	4628      	mov	r0, r5
   d58f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d58f4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d58f4:	b510      	push	{r4, lr}
   d58f6:	4604      	mov	r4, r0
   d58f8:	4608      	mov	r0, r1
   d58fa:	4611      	mov	r1, r2
   d58fc:	2200      	movs	r2, #0
   d58fe:	6062      	str	r2, [r4, #4]
   d5900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5904:	60a2      	str	r2, [r4, #8]
   d5906:	4a05      	ldr	r2, [pc, #20]	; (d591c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5908:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d590a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d590c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d590e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5910:	461a      	mov	r2, r3
   d5912:	f7fe ff57 	bl	d47c4 <HAL_USART_Init>
}
   d5916:	4620      	mov	r0, r4
   d5918:	bd10      	pop	{r4, pc}
   d591a:	bf00      	nop
   d591c:	000d6cac 	.word	0x000d6cac

000d5920 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5920:	7c00      	ldrb	r0, [r0, #16]
   d5922:	f7fe bf7f 	b.w	d4824 <HAL_USART_Is_Enabled>
	...

000d5928 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5928:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d592a:	4d0c      	ldr	r5, [pc, #48]	; (d595c <_Z22__fetch_global_Serial1v+0x34>)
   d592c:	6829      	ldr	r1, [r5, #0]
   d592e:	f011 0401 	ands.w	r4, r1, #1
   d5932:	d111      	bne.n	d5958 <_Z22__fetch_global_Serial1v+0x30>
   d5934:	4628      	mov	r0, r5
   d5936:	f7fe fbb4 	bl	d40a2 <__cxa_guard_acquire>
   d593a:	b168      	cbz	r0, d5958 <_Z22__fetch_global_Serial1v+0x30>
   d593c:	4a08      	ldr	r2, [pc, #32]	; (d5960 <_Z22__fetch_global_Serial1v+0x38>)
   d593e:	4b09      	ldr	r3, [pc, #36]	; (d5964 <_Z22__fetch_global_Serial1v+0x3c>)
   d5940:	4809      	ldr	r0, [pc, #36]	; (d5968 <_Z22__fetch_global_Serial1v+0x40>)
   d5942:	4621      	mov	r1, r4
   d5944:	f7ff ffd6 	bl	d58f4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5948:	4628      	mov	r0, r5
   d594a:	f7fe fbaf 	bl	d40ac <__cxa_guard_release>
   d594e:	4a07      	ldr	r2, [pc, #28]	; (d596c <_Z22__fetch_global_Serial1v+0x44>)
   d5950:	4907      	ldr	r1, [pc, #28]	; (d5970 <_Z22__fetch_global_Serial1v+0x48>)
   d5952:	4805      	ldr	r0, [pc, #20]	; (d5968 <_Z22__fetch_global_Serial1v+0x40>)
   d5954:	f000 fd90 	bl	d6478 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5958:	4803      	ldr	r0, [pc, #12]	; (d5968 <_Z22__fetch_global_Serial1v+0x40>)
   d595a:	bd38      	pop	{r3, r4, r5, pc}
   d595c:	2003e4b4 	.word	0x2003e4b4
   d5960:	2003e4b8 	.word	0x2003e4b8
   d5964:	2003e430 	.word	0x2003e430
   d5968:	2003e41c 	.word	0x2003e41c
   d596c:	2003df34 	.word	0x2003df34
   d5970:	000d5871 	.word	0x000d5871

000d5974 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5974:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5976:	6883      	ldr	r3, [r0, #8]
   d5978:	4604      	mov	r4, r0
   d597a:	b90b      	cbnz	r3, d5980 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d597c:	f000 fd9d 	bl	d64ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5980:	68c3      	ldr	r3, [r0, #12]
   d5982:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5984:	68a3      	ldr	r3, [r4, #8]
   d5986:	b11b      	cbz	r3, d5990 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5988:	2203      	movs	r2, #3
   d598a:	4621      	mov	r1, r4
   d598c:	4620      	mov	r0, r4
   d598e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5990:	4620      	mov	r0, r4
   d5992:	2110      	movs	r1, #16
}
   d5994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5998:	f000 bd7c 	b.w	d6494 <_ZdlPvj>

000d599c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d599c:	4770      	bx	lr

000d599e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d599e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d59a0:	4606      	mov	r6, r0
   d59a2:	4615      	mov	r5, r2
   d59a4:	460c      	mov	r4, r1
   d59a6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d59a8:	42bc      	cmp	r4, r7
   d59aa:	d006      	beq.n	d59ba <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d59ac:	6833      	ldr	r3, [r6, #0]
   d59ae:	f814 1b01 	ldrb.w	r1, [r4], #1
   d59b2:	689b      	ldr	r3, [r3, #8]
   d59b4:	4630      	mov	r0, r6
   d59b6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d59b8:	e7f6      	b.n	d59a8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d59ba:	4628      	mov	r0, r5
   d59bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d59be <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d59be:	2200      	movs	r2, #0
   d59c0:	7c00      	ldrb	r0, [r0, #16]
   d59c2:	f7fe bf3f 	b.w	d4844 <HAL_I2C_Write_Data>

000d59c6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d59c6:	2100      	movs	r1, #0
   d59c8:	7c00      	ldrb	r0, [r0, #16]
   d59ca:	f7fe bf43 	b.w	d4854 <HAL_I2C_Available_Data>

000d59ce <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d59ce:	2100      	movs	r1, #0
   d59d0:	7c00      	ldrb	r0, [r0, #16]
   d59d2:	f7fe bf47 	b.w	d4864 <HAL_I2C_Read_Data>

000d59d6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d59d6:	2100      	movs	r1, #0
   d59d8:	7c00      	ldrb	r0, [r0, #16]
   d59da:	f7fe bf4b 	b.w	d4874 <HAL_I2C_Peek_Data>

000d59de <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d59de:	2100      	movs	r1, #0
   d59e0:	7c00      	ldrb	r0, [r0, #16]
   d59e2:	f7fe bf4f 	b.w	d4884 <HAL_I2C_Flush_Data>

000d59e6 <_ZN7TwoWireD0Ev>:
   d59e6:	b510      	push	{r4, lr}
   d59e8:	2114      	movs	r1, #20
   d59ea:	4604      	mov	r4, r0
   d59ec:	f000 fd52 	bl	d6494 <_ZdlPvj>
   d59f0:	4620      	mov	r0, r4
   d59f2:	bd10      	pop	{r4, pc}

000d59f4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d59f4:	b510      	push	{r4, lr}
   d59f6:	4604      	mov	r4, r0
   d59f8:	2300      	movs	r3, #0
   d59fa:	6063      	str	r3, [r4, #4]
   d59fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5a00:	60a3      	str	r3, [r4, #8]
   d5a02:	4b04      	ldr	r3, [pc, #16]	; (d5a14 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5a04:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5a06:	4608      	mov	r0, r1
   d5a08:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5a0a:	4611      	mov	r1, r2
   d5a0c:	f7fe ff4a 	bl	d48a4 <HAL_I2C_Init>
}
   d5a10:	4620      	mov	r0, r4
   d5a12:	bd10      	pop	{r4, pc}
   d5a14:	000d6cdc 	.word	0x000d6cdc

000d5a18 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5a18:	2100      	movs	r1, #0
   d5a1a:	7c00      	ldrb	r0, [r0, #16]
   d5a1c:	f7fe bf3a 	b.w	d4894 <HAL_I2C_Is_Enabled>

000d5a20 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5a20:	2200      	movs	r2, #0
   d5a22:	4611      	mov	r1, r2
   d5a24:	6840      	ldr	r0, [r0, #4]
   d5a26:	f7ff b821 	b.w	d4a6c <network_listening>

000d5a2a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5a2a:	2200      	movs	r2, #0
   d5a2c:	4611      	mov	r1, r2
   d5a2e:	6840      	ldr	r0, [r0, #4]
   d5a30:	f7ff b82c 	b.w	d4a8c <network_get_listen_timeout>

000d5a34 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5a34:	2200      	movs	r2, #0
   d5a36:	6840      	ldr	r0, [r0, #4]
   d5a38:	f7ff b820 	b.w	d4a7c <network_set_listen_timeout>

000d5a3c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a3c:	2200      	movs	r2, #0
   d5a3e:	f081 0101 	eor.w	r1, r1, #1
   d5a42:	6840      	ldr	r0, [r0, #4]
   d5a44:	f7ff b80a 	b.w	d4a5c <network_listen>

000d5a48 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5a48:	2300      	movs	r3, #0
   d5a4a:	461a      	mov	r2, r3
   d5a4c:	2101      	movs	r1, #1
   d5a4e:	6840      	ldr	r0, [r0, #4]
   d5a50:	f7fe bffc 	b.w	d4a4c <network_off>

000d5a54 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5a54:	2300      	movs	r3, #0
   d5a56:	461a      	mov	r2, r3
   d5a58:	4619      	mov	r1, r3
   d5a5a:	6840      	ldr	r0, [r0, #4]
   d5a5c:	f7fe bfee 	b.w	d4a3c <network_on>

000d5a60 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5a60:	2200      	movs	r2, #0
   d5a62:	4611      	mov	r1, r2
   d5a64:	6840      	ldr	r0, [r0, #4]
   d5a66:	f7fe bfe1 	b.w	d4a2c <network_ready>

000d5a6a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5a6a:	2200      	movs	r2, #0
   d5a6c:	4611      	mov	r1, r2
   d5a6e:	6840      	ldr	r0, [r0, #4]
   d5a70:	f7fe bfcc 	b.w	d4a0c <network_connecting>

000d5a74 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5a74:	2200      	movs	r2, #0
   d5a76:	2102      	movs	r1, #2
   d5a78:	6840      	ldr	r0, [r0, #4]
   d5a7a:	f7fe bfcf 	b.w	d4a1c <network_disconnect>

000d5a7e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5a7e:	2300      	movs	r3, #0
   d5a80:	461a      	mov	r2, r3
   d5a82:	6840      	ldr	r0, [r0, #4]
   d5a84:	f7fe bfba 	b.w	d49fc <network_connect>

000d5a88 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5a88:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a8a:	4605      	mov	r5, r0
   d5a8c:	b188      	cbz	r0, d5ab2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a8e:	6804      	ldr	r4, [r0, #0]
   d5a90:	b14c      	cbz	r4, d5aa6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5a92:	68a3      	ldr	r3, [r4, #8]
   d5a94:	b11b      	cbz	r3, d5a9e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a96:	2203      	movs	r2, #3
   d5a98:	4621      	mov	r1, r4
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a9e:	2110      	movs	r1, #16
   d5aa0:	4620      	mov	r0, r4
   d5aa2:	f000 fcf7 	bl	d6494 <_ZdlPvj>
   d5aa6:	4628      	mov	r0, r5
   d5aa8:	2114      	movs	r1, #20
      }
   d5aaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5aae:	f000 bcf1 	b.w	d6494 <_ZdlPvj>
   d5ab2:	bd38      	pop	{r3, r4, r5, pc}

000d5ab4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d5ab4:	b110      	cbz	r0, d5abc <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d5ab6:	6803      	ldr	r3, [r0, #0]
   d5ab8:	685b      	ldr	r3, [r3, #4]
   d5aba:	4718      	bx	r3
   d5abc:	4770      	bx	lr

000d5abe <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d5abe:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5ac0:	6803      	ldr	r3, [r0, #0]
   d5ac2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5ac4:	b1bb      	cbz	r3, d5af6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5ac6:	6858      	ldr	r0, [r3, #4]
   d5ac8:	f7fe fe3c 	bl	d4744 <os_thread_is_current>
   d5acc:	b978      	cbnz	r0, d5aee <_ZN6ThreadD1Ev+0x30>
   d5ace:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5ad0:	7c5a      	ldrb	r2, [r3, #17]
   d5ad2:	b912      	cbnz	r2, d5ada <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5ad4:	6858      	ldr	r0, [r3, #4]
   d5ad6:	f7fe fe3d 	bl	d4754 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d5ada:	6823      	ldr	r3, [r4, #0]
   d5adc:	6858      	ldr	r0, [r3, #4]
   d5ade:	f7fe fe41 	bl	d4764 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ae2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5ae4:	2300      	movs	r3, #0
   d5ae6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5ae8:	b128      	cbz	r0, d5af6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5aea:	f7ff ffcd 	bl	d5a88 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5aee:	6820      	ldr	r0, [r4, #0]
   d5af0:	b108      	cbz	r0, d5af6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5af2:	f7ff ffc9 	bl	d5a88 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5af6:	4620      	mov	r0, r4
   d5af8:	bd10      	pop	{r4, pc}

000d5afa <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5afa:	b538      	push	{r3, r4, r5, lr}
   d5afc:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5afe:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5b02:	b108      	cbz	r0, d5b08 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5b04:	f7fe facb 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5b08:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5b0c:	b108      	cbz	r0, d5b12 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d5b0e:	f7fe fe39 	bl	d4784 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b12:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5b16:	b135      	cbz	r5, d5b26 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b18:	4628      	mov	r0, r5
   d5b1a:	f7ff ffd0 	bl	d5abe <_ZN6ThreadD1Ev>
   d5b1e:	2104      	movs	r1, #4
   d5b20:	4628      	mov	r0, r5
   d5b22:	f000 fcb7 	bl	d6494 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b26:	6820      	ldr	r0, [r4, #0]
   d5b28:	b108      	cbz	r0, d5b2e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5b2a:	f7ff ffc3 	bl	d5ab4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d5b2e:	4620      	mov	r0, r4
   d5b30:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5b34 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5b34:	b510      	push	{r4, lr}
   d5b36:	4b04      	ldr	r3, [pc, #16]	; (d5b48 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5b38:	4604      	mov	r4, r0
   d5b3a:	f840 3b08 	str.w	r3, [r0], #8
   d5b3e:	f7ff ffdc 	bl	d5afa <_ZN5spark11MeshPublishD1Ev>
   d5b42:	4620      	mov	r0, r4
   d5b44:	bd10      	pop	{r4, pc}
   d5b46:	bf00      	nop
   d5b48:	000d6d04 	.word	0x000d6d04

000d5b4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5b4c:	b538      	push	{r3, r4, r5, lr}
   d5b4e:	4c0e      	ldr	r4, [pc, #56]	; (d5b88 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d5b50:	4b0e      	ldr	r3, [pc, #56]	; (d5b8c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d5b52:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5b54:	2500      	movs	r5, #0
   d5b56:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5b58:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5b5c:	6063      	str	r3, [r4, #4]
   d5b5e:	60a5      	str	r5, [r4, #8]
   d5b60:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b64:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5b68:	f7fe fe04 	bl	d4774 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5b6c:	4b08      	ldr	r3, [pc, #32]	; (d5b90 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d5b6e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5b72:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5b76:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5b78:	4620      	mov	r0, r4
   d5b7a:	4a06      	ldr	r2, [pc, #24]	; (d5b94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5b7c:	4906      	ldr	r1, [pc, #24]	; (d5b98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d5b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5b82:	f000 bc79 	b.w	d6478 <__aeabi_atexit>
   d5b86:	bf00      	nop
   d5b88:	2003e53c 	.word	0x2003e53c
   d5b8c:	000d6dec 	.word	0x000d6dec
   d5b90:	000d6d04 	.word	0x000d6d04
   d5b94:	2003df34 	.word	0x2003df34
   d5b98:	000d5b35 	.word	0x000d5b35

000d5b9c <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5b9e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5ba0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d5ba2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d5ba6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5ba8:	2201      	movs	r2, #1
   d5baa:	f04f 33ff 	mov.w	r3, #4294967295
   d5bae:	4621      	mov	r1, r4
   d5bb0:	47a8      	blx	r5
}
   d5bb2:	b003      	add	sp, #12
   d5bb4:	bd30      	pop	{r4, r5, pc}

000d5bb6 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d5bb6:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5bb8:	6803      	ldr	r3, [r0, #0]
   d5bba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d5bbc:	f04f 33ff 	mov.w	r3, #4294967295
   d5bc0:	46a4      	mov	ip, r4
}
   d5bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d5bc6:	4760      	bx	ip

000d5bc8 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5bca:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d5bcc:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d5bce:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d5bd2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d5bd4:	4621      	mov	r1, r4
   d5bd6:	4613      	mov	r3, r2
   d5bd8:	2201      	movs	r2, #1
   d5bda:	47a8      	blx	r5
}
   d5bdc:	b003      	add	sp, #12
   d5bde:	bd30      	pop	{r4, r5, pc}

000d5be0 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d5be0:	4770      	bx	lr

000d5be2 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5be2:	b538      	push	{r3, r4, r5, lr}
   d5be4:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d5be6:	681a      	ldr	r2, [r3, #0]
   d5be8:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d5bea:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d5bec:	da05      	bge.n	d5bfa <_ZN9TCPClient9connectedEv+0x18>
   d5bee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5bf2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5bf6:	429a      	cmp	r2, r3
   d5bf8:	d001      	beq.n	d5bfe <_ZN9TCPClient9connectedEv+0x1c>
   d5bfa:	2501      	movs	r5, #1
   d5bfc:	e00b      	b.n	d5c16 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d5bfe:	6803      	ldr	r3, [r0, #0]
   d5c00:	691b      	ldr	r3, [r3, #16]
   d5c02:	4798      	blx	r3
   d5c04:	2800      	cmp	r0, #0
   d5c06:	bf14      	ite	ne
   d5c08:	2501      	movne	r5, #1
   d5c0a:	2500      	moveq	r5, #0
        if (!rv) {
   d5c0c:	d103      	bne.n	d5c16 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d5c0e:	6823      	ldr	r3, [r4, #0]
   d5c10:	4620      	mov	r0, r4
   d5c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c14:	4798      	blx	r3
        }
    }
    return rv;
}
   d5c16:	4628      	mov	r0, r5
   d5c18:	bd38      	pop	{r3, r4, r5, pc}

000d5c1a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d5c1a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d5c1c:	6818      	ldr	r0, [r3, #0]
}
   d5c1e:	43c0      	mvns	r0, r0
   d5c20:	0fc0      	lsrs	r0, r0, #31
   d5c22:	4770      	bx	lr

000d5c24 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5c24:	4770      	bx	lr

000d5c26 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5c26:	2000      	movs	r0, #0
   d5c28:	4770      	bx	lr

000d5c2a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5c2a:	b510      	push	{r4, lr}
   d5c2c:	2114      	movs	r1, #20
   d5c2e:	4604      	mov	r4, r0
   d5c30:	f000 fc30 	bl	d6494 <_ZdlPvj>
   d5c34:	4620      	mov	r0, r4
   d5c36:	bd10      	pop	{r4, pc}

000d5c38 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5c38:	f7fe ba2f 	b.w	d409a <_ZdlPv>

000d5c3c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5c3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5c3e:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d5c40:	2200      	movs	r2, #0
   d5c42:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d5c44:	9202      	str	r2, [sp, #8]
   d5c46:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5c48:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d5c4a:	4604      	mov	r4, r0
   d5c4c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d5c4e:	d008      	beq.n	d5c62 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d5c50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5c54:	fbb3 f1f2 	udiv	r1, r3, r2
   d5c58:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d5c5a:	fb02 3111 	mls	r1, r2, r1, r3
   d5c5e:	434a      	muls	r2, r1
   d5c60:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d5c62:	6960      	ldr	r0, [r4, #20]
   d5c64:	2308      	movs	r3, #8
   d5c66:	9300      	str	r3, [sp, #0]
   d5c68:	f241 0205 	movw	r2, #4101	; 0x1005
   d5c6c:	446b      	add	r3, sp
   d5c6e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5c72:	6800      	ldr	r0, [r0, #0]
   d5c74:	f7fe fe1e 	bl	d48b4 <sock_setsockopt>
    if (ret < 0) {
   d5c78:	2800      	cmp	r0, #0
   d5c7a:	db08      	blt.n	d5c8e <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d5c7c:	6960      	ldr	r0, [r4, #20]
   d5c7e:	2300      	movs	r3, #0
   d5c80:	4632      	mov	r2, r6
   d5c82:	4629      	mov	r1, r5
   d5c84:	6800      	ldr	r0, [r0, #0]
   d5c86:	f7fe fe35 	bl	d48f4 <sock_send>
    if (ret < 0) {
   d5c8a:	2800      	cmp	r0, #0
   d5c8c:	da04      	bge.n	d5c98 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d5c8e:	f7fe ff55 	bl	d4b3c <__errno>
   d5c92:	6803      	ldr	r3, [r0, #0]
   d5c94:	6063      	str	r3, [r4, #4]
   d5c96:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d5c98:	b004      	add	sp, #16
   d5c9a:	bd70      	pop	{r4, r5, r6, pc}

000d5c9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5c9c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5c9e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5ca0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5ca2:	689b      	ldr	r3, [r3, #8]
   d5ca4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5ca6:	68a3      	ldr	r3, [r4, #8]
   d5ca8:	3b01      	subs	r3, #1
   d5caa:	60a3      	str	r3, [r4, #8]
   d5cac:	b92b      	cbnz	r3, d5cba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d5cae:	6823      	ldr	r3, [r4, #0]
   d5cb0:	4620      	mov	r0, r4
   d5cb2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5cb8:	4718      	bx	r3
   d5cba:	bd10      	pop	{r4, pc}

000d5cbc <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d5cbc:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5cbe:	4604      	mov	r4, r0
   d5cc0:	694d      	ldr	r5, [r1, #20]
   d5cc2:	4b05      	ldr	r3, [pc, #20]	; (d5cd8 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d5cc4:	f844 3b04 	str.w	r3, [r4], #4
   d5cc8:	358c      	adds	r5, #140	; 0x8c
   d5cca:	4606      	mov	r6, r0
   d5ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5cd0:	682b      	ldr	r3, [r5, #0]
   d5cd2:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d5cd4:	4630      	mov	r0, r6
   d5cd6:	bd70      	pop	{r4, r5, r6, pc}
   d5cd8:	000d6c68 	.word	0x000d6c68

000d5cdc <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5cdc:	b510      	push	{r4, lr}
   d5cde:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5ce0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5ce4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5ce8:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d5cea:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d5cec:	d005      	beq.n	d5cfa <_ZN9TCPClient4peekEv+0x1e>
   d5cee:	6962      	ldr	r2, [r4, #20]
   d5cf0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5cf4:	4413      	add	r3, r2
   d5cf6:	7918      	ldrb	r0, [r3, #4]
   d5cf8:	bd10      	pop	{r4, pc}
   d5cfa:	6803      	ldr	r3, [r0, #0]
   d5cfc:	691b      	ldr	r3, [r3, #16]
   d5cfe:	4798      	blx	r3
   d5d00:	2800      	cmp	r0, #0
   d5d02:	d1f4      	bne.n	d5cee <_ZN9TCPClient4peekEv+0x12>
   d5d04:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5d08:	bd10      	pop	{r4, pc}

000d5d0a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5d0a:	b510      	push	{r4, lr}
   d5d0c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5d0e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5d12:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5d16:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d5d18:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d5d1a:	d008      	beq.n	d5d2e <_ZN9TCPClient4readEv+0x24>
   d5d1c:	6962      	ldr	r2, [r4, #20]
   d5d1e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5d22:	1c59      	adds	r1, r3, #1
   d5d24:	4413      	add	r3, r2
   d5d26:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d5d2a:	7918      	ldrb	r0, [r3, #4]
   d5d2c:	bd10      	pop	{r4, pc}
   d5d2e:	6803      	ldr	r3, [r0, #0]
   d5d30:	691b      	ldr	r3, [r3, #16]
   d5d32:	4798      	blx	r3
   d5d34:	2800      	cmp	r0, #0
   d5d36:	d1f1      	bne.n	d5d1c <_ZN9TCPClient4readEv+0x12>
   d5d38:	f04f 30ff 	mov.w	r0, #4294967295
}
   d5d3c:	bd10      	pop	{r4, pc}

000d5d3e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d40:	6943      	ldr	r3, [r0, #20]
   d5d42:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d5d44:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5d48:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d5d4c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d5d4e:	4605      	mov	r5, r0
   d5d50:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d5d52:	d106      	bne.n	d5d62 <_ZN9TCPClient4readEPhj+0x24>
   d5d54:	6803      	ldr	r3, [r0, #0]
   d5d56:	691b      	ldr	r3, [r3, #16]
   d5d58:	4798      	blx	r3
   d5d5a:	b910      	cbnz	r0, d5d62 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d5d5c:	f04f 34ff 	mov.w	r4, #4294967295
   d5d60:	e014      	b.n	d5d8c <_ZN9TCPClient4readEPhj+0x4e>
   d5d62:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d5d64:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d5d68:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d5d6c:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d5d6e:	42bc      	cmp	r4, r7
   d5d70:	bf28      	it	cs
   d5d72:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d5d74:	4419      	add	r1, r3
   d5d76:	4622      	mov	r2, r4
   d5d78:	3104      	adds	r1, #4
   d5d7a:	4630      	mov	r0, r6
   d5d7c:	f000 fcfa 	bl	d6774 <memcpy>
   d5d80:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d5d82:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d5d86:	4423      	add	r3, r4
   d5d88:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d5d8c:	4620      	mov	r0, r4
   d5d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d90 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d94:	4698      	mov	r8, r3
    stop();
   d5d96:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5d98:	b093      	sub	sp, #76	; 0x4c
    stop();
   d5d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d5d9c:	460d      	mov	r5, r1
   d5d9e:	4606      	mov	r6, r0
   d5da0:	4617      	mov	r7, r2
    stop();
   d5da2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d5da4:	ab12      	add	r3, sp, #72	; 0x48
   d5da6:	2400      	movs	r4, #0
   d5da8:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5dac:	4622      	mov	r2, r4
   d5dae:	4621      	mov	r1, r4
   d5db0:	4628      	mov	r0, r5
   d5db2:	f7fe fc67 	bl	d4684 <netdb_getaddrinfo>
   d5db6:	4681      	mov	r9, r0
   d5db8:	2800      	cmp	r0, #0
   d5dba:	d13d      	bne.n	d5e38 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d5dbc:	9b00      	ldr	r3, [sp, #0]
   d5dbe:	2b00      	cmp	r3, #0
   d5dc0:	d056      	beq.n	d5e70 <_ZN9TCPClient7connectEPKctm+0xe0>
   d5dc2:	695b      	ldr	r3, [r3, #20]
   d5dc4:	2b00      	cmp	r3, #0
   d5dc6:	d053      	beq.n	d5e70 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d5dc8:	a806      	add	r0, sp, #24
   d5dca:	f7ff fc7b 	bl	d56c4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d5dce:	9b00      	ldr	r3, [sp, #0]
   d5dd0:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d5dd2:	7863      	ldrb	r3, [r4, #1]
   d5dd4:	2b02      	cmp	r3, #2
   d5dd6:	d101      	bne.n	d5ddc <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d5dd8:	1d21      	adds	r1, r4, #4
   d5dda:	e013      	b.n	d5e04 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d5ddc:	2b0a      	cmp	r3, #10
   d5dde:	d114      	bne.n	d5e0a <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d5de0:	2211      	movs	r2, #17
   d5de2:	4649      	mov	r1, r9
   d5de4:	a801      	add	r0, sp, #4
   d5de6:	f000 fcd0 	bl	d678a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d5dea:	68a3      	ldr	r3, [r4, #8]
   d5dec:	bb33      	cbnz	r3, d5e3c <_ZN9TCPClient7connectEPKctm+0xac>
   d5dee:	68e3      	ldr	r3, [r4, #12]
   d5df0:	bb23      	cbnz	r3, d5e3c <_ZN9TCPClient7connectEPKctm+0xac>
   d5df2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5df6:	6925      	ldr	r5, [r4, #16]
   d5df8:	f7fe fcd4 	bl	d47a4 <inet_htonl>
   d5dfc:	4285      	cmp	r5, r0
   d5dfe:	d11d      	bne.n	d5e3c <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d5e00:	f104 0114 	add.w	r1, r4, #20
   d5e04:	a806      	add	r0, sp, #24
   d5e06:	f7ff fca0 	bl	d574a <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d5e0a:	a806      	add	r0, sp, #24
   d5e0c:	f7ff fc7a 	bl	d5704 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d5e10:	2800      	cmp	r0, #0
   d5e12:	d02d      	beq.n	d5e70 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d5e14:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5e16:	ad07      	add	r5, sp, #28
   d5e18:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d5e1c:	4b18      	ldr	r3, [pc, #96]	; (d5e80 <_ZN9TCPClient7connectEPKctm+0xf0>)
   d5e1e:	930c      	str	r3, [sp, #48]	; 0x30
   d5e20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e22:	ac0d      	add	r4, sp, #52	; 0x34
   d5e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e26:	682b      	ldr	r3, [r5, #0]
   d5e28:	7023      	strb	r3, [r4, #0]
   d5e2a:	463a      	mov	r2, r7
   d5e2c:	4643      	mov	r3, r8
   d5e2e:	a90c      	add	r1, sp, #48	; 0x30
   d5e30:	4630      	mov	r0, r6
   d5e32:	47c8      	blx	r9
   d5e34:	4681      	mov	r9, r0
   d5e36:	e01b      	b.n	d5e70 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d5e38:	46a1      	mov	r9, r4
   d5e3a:	e019      	b.n	d5e70 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5e3c:	f104 0308 	add.w	r3, r4, #8
   d5e40:	ad01      	add	r5, sp, #4
   d5e42:	3418      	adds	r4, #24
   d5e44:	6818      	ldr	r0, [r3, #0]
   d5e46:	6859      	ldr	r1, [r3, #4]
   d5e48:	462a      	mov	r2, r5
   d5e4a:	c203      	stmia	r2!, {r0, r1}
   d5e4c:	3308      	adds	r3, #8
   d5e4e:	42a3      	cmp	r3, r4
   d5e50:	4615      	mov	r5, r2
   d5e52:	d1f7      	bne.n	d5e44 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d5e54:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d5e56:	a901      	add	r1, sp, #4
   d5e58:	a80c      	add	r0, sp, #48	; 0x30
   d5e5a:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d5e5c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d5e60:	f7ff fc3e 	bl	d56e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e66:	ac07      	add	r4, sp, #28
   d5e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e6a:	682b      	ldr	r3, [r5, #0]
   d5e6c:	7023      	strb	r3, [r4, #0]
   d5e6e:	e7cc      	b.n	d5e0a <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d5e70:	9800      	ldr	r0, [sp, #0]
   d5e72:	f7fe fbff 	bl	d4674 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d5e76:	4648      	mov	r0, r9
   d5e78:	b013      	add	sp, #76	; 0x4c
   d5e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5e7e:	bf00      	nop
   d5e80:	000d6c68 	.word	0x000d6c68

000d5e84 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d5e84:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d5e86:	2300      	movs	r3, #0
   d5e88:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d5e8c:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d5e8e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d5e92:	4770      	bx	lr

000d5e94 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e98:	461e      	mov	r6, r3
    stop();
   d5e9a:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5e9c:	460c      	mov	r4, r1
   d5e9e:	b08a      	sub	sp, #40	; 0x28
    stop();
   d5ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d5ea2:	4605      	mov	r5, r0
   d5ea4:	4617      	mov	r7, r2
    stop();
   d5ea6:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d5ea8:	7d23      	ldrb	r3, [r4, #20]
   d5eaa:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d5eae:	2b04      	cmp	r3, #4
   d5eb0:	bf0c      	ite	eq
   d5eb2:	2002      	moveq	r0, #2
   d5eb4:	200a      	movne	r0, #10
   d5eb6:	2206      	movs	r2, #6
   d5eb8:	2101      	movs	r1, #1
   d5eba:	f7fe fd23 	bl	d4904 <sock_socket>
   d5ebe:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d5ec2:	696b      	ldr	r3, [r5, #20]
   d5ec4:	681b      	ldr	r3, [r3, #0]
   d5ec6:	2b00      	cmp	r3, #0
   d5ec8:	db18      	blt.n	d5efc <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d5eca:	4628      	mov	r0, r5
   d5ecc:	f7ff ffda 	bl	d5e84 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d5ed0:	b1d6      	cbz	r6, d5f08 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d5ed2:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5ed4:	a903      	add	r1, sp, #12
   d5ed6:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d5ed8:	9303      	str	r3, [sp, #12]
   d5eda:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5ede:	f7fe fc19 	bl	d4714 <if_index_to_name>
   d5ee2:	b958      	cbnz	r0, d5efc <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d5ee4:	6968      	ldr	r0, [r5, #20]
   d5ee6:	2306      	movs	r3, #6
   d5ee8:	9300      	str	r3, [sp, #0]
   d5eea:	f241 020b 	movw	r2, #4107	; 0x100b
   d5eee:	ab03      	add	r3, sp, #12
   d5ef0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d5ef4:	6800      	ldr	r0, [r0, #0]
   d5ef6:	f7fe fcdd 	bl	d48b4 <sock_setsockopt>
   d5efa:	b128      	cbz	r0, d5f08 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d5efc:	682b      	ldr	r3, [r5, #0]
   d5efe:	4628      	mov	r0, r5
   d5f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d5f02:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d5f04:	4798      	blx	r3
   d5f06:	e03b      	b.n	d5f80 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d5f08:	261c      	movs	r6, #28
   d5f0a:	4632      	mov	r2, r6
   d5f0c:	2100      	movs	r1, #0
   d5f0e:	a803      	add	r0, sp, #12
   d5f10:	f000 fc3b 	bl	d678a <memset>
    if (ip.version() == 4) {
   d5f14:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d5f16:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d5f1a:	2b04      	cmp	r3, #4
   d5f1c:	d10c      	bne.n	d5f38 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5f1e:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d5f20:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d5f22:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d5f26:	f7fe fc45 	bl	d47b4 <inet_htons>
   d5f2a:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d5f2e:	6860      	ldr	r0, [r4, #4]
   d5f30:	f7fe fc38 	bl	d47a4 <inet_htonl>
   d5f34:	9004      	str	r0, [sp, #16]
   d5f36:	e013      	b.n	d5f60 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5f38:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d5f3a:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d5f3c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d5f40:	f7fe fc38 	bl	d47b4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5f44:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d5f46:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d5f4a:	1d23      	adds	r3, r4, #4
   d5f4c:	f104 0714 	add.w	r7, r4, #20
   d5f50:	6818      	ldr	r0, [r3, #0]
   d5f52:	6859      	ldr	r1, [r3, #4]
   d5f54:	4632      	mov	r2, r6
   d5f56:	c203      	stmia	r2!, {r0, r1}
   d5f58:	3308      	adds	r3, #8
   d5f5a:	42bb      	cmp	r3, r7
   d5f5c:	4616      	mov	r6, r2
   d5f5e:	d1f7      	bne.n	d5f50 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d5f60:	696b      	ldr	r3, [r5, #20]
   d5f62:	221c      	movs	r2, #28
   d5f64:	a903      	add	r1, sp, #12
   d5f66:	6818      	ldr	r0, [r3, #0]
   d5f68:	f7fe fcb4 	bl	d48d4 <sock_connect>
   d5f6c:	2800      	cmp	r0, #0
   d5f6e:	d1c5      	bne.n	d5efc <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d5f70:	3404      	adds	r4, #4
   d5f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d5f74:	696d      	ldr	r5, [r5, #20]
   d5f76:	358c      	adds	r5, #140	; 0x8c
   d5f78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5f7a:	6823      	ldr	r3, [r4, #0]
   d5f7c:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d5f7e:	2401      	movs	r4, #1
}
   d5f80:	4620      	mov	r0, r4
   d5f82:	b00a      	add	sp, #40	; 0x28
   d5f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5f88 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5f88:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d5f8a:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d5f8c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d5f8e:	6818      	ldr	r0, [r3, #0]
   d5f90:	2800      	cmp	r0, #0
   d5f92:	db01      	blt.n	d5f98 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d5f94:	f7fe fc96 	bl	d48c4 <sock_close>
   d5f98:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d5f9a:	f04f 32ff 	mov.w	r2, #4294967295
   d5f9e:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5fa0:	6960      	ldr	r0, [r4, #20]
   d5fa2:	2211      	movs	r2, #17
   d5fa4:	2100      	movs	r1, #0
   d5fa6:	308c      	adds	r0, #140	; 0x8c
   d5fa8:	f000 fbef 	bl	d678a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d5fac:	4620      	mov	r0, r4
}
   d5fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d5fb2:	f7ff bf67 	b.w	d5e84 <_ZN9TCPClient12flush_bufferEv>
	...

000d5fb8 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5fb8:	b530      	push	{r4, r5, lr}
   d5fba:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5fbc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d5fc0:	b08b      	sub	sp, #44	; 0x2c
   d5fc2:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d5fc4:	b11b      	cbz	r3, d5fce <_ZN9TCPClient9availableEv+0x16>
   d5fc6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d5fca:	429a      	cmp	r2, r3
   d5fcc:	d040      	beq.n	d6050 <_ZN9TCPClient9availableEv+0x98>
   d5fce:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d5fd0:	6818      	ldr	r0, [r3, #0]
   d5fd2:	2800      	cmp	r0, #0
   d5fd4:	db3f      	blt.n	d6056 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d5fd6:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d5fda:	2d7f      	cmp	r5, #127	; 0x7f
   d5fdc:	d83b      	bhi.n	d6056 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d5fde:	1d19      	adds	r1, r3, #4
   d5fe0:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d5fe4:	2308      	movs	r3, #8
   d5fe6:	4429      	add	r1, r5
   d5fe8:	f7fe fc7c 	bl	d48e4 <sock_recv>
            if (ret > 0) {
   d5fec:	2800      	cmp	r0, #0
   d5fee:	dd0c      	ble.n	d600a <_ZN9TCPClient9availableEv+0x52>
   d5ff0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d5ff2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d5ff6:	b90a      	cbnz	r2, d5ffc <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d5ff8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d5ffc:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d5ffe:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d6002:	4418      	add	r0, r3
   d6004:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d6008:	e025      	b.n	d6056 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d600a:	f7fe fd97 	bl	d4b3c <__errno>
   d600e:	6803      	ldr	r3, [r0, #0]
   d6010:	2b0b      	cmp	r3, #11
   d6012:	d020      	beq.n	d6056 <_ZN9TCPClient9availableEv+0x9e>
   d6014:	f7fe fd92 	bl	d4b3c <__errno>
   d6018:	6803      	ldr	r3, [r0, #0]
   d601a:	2b0b      	cmp	r3, #11
   d601c:	d01b      	beq.n	d6056 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d601e:	2320      	movs	r3, #32
   d6020:	2500      	movs	r5, #0
   d6022:	9302      	str	r3, [sp, #8]
   d6024:	9503      	str	r5, [sp, #12]
   d6026:	f7fe fd89 	bl	d4b3c <__errno>
   d602a:	6803      	ldr	r3, [r0, #0]
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	4b0e      	ldr	r3, [pc, #56]	; (d6068 <_ZN9TCPClient9availableEv+0xb0>)
   d6030:	9300      	str	r3, [sp, #0]
   d6032:	aa02      	add	r2, sp, #8
   d6034:	462b      	mov	r3, r5
   d6036:	490d      	ldr	r1, [pc, #52]	; (d606c <_ZN9TCPClient9availableEv+0xb4>)
   d6038:	2032      	movs	r0, #50	; 0x32
   d603a:	f7fe fca3 	bl	d4984 <log_message>
                    sock_close(d_->sock);
   d603e:	6963      	ldr	r3, [r4, #20]
   d6040:	6818      	ldr	r0, [r3, #0]
   d6042:	f7fe fc3f 	bl	d48c4 <sock_close>
   d6046:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d6048:	f04f 32ff 	mov.w	r2, #4294967295
   d604c:	601a      	str	r2, [r3, #0]
   d604e:	e002      	b.n	d6056 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d6050:	f7ff ff18 	bl	d5e84 <_ZN9TCPClient12flush_bufferEv>
   d6054:	e7bb      	b.n	d5fce <_ZN9TCPClient9availableEv+0x16>
   d6056:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d6058:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d605c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d6060:	1a18      	subs	r0, r3, r0
}
   d6062:	b00b      	add	sp, #44	; 0x2c
   d6064:	bd30      	pop	{r4, r5, pc}
   d6066:	bf00      	nop
   d6068:	000d6d9f 	.word	0x000d6d9f
   d606c:	000d6d98 	.word	0x000d6d98

000d6070 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6070:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d6072:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d6074:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d6076:	6001      	str	r1, [r0, #0]
   d6078:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d607c:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d6080:	3088      	adds	r0, #136	; 0x88
   d6082:	f7ff fb1f 	bl	d56c4 <_ZN9IPAddressC1Ev>
}
   d6086:	4620      	mov	r0, r4
   d6088:	bd10      	pop	{r4, pc}
	...

000d608c <_ZN9TCPClientC1Ei>:
   d608c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d6090:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6092:	2300      	movs	r3, #0
   d6094:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d6096:	4a14      	ldr	r2, [pc, #80]	; (d60e8 <_ZN9TCPClientC1Ei+0x5c>)
   d6098:	6043      	str	r3, [r0, #4]
   d609a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d609c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d609e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d60a0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d60a2:	20a0      	movs	r0, #160	; 0xa0
   d60a4:	460e      	mov	r6, r1
   d60a6:	f7fd fff6 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d60aa:	4605      	mov	r5, r0
   d60ac:	b110      	cbz	r0, d60b4 <_ZN9TCPClientC1Ei+0x28>
   d60ae:	4631      	mov	r1, r6
   d60b0:	f7ff ffde 	bl	d6070 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d60b4:	2014      	movs	r0, #20
   d60b6:	f7fd ffee 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d60ba:	4603      	mov	r3, r0
   d60bc:	b128      	cbz	r0, d60ca <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d60be:	2201      	movs	r2, #1
   d60c0:	6042      	str	r2, [r0, #4]
   d60c2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d60c4:	4a09      	ldr	r2, [pc, #36]	; (d60ec <_ZN9TCPClientC1Ei+0x60>)
   d60c6:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d60c8:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d60ca:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d60cc:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d60ce:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d60d0:	b128      	cbz	r0, d60de <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d60d2:	6843      	ldr	r3, [r0, #4]
   d60d4:	3b01      	subs	r3, #1
   d60d6:	6043      	str	r3, [r0, #4]
   d60d8:	b90b      	cbnz	r3, d60de <_ZN9TCPClientC1Ei+0x52>
   d60da:	f7ff fddf 	bl	d5c9c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d60de:	4620      	mov	r0, r4
   d60e0:	f7ff fed0 	bl	d5e84 <_ZN9TCPClient12flush_bufferEv>
}
   d60e4:	4620      	mov	r0, r4
   d60e6:	bd70      	pop	{r4, r5, r6, pc}
   d60e8:	000d6d54 	.word	0x000d6d54
   d60ec:	000d6d38 	.word	0x000d6d38

000d60f0 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d60f0:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d60f2:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d60f6:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d60f8:	f7ff ffc8 	bl	d608c <_ZN9TCPClientC1Ei>
}
   d60fc:	4620      	mov	r0, r4
   d60fe:	bd10      	pop	{r4, pc}

000d6100 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d6100:	b510      	push	{r4, lr}
   d6102:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d6104:	6800      	ldr	r0, [r0, #0]
   d6106:	2800      	cmp	r0, #0
   d6108:	db01      	blt.n	d610e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d610a:	f7fe fbdb 	bl	d48c4 <sock_close>
    }
}
   d610e:	4620      	mov	r0, r4
   d6110:	bd10      	pop	{r4, pc}

000d6112 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6112:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6114:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d6116:	4620      	mov	r0, r4
   d6118:	f7ff fff2 	bl	d6100 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d611c:	b124      	cbz	r4, d6128 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d611e:	4620      	mov	r0, r4
   d6120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6124:	f7fd bfb9 	b.w	d409a <_ZdlPv>
   d6128:	bd10      	pop	{r4, pc}

000d612a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d612a:	2200      	movs	r2, #0
   d612c:	4611      	mov	r1, r2
   d612e:	6840      	ldr	r0, [r0, #4]
   d6130:	f7fe bc7c 	b.w	d4a2c <network_ready>

000d6134 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6134:	2200      	movs	r2, #0
   d6136:	4611      	mov	r1, r2
   d6138:	6840      	ldr	r0, [r0, #4]
   d613a:	f7fe bc97 	b.w	d4a6c <network_listening>

000d613e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d613e:	2200      	movs	r2, #0
   d6140:	4611      	mov	r1, r2
   d6142:	6840      	ldr	r0, [r0, #4]
   d6144:	f7fe bca2 	b.w	d4a8c <network_get_listen_timeout>

000d6148 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6148:	2200      	movs	r2, #0
   d614a:	6840      	ldr	r0, [r0, #4]
   d614c:	f7fe bc96 	b.w	d4a7c <network_set_listen_timeout>

000d6150 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6150:	2200      	movs	r2, #0
   d6152:	f081 0101 	eor.w	r1, r1, #1
   d6156:	6840      	ldr	r0, [r0, #4]
   d6158:	f7fe bc80 	b.w	d4a5c <network_listen>

000d615c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d615c:	2300      	movs	r3, #0
   d615e:	461a      	mov	r2, r3
   d6160:	4619      	mov	r1, r3
   d6162:	6840      	ldr	r0, [r0, #4]
   d6164:	f7fe bc72 	b.w	d4a4c <network_off>

000d6168 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d6168:	2300      	movs	r3, #0
   d616a:	461a      	mov	r2, r3
   d616c:	4619      	mov	r1, r3
   d616e:	6840      	ldr	r0, [r0, #4]
   d6170:	f7fe bc64 	b.w	d4a3c <network_on>

000d6174 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6174:	2200      	movs	r2, #0
   d6176:	4611      	mov	r1, r2
   d6178:	6840      	ldr	r0, [r0, #4]
   d617a:	f7fe bc47 	b.w	d4a0c <network_connecting>

000d617e <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d617e:	2200      	movs	r2, #0
   d6180:	2102      	movs	r1, #2
   d6182:	6840      	ldr	r0, [r0, #4]
   d6184:	f7fe bc4a 	b.w	d4a1c <network_disconnect>

000d6188 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6188:	2300      	movs	r3, #0
   d618a:	461a      	mov	r2, r3
   d618c:	6840      	ldr	r0, [r0, #4]
   d618e:	f7fe bc35 	b.w	d49fc <network_connect>
	...

000d6194 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d6194:	4b02      	ldr	r3, [pc, #8]	; (d61a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d6196:	2204      	movs	r2, #4
   d6198:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d619a:	4a02      	ldr	r2, [pc, #8]	; (d61a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d619c:	601a      	str	r2, [r3, #0]
   d619e:	4770      	bx	lr
   d61a0:	2003e710 	.word	0x2003e710
   d61a4:	000d6db8 	.word	0x000d6db8

000d61a8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d61a8:	2300      	movs	r3, #0
   d61aa:	461a      	mov	r2, r3
   d61ac:	6840      	ldr	r0, [r0, #4]
   d61ae:	f7fe bc25 	b.w	d49fc <network_connect>

000d61b2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d61b2:	2200      	movs	r2, #0
   d61b4:	2102      	movs	r1, #2
   d61b6:	6840      	ldr	r0, [r0, #4]
   d61b8:	f7fe bc30 	b.w	d4a1c <network_disconnect>

000d61bc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d61bc:	2200      	movs	r2, #0
   d61be:	4611      	mov	r1, r2
   d61c0:	6840      	ldr	r0, [r0, #4]
   d61c2:	f7fe bc23 	b.w	d4a0c <network_connecting>

000d61c6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d61c6:	2200      	movs	r2, #0
   d61c8:	4611      	mov	r1, r2
   d61ca:	6840      	ldr	r0, [r0, #4]
   d61cc:	f7fe bc2e 	b.w	d4a2c <network_ready>

000d61d0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d61d0:	2300      	movs	r3, #0
   d61d2:	461a      	mov	r2, r3
   d61d4:	4619      	mov	r1, r3
   d61d6:	6840      	ldr	r0, [r0, #4]
   d61d8:	f7fe bc30 	b.w	d4a3c <network_on>

000d61dc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d61dc:	2300      	movs	r3, #0
   d61de:	461a      	mov	r2, r3
   d61e0:	4619      	mov	r1, r3
   d61e2:	6840      	ldr	r0, [r0, #4]
   d61e4:	f7fe bc32 	b.w	d4a4c <network_off>

000d61e8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d61e8:	2200      	movs	r2, #0
   d61ea:	f081 0101 	eor.w	r1, r1, #1
   d61ee:	6840      	ldr	r0, [r0, #4]
   d61f0:	f7fe bc34 	b.w	d4a5c <network_listen>

000d61f4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d61f4:	2200      	movs	r2, #0
   d61f6:	6840      	ldr	r0, [r0, #4]
   d61f8:	f7fe bc40 	b.w	d4a7c <network_set_listen_timeout>

000d61fc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d61fc:	2200      	movs	r2, #0
   d61fe:	4611      	mov	r1, r2
   d6200:	6840      	ldr	r0, [r0, #4]
   d6202:	f7fe bc43 	b.w	d4a8c <network_get_listen_timeout>

000d6206 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6206:	2200      	movs	r2, #0
   d6208:	4611      	mov	r1, r2
   d620a:	6840      	ldr	r0, [r0, #4]
   d620c:	f7fe bc2e 	b.w	d4a6c <network_listening>

000d6210 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6210:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6214:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6216:	b095      	sub	sp, #84	; 0x54
   d6218:	4616      	mov	r6, r2
   d621a:	460d      	mov	r5, r1
   d621c:	4607      	mov	r7, r0
    IPAddress addr;
   d621e:	f7ff fa51 	bl	d56c4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6222:	4621      	mov	r1, r4
   d6224:	2220      	movs	r2, #32
   d6226:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6228:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d622a:	f000 faae 	bl	d678a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d622e:	2340      	movs	r3, #64	; 0x40
   d6230:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6232:	4621      	mov	r1, r4
   d6234:	466b      	mov	r3, sp
   d6236:	aa0c      	add	r2, sp, #48	; 0x30
   d6238:	4630      	mov	r0, r6
   d623a:	f7fe fa23 	bl	d4684 <netdb_getaddrinfo>
    if (!r) {
   d623e:	4604      	mov	r4, r0
   d6240:	2800      	cmp	r0, #0
   d6242:	d144      	bne.n	d62ce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6244:	4602      	mov	r2, r0
   d6246:	2101      	movs	r1, #1
   d6248:	6868      	ldr	r0, [r5, #4]
   d624a:	f7fe fbef 	bl	d4a2c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d624e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6250:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6252:	4622      	mov	r2, r4
   d6254:	6868      	ldr	r0, [r5, #4]
   d6256:	f7fe fbe9 	bl	d4a2c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d625a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d625c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d625e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6260:	2e00      	cmp	r6, #0
   d6262:	d034      	beq.n	d62ce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6264:	2900      	cmp	r1, #0
   d6266:	d132      	bne.n	d62ce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6268:	6873      	ldr	r3, [r6, #4]
   d626a:	2b02      	cmp	r3, #2
   d626c:	d002      	beq.n	d6274 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d626e:	2b0a      	cmp	r3, #10
   d6270:	d009      	beq.n	d6286 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6272:	e02a      	b.n	d62ca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6274:	f1b8 0f00 	cmp.w	r8, #0
   d6278:	d027      	beq.n	d62ca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d627a:	6971      	ldr	r1, [r6, #20]
   d627c:	4638      	mov	r0, r7
   d627e:	3104      	adds	r1, #4
   d6280:	f7ff fa63 	bl	d574a <_ZN9IPAddressaSEPKh>
   d6284:	e020      	b.n	d62c8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6286:	f1b9 0f00 	cmp.w	r9, #0
   d628a:	d01e      	beq.n	d62ca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d628c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d628e:	2211      	movs	r2, #17
   d6290:	a801      	add	r0, sp, #4
   d6292:	f000 fa7a 	bl	d678a <memset>
                    a.v = 6;
   d6296:	2306      	movs	r3, #6
   d6298:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d629c:	ad01      	add	r5, sp, #4
   d629e:	f104 0308 	add.w	r3, r4, #8
   d62a2:	3418      	adds	r4, #24
   d62a4:	6818      	ldr	r0, [r3, #0]
   d62a6:	6859      	ldr	r1, [r3, #4]
   d62a8:	462a      	mov	r2, r5
   d62aa:	c203      	stmia	r2!, {r0, r1}
   d62ac:	3308      	adds	r3, #8
   d62ae:	42a3      	cmp	r3, r4
   d62b0:	4615      	mov	r5, r2
   d62b2:	d1f7      	bne.n	d62a4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d62b4:	a901      	add	r1, sp, #4
   d62b6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d62b8:	ad07      	add	r5, sp, #28
   d62ba:	f7ff fa11 	bl	d56e0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d62be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62c0:	1d3c      	adds	r4, r7, #4
   d62c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62c4:	682b      	ldr	r3, [r5, #0]
   d62c6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d62c8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d62ca:	69f6      	ldr	r6, [r6, #28]
   d62cc:	e7c8      	b.n	d6260 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d62ce:	9800      	ldr	r0, [sp, #0]
   d62d0:	f7fe f9d0 	bl	d4674 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d62d4:	4638      	mov	r0, r7
   d62d6:	b015      	add	sp, #84	; 0x54
   d62d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d62dc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d62dc:	4b02      	ldr	r3, [pc, #8]	; (d62e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d62de:	4a03      	ldr	r2, [pc, #12]	; (d62ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d62e0:	601a      	str	r2, [r3, #0]
   d62e2:	2200      	movs	r2, #0
   d62e4:	605a      	str	r2, [r3, #4]
   d62e6:	4770      	bx	lr
   d62e8:	2003e718 	.word	0x2003e718
   d62ec:	000d6dec 	.word	0x000d6dec

000d62f0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d62f0:	b510      	push	{r4, lr}
   d62f2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d62f4:	f000 f860 	bl	d63b8 <_ZN8particle7globals11instanceSpiEv>
   d62f8:	f7fe fc7c 	bl	d4bf4 <_ZN8SPIClass9isEnabledEv>
   d62fc:	b128      	cbz	r0, d630a <pinAvailable+0x1a>
   d62fe:	f1a4 030b 	sub.w	r3, r4, #11
   d6302:	2b02      	cmp	r3, #2
   d6304:	d801      	bhi.n	d630a <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d6306:	2000      	movs	r0, #0
   d6308:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d630a:	f000 f88f 	bl	d642c <_Z19__fetch_global_Wirev>
   d630e:	f7ff fb83 	bl	d5a18 <_ZN7TwoWire9isEnabledEv>
   d6312:	b108      	cbz	r0, d6318 <pinAvailable+0x28>
   d6314:	2c01      	cmp	r4, #1
   d6316:	d9f6      	bls.n	d6306 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6318:	f7ff fb06 	bl	d5928 <_Z22__fetch_global_Serial1v>
   d631c:	f7ff fb00 	bl	d5920 <_ZN11USARTSerial9isEnabledEv>
   d6320:	b118      	cbz	r0, d632a <pinAvailable+0x3a>
   d6322:	f1a4 0309 	sub.w	r3, r4, #9
   d6326:	2b01      	cmp	r3, #1
   d6328:	d9ed      	bls.n	d6306 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d632a:	2c23      	cmp	r4, #35	; 0x23
   d632c:	bf8c      	ite	hi
   d632e:	2000      	movhi	r0, #0
   d6330:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6332:	bd10      	pop	{r4, pc}

000d6334 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6334:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d6336:	b538      	push	{r3, r4, r5, lr}
   d6338:	4604      	mov	r4, r0
   d633a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d633c:	d80a      	bhi.n	d6354 <pinMode+0x20>
   d633e:	29ff      	cmp	r1, #255	; 0xff
   d6340:	d008      	beq.n	d6354 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6342:	f7ff ffd5 	bl	d62f0 <pinAvailable>
   d6346:	b128      	cbz	r0, d6354 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6348:	4629      	mov	r1, r5
   d634a:	4620      	mov	r0, r4
}
   d634c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6350:	f7fe b9b0 	b.w	d46b4 <HAL_Pin_Mode>
   d6354:	bd38      	pop	{r3, r4, r5, pc}

000d6356 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6356:	b538      	push	{r3, r4, r5, lr}
   d6358:	4604      	mov	r4, r0
   d635a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d635c:	f7fe f9b2 	bl	d46c4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6360:	28ff      	cmp	r0, #255	; 0xff
   d6362:	d010      	beq.n	d6386 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6364:	2806      	cmp	r0, #6
   d6366:	d804      	bhi.n	d6372 <digitalWrite+0x1c>
   d6368:	234d      	movs	r3, #77	; 0x4d
   d636a:	fa23 f000 	lsr.w	r0, r3, r0
   d636e:	07c3      	lsls	r3, r0, #31
   d6370:	d409      	bmi.n	d6386 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6372:	4620      	mov	r0, r4
   d6374:	f7ff ffbc 	bl	d62f0 <pinAvailable>
   d6378:	b128      	cbz	r0, d6386 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d637a:	4629      	mov	r1, r5
   d637c:	4620      	mov	r0, r4
}
   d637e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6382:	f7fe b9a7 	b.w	d46d4 <HAL_GPIO_Write>
   d6386:	bd38      	pop	{r3, r4, r5, pc}

000d6388 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6388:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d638a:	b510      	push	{r4, lr}
   d638c:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d638e:	bf9c      	itt	ls
   d6390:	340e      	addls	r4, #14
   d6392:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6394:	4620      	mov	r0, r4
   d6396:	f7ff ffab 	bl	d62f0 <pinAvailable>
   d639a:	b150      	cbz	r0, d63b2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d639c:	2103      	movs	r1, #3
   d639e:	4620      	mov	r0, r4
   d63a0:	f7fe f980 	bl	d46a4 <HAL_Validate_Pin_Function>
   d63a4:	2803      	cmp	r0, #3
   d63a6:	d104      	bne.n	d63b2 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d63a8:	4620      	mov	r0, r4
}
   d63aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d63ae:	f7fe b999 	b.w	d46e4 <HAL_ADC_Read>
}
   d63b2:	2000      	movs	r0, #0
   d63b4:	bd10      	pop	{r4, pc}
	...

000d63b8 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d63b8:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d63ba:	4d0b      	ldr	r5, [pc, #44]	; (d63e8 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d63bc:	6829      	ldr	r1, [r5, #0]
   d63be:	f011 0401 	ands.w	r4, r1, #1
   d63c2:	d10f      	bne.n	d63e4 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d63c4:	4628      	mov	r0, r5
   d63c6:	f7fd fe6c 	bl	d40a2 <__cxa_guard_acquire>
   d63ca:	b158      	cbz	r0, d63e4 <_ZN8particle7globals11instanceSpiEv+0x2c>
   d63cc:	4621      	mov	r1, r4
   d63ce:	4807      	ldr	r0, [pc, #28]	; (d63ec <_ZN8particle7globals11instanceSpiEv+0x34>)
   d63d0:	f7fe fc02 	bl	d4bd8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d63d4:	4628      	mov	r0, r5
   d63d6:	f7fd fe69 	bl	d40ac <__cxa_guard_release>
   d63da:	4a05      	ldr	r2, [pc, #20]	; (d63f0 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d63dc:	4905      	ldr	r1, [pc, #20]	; (d63f4 <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d63de:	4803      	ldr	r0, [pc, #12]	; (d63ec <_ZN8particle7globals11instanceSpiEv+0x34>)
   d63e0:	f000 f84a 	bl	d6478 <__aeabi_atexit>
    return instance;
}
   d63e4:	4801      	ldr	r0, [pc, #4]	; (d63ec <_ZN8particle7globals11instanceSpiEv+0x34>)
   d63e6:	bd38      	pop	{r3, r4, r5, pc}
   d63e8:	2003e72c 	.word	0x2003e72c
   d63ec:	2003e720 	.word	0x2003e720
   d63f0:	2003df34 	.word	0x2003df34
   d63f4:	000d4bc9 	.word	0x000d4bc9

000d63f8 <_Z17acquireWireBufferv>:
   d63f8:	b570      	push	{r4, r5, r6, lr}
   d63fa:	4604      	mov	r4, r0
   d63fc:	2514      	movs	r5, #20
   d63fe:	462a      	mov	r2, r5
   d6400:	4e09      	ldr	r6, [pc, #36]	; (d6428 <_Z17acquireWireBufferv+0x30>)
   d6402:	2100      	movs	r1, #0
   d6404:	f000 f9c1 	bl	d678a <memset>
   d6408:	8025      	strh	r5, [r4, #0]
   d640a:	2520      	movs	r5, #32
   d640c:	4631      	mov	r1, r6
   d640e:	60a5      	str	r5, [r4, #8]
   d6410:	6125      	str	r5, [r4, #16]
   d6412:	4628      	mov	r0, r5
   d6414:	f000 f840 	bl	d6498 <_ZnajRKSt9nothrow_t>
   d6418:	4631      	mov	r1, r6
   d641a:	6060      	str	r0, [r4, #4]
   d641c:	4628      	mov	r0, r5
   d641e:	f000 f83b 	bl	d6498 <_ZnajRKSt9nothrow_t>
   d6422:	60e0      	str	r0, [r4, #12]
   d6424:	4620      	mov	r0, r4
   d6426:	bd70      	pop	{r4, r5, r6, pc}
   d6428:	000d6e18 	.word	0x000d6e18

000d642c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d642c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d642e:	4d0e      	ldr	r5, [pc, #56]	; (d6468 <_Z19__fetch_global_Wirev+0x3c>)
   d6430:	6829      	ldr	r1, [r5, #0]
   d6432:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6436:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6438:	d113      	bne.n	d6462 <_Z19__fetch_global_Wirev+0x36>
   d643a:	4628      	mov	r0, r5
   d643c:	f7fd fe31 	bl	d40a2 <__cxa_guard_acquire>
   d6440:	b178      	cbz	r0, d6462 <_Z19__fetch_global_Wirev+0x36>
   d6442:	a801      	add	r0, sp, #4
   d6444:	f7ff ffd8 	bl	d63f8 <_Z17acquireWireBufferv>
   d6448:	aa01      	add	r2, sp, #4
   d644a:	4621      	mov	r1, r4
   d644c:	4807      	ldr	r0, [pc, #28]	; (d646c <_Z19__fetch_global_Wirev+0x40>)
   d644e:	f7ff fad1 	bl	d59f4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d6452:	4628      	mov	r0, r5
   d6454:	f7fd fe2a 	bl	d40ac <__cxa_guard_release>
   d6458:	4a05      	ldr	r2, [pc, #20]	; (d6470 <_Z19__fetch_global_Wirev+0x44>)
   d645a:	4906      	ldr	r1, [pc, #24]	; (d6474 <_Z19__fetch_global_Wirev+0x48>)
   d645c:	4803      	ldr	r0, [pc, #12]	; (d646c <_Z19__fetch_global_Wirev+0x40>)
   d645e:	f000 f80b 	bl	d6478 <__aeabi_atexit>
	return wire;
}
   d6462:	4802      	ldr	r0, [pc, #8]	; (d646c <_Z19__fetch_global_Wirev+0x40>)
   d6464:	b007      	add	sp, #28
   d6466:	bd30      	pop	{r4, r5, pc}
   d6468:	2003e734 	.word	0x2003e734
   d646c:	2003e738 	.word	0x2003e738
   d6470:	2003df34 	.word	0x2003df34
   d6474:	000d599d 	.word	0x000d599d

000d6478 <__aeabi_atexit>:
   d6478:	460b      	mov	r3, r1
   d647a:	4601      	mov	r1, r0
   d647c:	4618      	mov	r0, r3
   d647e:	f000 b96b 	b.w	d6758 <__cxa_atexit>
	...

000d6484 <_ZSt15get_new_handlerv>:
   d6484:	4b02      	ldr	r3, [pc, #8]	; (d6490 <_ZSt15get_new_handlerv+0xc>)
   d6486:	6818      	ldr	r0, [r3, #0]
   d6488:	f3bf 8f5f 	dmb	sy
   d648c:	4770      	bx	lr
   d648e:	bf00      	nop
   d6490:	2003e74c 	.word	0x2003e74c

000d6494 <_ZdlPvj>:
   d6494:	f7fd be01 	b.w	d409a <_ZdlPv>

000d6498 <_ZnajRKSt9nothrow_t>:
   d6498:	f000 b800 	b.w	d649c <_ZnwjRKSt9nothrow_t>

000d649c <_ZnwjRKSt9nothrow_t>:
   d649c:	b510      	push	{r4, lr}
   d649e:	2800      	cmp	r0, #0
   d64a0:	bf14      	ite	ne
   d64a2:	4604      	movne	r4, r0
   d64a4:	2401      	moveq	r4, #1
   d64a6:	4620      	mov	r0, r4
   d64a8:	f7fe fb18 	bl	d4adc <malloc>
   d64ac:	b920      	cbnz	r0, d64b8 <_ZnwjRKSt9nothrow_t+0x1c>
   d64ae:	f7ff ffe9 	bl	d6484 <_ZSt15get_new_handlerv>
   d64b2:	b108      	cbz	r0, d64b8 <_ZnwjRKSt9nothrow_t+0x1c>
   d64b4:	4780      	blx	r0
   d64b6:	e7f6      	b.n	d64a6 <_ZnwjRKSt9nothrow_t+0xa>
   d64b8:	bd10      	pop	{r4, pc}

000d64ba <_ZSt25__throw_bad_function_callv>:
   d64ba:	b508      	push	{r3, lr}
   d64bc:	f7fe fb2e 	bl	d4b1c <abort>

000d64c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d64c0:	4b18      	ldr	r3, [pc, #96]	; (d6524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d64c2:	681a      	ldr	r2, [r3, #0]
   d64c4:	07d1      	lsls	r1, r2, #31
   d64c6:	bf5c      	itt	pl
   d64c8:	2201      	movpl	r2, #1
   d64ca:	601a      	strpl	r2, [r3, #0]
   d64cc:	4b16      	ldr	r3, [pc, #88]	; (d6528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d64ce:	681a      	ldr	r2, [r3, #0]
   d64d0:	07d2      	lsls	r2, r2, #31
   d64d2:	bf5c      	itt	pl
   d64d4:	2201      	movpl	r2, #1
   d64d6:	601a      	strpl	r2, [r3, #0]
   d64d8:	4b14      	ldr	r3, [pc, #80]	; (d652c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d64da:	681a      	ldr	r2, [r3, #0]
   d64dc:	07d0      	lsls	r0, r2, #31
   d64de:	bf5c      	itt	pl
   d64e0:	2201      	movpl	r2, #1
   d64e2:	601a      	strpl	r2, [r3, #0]
   d64e4:	4b12      	ldr	r3, [pc, #72]	; (d6530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d64e6:	681a      	ldr	r2, [r3, #0]
   d64e8:	07d1      	lsls	r1, r2, #31
   d64ea:	bf5c      	itt	pl
   d64ec:	2201      	movpl	r2, #1
   d64ee:	601a      	strpl	r2, [r3, #0]
   d64f0:	4b10      	ldr	r3, [pc, #64]	; (d6534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d64f2:	681a      	ldr	r2, [r3, #0]
   d64f4:	07d2      	lsls	r2, r2, #31
   d64f6:	bf5c      	itt	pl
   d64f8:	2201      	movpl	r2, #1
   d64fa:	601a      	strpl	r2, [r3, #0]
   d64fc:	4b0e      	ldr	r3, [pc, #56]	; (d6538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d64fe:	681a      	ldr	r2, [r3, #0]
   d6500:	07d0      	lsls	r0, r2, #31
   d6502:	bf5c      	itt	pl
   d6504:	2201      	movpl	r2, #1
   d6506:	601a      	strpl	r2, [r3, #0]
   d6508:	4b0c      	ldr	r3, [pc, #48]	; (d653c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d650a:	681a      	ldr	r2, [r3, #0]
   d650c:	07d1      	lsls	r1, r2, #31
   d650e:	bf5c      	itt	pl
   d6510:	2201      	movpl	r2, #1
   d6512:	601a      	strpl	r2, [r3, #0]
   d6514:	4b0a      	ldr	r3, [pc, #40]	; (d6540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6516:	681a      	ldr	r2, [r3, #0]
   d6518:	07d2      	lsls	r2, r2, #31
   d651a:	bf5c      	itt	pl
   d651c:	2201      	movpl	r2, #1
   d651e:	601a      	strpl	r2, [r3, #0]
   d6520:	4770      	bx	lr
   d6522:	bf00      	nop
   d6524:	2003e76c 	.word	0x2003e76c
   d6528:	2003e768 	.word	0x2003e768
   d652c:	2003e764 	.word	0x2003e764
   d6530:	2003e760 	.word	0x2003e760
   d6534:	2003e75c 	.word	0x2003e75c
   d6538:	2003e758 	.word	0x2003e758
   d653c:	2003e754 	.word	0x2003e754
   d6540:	2003e750 	.word	0x2003e750

000d6544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6544:	4b24      	ldr	r3, [pc, #144]	; (d65d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d6546:	681a      	ldr	r2, [r3, #0]
   d6548:	07d0      	lsls	r0, r2, #31
   d654a:	bf5c      	itt	pl
   d654c:	2201      	movpl	r2, #1
   d654e:	601a      	strpl	r2, [r3, #0]
   d6550:	4b22      	ldr	r3, [pc, #136]	; (d65dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6552:	681a      	ldr	r2, [r3, #0]
   d6554:	07d1      	lsls	r1, r2, #31
   d6556:	bf5c      	itt	pl
   d6558:	2201      	movpl	r2, #1
   d655a:	601a      	strpl	r2, [r3, #0]
   d655c:	4b20      	ldr	r3, [pc, #128]	; (d65e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d655e:	681a      	ldr	r2, [r3, #0]
   d6560:	07d2      	lsls	r2, r2, #31
   d6562:	bf5c      	itt	pl
   d6564:	2201      	movpl	r2, #1
   d6566:	601a      	strpl	r2, [r3, #0]
   d6568:	4b1e      	ldr	r3, [pc, #120]	; (d65e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d656a:	681a      	ldr	r2, [r3, #0]
   d656c:	07d0      	lsls	r0, r2, #31
   d656e:	bf5c      	itt	pl
   d6570:	2201      	movpl	r2, #1
   d6572:	601a      	strpl	r2, [r3, #0]
   d6574:	4b1c      	ldr	r3, [pc, #112]	; (d65e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6576:	681a      	ldr	r2, [r3, #0]
   d6578:	07d1      	lsls	r1, r2, #31
   d657a:	bf5c      	itt	pl
   d657c:	2201      	movpl	r2, #1
   d657e:	601a      	strpl	r2, [r3, #0]
   d6580:	4b1a      	ldr	r3, [pc, #104]	; (d65ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6582:	681a      	ldr	r2, [r3, #0]
   d6584:	07d2      	lsls	r2, r2, #31
   d6586:	bf5c      	itt	pl
   d6588:	2201      	movpl	r2, #1
   d658a:	601a      	strpl	r2, [r3, #0]
   d658c:	4b18      	ldr	r3, [pc, #96]	; (d65f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d658e:	681a      	ldr	r2, [r3, #0]
   d6590:	07d0      	lsls	r0, r2, #31
   d6592:	bf5c      	itt	pl
   d6594:	2201      	movpl	r2, #1
   d6596:	601a      	strpl	r2, [r3, #0]
   d6598:	4b16      	ldr	r3, [pc, #88]	; (d65f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d659a:	681a      	ldr	r2, [r3, #0]
   d659c:	07d1      	lsls	r1, r2, #31
   d659e:	bf5c      	itt	pl
   d65a0:	2201      	movpl	r2, #1
   d65a2:	601a      	strpl	r2, [r3, #0]
   d65a4:	4b14      	ldr	r3, [pc, #80]	; (d65f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d65a6:	681a      	ldr	r2, [r3, #0]
   d65a8:	07d2      	lsls	r2, r2, #31
   d65aa:	bf5c      	itt	pl
   d65ac:	2201      	movpl	r2, #1
   d65ae:	601a      	strpl	r2, [r3, #0]
   d65b0:	4b12      	ldr	r3, [pc, #72]	; (d65fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d65b2:	681a      	ldr	r2, [r3, #0]
   d65b4:	07d0      	lsls	r0, r2, #31
   d65b6:	bf5c      	itt	pl
   d65b8:	2201      	movpl	r2, #1
   d65ba:	601a      	strpl	r2, [r3, #0]
   d65bc:	4b10      	ldr	r3, [pc, #64]	; (d6600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d65be:	681a      	ldr	r2, [r3, #0]
   d65c0:	07d1      	lsls	r1, r2, #31
   d65c2:	bf5c      	itt	pl
   d65c4:	2201      	movpl	r2, #1
   d65c6:	601a      	strpl	r2, [r3, #0]
   d65c8:	4b0e      	ldr	r3, [pc, #56]	; (d6604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d65ca:	681a      	ldr	r2, [r3, #0]
   d65cc:	07d2      	lsls	r2, r2, #31
   d65ce:	bf5c      	itt	pl
   d65d0:	2201      	movpl	r2, #1
   d65d2:	601a      	strpl	r2, [r3, #0]
   d65d4:	4770      	bx	lr
   d65d6:	bf00      	nop
   d65d8:	2003e79c 	.word	0x2003e79c
   d65dc:	2003e798 	.word	0x2003e798
   d65e0:	2003e794 	.word	0x2003e794
   d65e4:	2003e790 	.word	0x2003e790
   d65e8:	2003e78c 	.word	0x2003e78c
   d65ec:	2003e788 	.word	0x2003e788
   d65f0:	2003e784 	.word	0x2003e784
   d65f4:	2003e780 	.word	0x2003e780
   d65f8:	2003e77c 	.word	0x2003e77c
   d65fc:	2003e778 	.word	0x2003e778
   d6600:	2003e774 	.word	0x2003e774
   d6604:	2003e770 	.word	0x2003e770

000d6608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6608:	4b24      	ldr	r3, [pc, #144]	; (d669c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d660a:	681a      	ldr	r2, [r3, #0]
   d660c:	07d0      	lsls	r0, r2, #31
   d660e:	bf5c      	itt	pl
   d6610:	2201      	movpl	r2, #1
   d6612:	601a      	strpl	r2, [r3, #0]
   d6614:	4b22      	ldr	r3, [pc, #136]	; (d66a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6616:	681a      	ldr	r2, [r3, #0]
   d6618:	07d1      	lsls	r1, r2, #31
   d661a:	bf5c      	itt	pl
   d661c:	2201      	movpl	r2, #1
   d661e:	601a      	strpl	r2, [r3, #0]
   d6620:	4b20      	ldr	r3, [pc, #128]	; (d66a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6622:	681a      	ldr	r2, [r3, #0]
   d6624:	07d2      	lsls	r2, r2, #31
   d6626:	bf5c      	itt	pl
   d6628:	2201      	movpl	r2, #1
   d662a:	601a      	strpl	r2, [r3, #0]
   d662c:	4b1e      	ldr	r3, [pc, #120]	; (d66a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d662e:	681a      	ldr	r2, [r3, #0]
   d6630:	07d0      	lsls	r0, r2, #31
   d6632:	bf5c      	itt	pl
   d6634:	2201      	movpl	r2, #1
   d6636:	601a      	strpl	r2, [r3, #0]
   d6638:	4b1c      	ldr	r3, [pc, #112]	; (d66ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d663a:	681a      	ldr	r2, [r3, #0]
   d663c:	07d1      	lsls	r1, r2, #31
   d663e:	bf5c      	itt	pl
   d6640:	2201      	movpl	r2, #1
   d6642:	601a      	strpl	r2, [r3, #0]
   d6644:	4b1a      	ldr	r3, [pc, #104]	; (d66b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6646:	681a      	ldr	r2, [r3, #0]
   d6648:	07d2      	lsls	r2, r2, #31
   d664a:	bf5c      	itt	pl
   d664c:	2201      	movpl	r2, #1
   d664e:	601a      	strpl	r2, [r3, #0]
   d6650:	4b18      	ldr	r3, [pc, #96]	; (d66b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6652:	681a      	ldr	r2, [r3, #0]
   d6654:	07d0      	lsls	r0, r2, #31
   d6656:	bf5c      	itt	pl
   d6658:	2201      	movpl	r2, #1
   d665a:	601a      	strpl	r2, [r3, #0]
   d665c:	4b16      	ldr	r3, [pc, #88]	; (d66b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d665e:	681a      	ldr	r2, [r3, #0]
   d6660:	07d1      	lsls	r1, r2, #31
   d6662:	bf5c      	itt	pl
   d6664:	2201      	movpl	r2, #1
   d6666:	601a      	strpl	r2, [r3, #0]
   d6668:	4b14      	ldr	r3, [pc, #80]	; (d66bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d666a:	681a      	ldr	r2, [r3, #0]
   d666c:	07d2      	lsls	r2, r2, #31
   d666e:	bf5c      	itt	pl
   d6670:	2201      	movpl	r2, #1
   d6672:	601a      	strpl	r2, [r3, #0]
   d6674:	4b12      	ldr	r3, [pc, #72]	; (d66c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6676:	681a      	ldr	r2, [r3, #0]
   d6678:	07d0      	lsls	r0, r2, #31
   d667a:	bf5c      	itt	pl
   d667c:	2201      	movpl	r2, #1
   d667e:	601a      	strpl	r2, [r3, #0]
   d6680:	4b10      	ldr	r3, [pc, #64]	; (d66c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6682:	681a      	ldr	r2, [r3, #0]
   d6684:	07d1      	lsls	r1, r2, #31
   d6686:	bf5c      	itt	pl
   d6688:	2201      	movpl	r2, #1
   d668a:	601a      	strpl	r2, [r3, #0]
   d668c:	4b0e      	ldr	r3, [pc, #56]	; (d66c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d668e:	681a      	ldr	r2, [r3, #0]
   d6690:	07d2      	lsls	r2, r2, #31
   d6692:	bf5c      	itt	pl
   d6694:	2201      	movpl	r2, #1
   d6696:	601a      	strpl	r2, [r3, #0]
   d6698:	4770      	bx	lr
   d669a:	bf00      	nop
   d669c:	2003e7cc 	.word	0x2003e7cc
   d66a0:	2003e7c8 	.word	0x2003e7c8
   d66a4:	2003e7c4 	.word	0x2003e7c4
   d66a8:	2003e7c0 	.word	0x2003e7c0
   d66ac:	2003e7bc 	.word	0x2003e7bc
   d66b0:	2003e7b8 	.word	0x2003e7b8
   d66b4:	2003e7b4 	.word	0x2003e7b4
   d66b8:	2003e7b0 	.word	0x2003e7b0
   d66bc:	2003e7ac 	.word	0x2003e7ac
   d66c0:	2003e7a8 	.word	0x2003e7a8
   d66c4:	2003e7a4 	.word	0x2003e7a4
   d66c8:	2003e7a0 	.word	0x2003e7a0

000d66cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d66cc:	4b18      	ldr	r3, [pc, #96]	; (d6730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d66ce:	681a      	ldr	r2, [r3, #0]
   d66d0:	07d1      	lsls	r1, r2, #31
   d66d2:	bf5c      	itt	pl
   d66d4:	2201      	movpl	r2, #1
   d66d6:	601a      	strpl	r2, [r3, #0]
   d66d8:	4b16      	ldr	r3, [pc, #88]	; (d6734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d66da:	681a      	ldr	r2, [r3, #0]
   d66dc:	07d2      	lsls	r2, r2, #31
   d66de:	bf5c      	itt	pl
   d66e0:	2201      	movpl	r2, #1
   d66e2:	601a      	strpl	r2, [r3, #0]
   d66e4:	4b14      	ldr	r3, [pc, #80]	; (d6738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d66e6:	681a      	ldr	r2, [r3, #0]
   d66e8:	07d0      	lsls	r0, r2, #31
   d66ea:	bf5c      	itt	pl
   d66ec:	2201      	movpl	r2, #1
   d66ee:	601a      	strpl	r2, [r3, #0]
   d66f0:	4b12      	ldr	r3, [pc, #72]	; (d673c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d66f2:	681a      	ldr	r2, [r3, #0]
   d66f4:	07d1      	lsls	r1, r2, #31
   d66f6:	bf5c      	itt	pl
   d66f8:	2201      	movpl	r2, #1
   d66fa:	601a      	strpl	r2, [r3, #0]
   d66fc:	4b10      	ldr	r3, [pc, #64]	; (d6740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d66fe:	681a      	ldr	r2, [r3, #0]
   d6700:	07d2      	lsls	r2, r2, #31
   d6702:	bf5c      	itt	pl
   d6704:	2201      	movpl	r2, #1
   d6706:	601a      	strpl	r2, [r3, #0]
   d6708:	4b0e      	ldr	r3, [pc, #56]	; (d6744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d670a:	681a      	ldr	r2, [r3, #0]
   d670c:	07d0      	lsls	r0, r2, #31
   d670e:	bf5c      	itt	pl
   d6710:	2201      	movpl	r2, #1
   d6712:	601a      	strpl	r2, [r3, #0]
   d6714:	4b0c      	ldr	r3, [pc, #48]	; (d6748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6716:	681a      	ldr	r2, [r3, #0]
   d6718:	07d1      	lsls	r1, r2, #31
   d671a:	bf5c      	itt	pl
   d671c:	2201      	movpl	r2, #1
   d671e:	601a      	strpl	r2, [r3, #0]
   d6720:	4b0a      	ldr	r3, [pc, #40]	; (d674c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6722:	681a      	ldr	r2, [r3, #0]
   d6724:	07d2      	lsls	r2, r2, #31
   d6726:	bf5c      	itt	pl
   d6728:	2201      	movpl	r2, #1
   d672a:	601a      	strpl	r2, [r3, #0]
   d672c:	4770      	bx	lr
   d672e:	bf00      	nop
   d6730:	2003e7ec 	.word	0x2003e7ec
   d6734:	2003e7e8 	.word	0x2003e7e8
   d6738:	2003e7e4 	.word	0x2003e7e4
   d673c:	2003e7e0 	.word	0x2003e7e0
   d6740:	2003e7dc 	.word	0x2003e7dc
   d6744:	2003e7d8 	.word	0x2003e7d8
   d6748:	2003e7d4 	.word	0x2003e7d4
   d674c:	2003e7d0 	.word	0x2003e7d0

000d6750 <atoi>:
   d6750:	220a      	movs	r2, #10
   d6752:	2100      	movs	r1, #0
   d6754:	f000 b920 	b.w	d6998 <strtol>

000d6758 <__cxa_atexit>:
   d6758:	b510      	push	{r4, lr}
   d675a:	4c05      	ldr	r4, [pc, #20]	; (d6770 <__cxa_atexit+0x18>)
   d675c:	4613      	mov	r3, r2
   d675e:	b12c      	cbz	r4, d676c <__cxa_atexit+0x14>
   d6760:	460a      	mov	r2, r1
   d6762:	4601      	mov	r1, r0
   d6764:	2002      	movs	r0, #2
   d6766:	f3af 8000 	nop.w
   d676a:	bd10      	pop	{r4, pc}
   d676c:	4620      	mov	r0, r4
   d676e:	bd10      	pop	{r4, pc}
   d6770:	00000000 	.word	0x00000000

000d6774 <memcpy>:
   d6774:	b510      	push	{r4, lr}
   d6776:	1e43      	subs	r3, r0, #1
   d6778:	440a      	add	r2, r1
   d677a:	4291      	cmp	r1, r2
   d677c:	d004      	beq.n	d6788 <memcpy+0x14>
   d677e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d6782:	f803 4f01 	strb.w	r4, [r3, #1]!
   d6786:	e7f8      	b.n	d677a <memcpy+0x6>
   d6788:	bd10      	pop	{r4, pc}

000d678a <memset>:
   d678a:	4402      	add	r2, r0
   d678c:	4603      	mov	r3, r0
   d678e:	4293      	cmp	r3, r2
   d6790:	d002      	beq.n	d6798 <memset+0xe>
   d6792:	f803 1b01 	strb.w	r1, [r3], #1
   d6796:	e7fa      	b.n	d678e <memset+0x4>
   d6798:	4770      	bx	lr
	...

000d679c <srand>:
   d679c:	b538      	push	{r3, r4, r5, lr}
   d679e:	4b12      	ldr	r3, [pc, #72]	; (d67e8 <srand+0x4c>)
   d67a0:	681c      	ldr	r4, [r3, #0]
   d67a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d67a4:	4605      	mov	r5, r0
   d67a6:	b9d3      	cbnz	r3, d67de <srand+0x42>
   d67a8:	2018      	movs	r0, #24
   d67aa:	f7fe f997 	bl	d4adc <malloc>
   d67ae:	f243 330e 	movw	r3, #13070	; 0x330e
   d67b2:	63a0      	str	r0, [r4, #56]	; 0x38
   d67b4:	8003      	strh	r3, [r0, #0]
   d67b6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d67ba:	8043      	strh	r3, [r0, #2]
   d67bc:	f241 2334 	movw	r3, #4660	; 0x1234
   d67c0:	8083      	strh	r3, [r0, #4]
   d67c2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d67c6:	80c3      	strh	r3, [r0, #6]
   d67c8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d67cc:	8103      	strh	r3, [r0, #8]
   d67ce:	2305      	movs	r3, #5
   d67d0:	8143      	strh	r3, [r0, #10]
   d67d2:	230b      	movs	r3, #11
   d67d4:	8183      	strh	r3, [r0, #12]
   d67d6:	2201      	movs	r2, #1
   d67d8:	2300      	movs	r3, #0
   d67da:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d67de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d67e0:	2200      	movs	r2, #0
   d67e2:	611d      	str	r5, [r3, #16]
   d67e4:	615a      	str	r2, [r3, #20]
   d67e6:	bd38      	pop	{r3, r4, r5, pc}
   d67e8:	2003df30 	.word	0x2003df30

000d67ec <strcmp>:
   d67ec:	f810 2b01 	ldrb.w	r2, [r0], #1
   d67f0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d67f4:	2a01      	cmp	r2, #1
   d67f6:	bf28      	it	cs
   d67f8:	429a      	cmpcs	r2, r3
   d67fa:	d0f7      	beq.n	d67ec <strcmp>
   d67fc:	1ad0      	subs	r0, r2, r3
   d67fe:	4770      	bx	lr

000d6800 <strcpy>:
   d6800:	4603      	mov	r3, r0
   d6802:	f811 2b01 	ldrb.w	r2, [r1], #1
   d6806:	f803 2b01 	strb.w	r2, [r3], #1
   d680a:	2a00      	cmp	r2, #0
   d680c:	d1f9      	bne.n	d6802 <strcpy+0x2>
   d680e:	4770      	bx	lr

000d6810 <strdup>:
   d6810:	4b02      	ldr	r3, [pc, #8]	; (d681c <strdup+0xc>)
   d6812:	4601      	mov	r1, r0
   d6814:	6818      	ldr	r0, [r3, #0]
   d6816:	f000 b803 	b.w	d6820 <_strdup_r>
   d681a:	bf00      	nop
   d681c:	2003df30 	.word	0x2003df30

000d6820 <_strdup_r>:
   d6820:	b570      	push	{r4, r5, r6, lr}
   d6822:	4606      	mov	r6, r0
   d6824:	4608      	mov	r0, r1
   d6826:	460c      	mov	r4, r1
   d6828:	f000 f80d 	bl	d6846 <strlen>
   d682c:	1c45      	adds	r5, r0, #1
   d682e:	4629      	mov	r1, r5
   d6830:	4630      	mov	r0, r6
   d6832:	f7fe f97b 	bl	d4b2c <_malloc_r>
   d6836:	4606      	mov	r6, r0
   d6838:	b118      	cbz	r0, d6842 <_strdup_r+0x22>
   d683a:	462a      	mov	r2, r5
   d683c:	4621      	mov	r1, r4
   d683e:	f7ff ff99 	bl	d6774 <memcpy>
   d6842:	4630      	mov	r0, r6
   d6844:	bd70      	pop	{r4, r5, r6, pc}

000d6846 <strlen>:
   d6846:	4603      	mov	r3, r0
   d6848:	f813 2b01 	ldrb.w	r2, [r3], #1
   d684c:	2a00      	cmp	r2, #0
   d684e:	d1fb      	bne.n	d6848 <strlen+0x2>
   d6850:	1a18      	subs	r0, r3, r0
   d6852:	3801      	subs	r0, #1
   d6854:	4770      	bx	lr

000d6856 <strstr>:
   d6856:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6858:	7803      	ldrb	r3, [r0, #0]
   d685a:	b963      	cbnz	r3, d6876 <strstr+0x20>
   d685c:	780b      	ldrb	r3, [r1, #0]
   d685e:	2b00      	cmp	r3, #0
   d6860:	bf18      	it	ne
   d6862:	2000      	movne	r0, #0
   d6864:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6866:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d686a:	b162      	cbz	r2, d6886 <strstr+0x30>
   d686c:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d6870:	4297      	cmp	r7, r2
   d6872:	4630      	mov	r0, r6
   d6874:	d0f7      	beq.n	d6866 <strstr+0x10>
   d6876:	4603      	mov	r3, r0
   d6878:	1c46      	adds	r6, r0, #1
   d687a:	7800      	ldrb	r0, [r0, #0]
   d687c:	b110      	cbz	r0, d6884 <strstr+0x2e>
   d687e:	1e4d      	subs	r5, r1, #1
   d6880:	1e5c      	subs	r4, r3, #1
   d6882:	e7f0      	b.n	d6866 <strstr+0x10>
   d6884:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6886:	4618      	mov	r0, r3
   d6888:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d688c <_strtol_r>:
   d688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6890:	4680      	mov	r8, r0
   d6892:	4840      	ldr	r0, [pc, #256]	; (d6994 <_strtol_r+0x108>)
   d6894:	f8d0 9000 	ldr.w	r9, [r0]
   d6898:	460f      	mov	r7, r1
   d689a:	463d      	mov	r5, r7
   d689c:	f815 4b01 	ldrb.w	r4, [r5], #1
   d68a0:	eb09 0004 	add.w	r0, r9, r4
   d68a4:	7840      	ldrb	r0, [r0, #1]
   d68a6:	f000 0008 	and.w	r0, r0, #8
   d68aa:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d68ae:	b108      	cbz	r0, d68b4 <_strtol_r+0x28>
   d68b0:	462f      	mov	r7, r5
   d68b2:	e7f2      	b.n	d689a <_strtol_r+0xe>
   d68b4:	2c2d      	cmp	r4, #45	; 0x2d
   d68b6:	d103      	bne.n	d68c0 <_strtol_r+0x34>
   d68b8:	1cbd      	adds	r5, r7, #2
   d68ba:	787c      	ldrb	r4, [r7, #1]
   d68bc:	2601      	movs	r6, #1
   d68be:	e003      	b.n	d68c8 <_strtol_r+0x3c>
   d68c0:	2c2b      	cmp	r4, #43	; 0x2b
   d68c2:	bf04      	itt	eq
   d68c4:	787c      	ldrbeq	r4, [r7, #1]
   d68c6:	1cbd      	addeq	r5, r7, #2
   d68c8:	b113      	cbz	r3, d68d0 <_strtol_r+0x44>
   d68ca:	2b10      	cmp	r3, #16
   d68cc:	d10a      	bne.n	d68e4 <_strtol_r+0x58>
   d68ce:	e05b      	b.n	d6988 <_strtol_r+0xfc>
   d68d0:	2c30      	cmp	r4, #48	; 0x30
   d68d2:	d157      	bne.n	d6984 <_strtol_r+0xf8>
   d68d4:	7828      	ldrb	r0, [r5, #0]
   d68d6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d68da:	2858      	cmp	r0, #88	; 0x58
   d68dc:	d14d      	bne.n	d697a <_strtol_r+0xee>
   d68de:	786c      	ldrb	r4, [r5, #1]
   d68e0:	2310      	movs	r3, #16
   d68e2:	3502      	adds	r5, #2
   d68e4:	2e00      	cmp	r6, #0
   d68e6:	bf14      	ite	ne
   d68e8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d68ec:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d68f0:	2700      	movs	r7, #0
   d68f2:	fbbc faf3 	udiv	sl, ip, r3
   d68f6:	4638      	mov	r0, r7
   d68f8:	fb03 cc1a 	mls	ip, r3, sl, ip
   d68fc:	eb09 0e04 	add.w	lr, r9, r4
   d6900:	f89e e001 	ldrb.w	lr, [lr, #1]
   d6904:	f01e 0f04 	tst.w	lr, #4
   d6908:	d001      	beq.n	d690e <_strtol_r+0x82>
   d690a:	3c30      	subs	r4, #48	; 0x30
   d690c:	e00b      	b.n	d6926 <_strtol_r+0x9a>
   d690e:	f01e 0e03 	ands.w	lr, lr, #3
   d6912:	d01b      	beq.n	d694c <_strtol_r+0xc0>
   d6914:	f1be 0f01 	cmp.w	lr, #1
   d6918:	bf0c      	ite	eq
   d691a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d691e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d6922:	ebce 0404 	rsb	r4, lr, r4
   d6926:	42a3      	cmp	r3, r4
   d6928:	dd10      	ble.n	d694c <_strtol_r+0xc0>
   d692a:	f1b7 3fff 	cmp.w	r7, #4294967295
   d692e:	d00a      	beq.n	d6946 <_strtol_r+0xba>
   d6930:	4550      	cmp	r0, sl
   d6932:	d806      	bhi.n	d6942 <_strtol_r+0xb6>
   d6934:	d101      	bne.n	d693a <_strtol_r+0xae>
   d6936:	4564      	cmp	r4, ip
   d6938:	dc03      	bgt.n	d6942 <_strtol_r+0xb6>
   d693a:	fb03 4000 	mla	r0, r3, r0, r4
   d693e:	2701      	movs	r7, #1
   d6940:	e001      	b.n	d6946 <_strtol_r+0xba>
   d6942:	f04f 37ff 	mov.w	r7, #4294967295
   d6946:	f815 4b01 	ldrb.w	r4, [r5], #1
   d694a:	e7d7      	b.n	d68fc <_strtol_r+0x70>
   d694c:	1c7b      	adds	r3, r7, #1
   d694e:	d10c      	bne.n	d696a <_strtol_r+0xde>
   d6950:	2e00      	cmp	r6, #0
   d6952:	f04f 0322 	mov.w	r3, #34	; 0x22
   d6956:	bf14      	ite	ne
   d6958:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d695c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6960:	f8c8 3000 	str.w	r3, [r8]
   d6964:	b92a      	cbnz	r2, d6972 <_strtol_r+0xe6>
   d6966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d696a:	b106      	cbz	r6, d696e <_strtol_r+0xe2>
   d696c:	4240      	negs	r0, r0
   d696e:	b172      	cbz	r2, d698e <_strtol_r+0x102>
   d6970:	b107      	cbz	r7, d6974 <_strtol_r+0xe8>
   d6972:	1e69      	subs	r1, r5, #1
   d6974:	6011      	str	r1, [r2, #0]
   d6976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d697a:	2430      	movs	r4, #48	; 0x30
   d697c:	2b00      	cmp	r3, #0
   d697e:	d1b1      	bne.n	d68e4 <_strtol_r+0x58>
   d6980:	2308      	movs	r3, #8
   d6982:	e7af      	b.n	d68e4 <_strtol_r+0x58>
   d6984:	230a      	movs	r3, #10
   d6986:	e7ad      	b.n	d68e4 <_strtol_r+0x58>
   d6988:	2c30      	cmp	r4, #48	; 0x30
   d698a:	d0a3      	beq.n	d68d4 <_strtol_r+0x48>
   d698c:	e7aa      	b.n	d68e4 <_strtol_r+0x58>
   d698e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6992:	bf00      	nop
   d6994:	2003decc 	.word	0x2003decc

000d6998 <strtol>:
   d6998:	4613      	mov	r3, r2
   d699a:	460a      	mov	r2, r1
   d699c:	4601      	mov	r1, r0
   d699e:	4802      	ldr	r0, [pc, #8]	; (d69a8 <strtol+0x10>)
   d69a0:	6800      	ldr	r0, [r0, #0]
   d69a2:	f7ff bf73 	b.w	d688c <_strtol_r>
   d69a6:	bf00      	nop
   d69a8:	2003df30 	.word	0x2003df30

000d69ac <dynalib_user>:
   d69ac:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d69bc:	00000000 65725f41 53006461 70757465     ....A_read.Setup
   d69cc:	6e696620 65687369 6e690064 2d6f6420      finished.in do-
   d69dc:	6867696c 42380074 355a626c 69445654     light.8BlbZ5TVDi
   d69ec:	62734733 654a4d63 42343741 6c554963     3GsbcMJeA74BcIUl
   d69fc:	6c414e78 32783546 486b6d44 2f004f76     xNAlF5x2DmkHvO./
   d6a0c:	2f697061 6c2f7325 74686769 64252f73     api/%s/lights/%d
   d6a1c:	6174732f 7b006574 226e6f22 6c61663a     /state.{"on":fal
   d6a2c:	007d6573 6e6f227b 72743a22 007d6575     se}.{"on":true}.
   d6a3c:	2e323931 2e383631 322e3737 55500030     192.168.77.20.PU
   d6a4c:	66610054 20726574 70747468 74757020     T.after http put
   d6a5c:	66656200 2065726f 6c2d6f64 74686769     .before do-light
   d6a6c:	74664100 64207265 696c2d6f 00746867     .After do-light.
   d6a7c:	00206e6f 0066666f 746e6f43 2d746e65     on .off.Content-
   d6a8c:	65707954 70706100 6163696c 6e6f6974     Type.application
   d6a9c:	772d782f 662d7777 2d6d726f 656c7275     /x-www-form-urle
   d6aac:	646f636e 41006465 70656363 2f2a0074     ncoded.Accept.*/
   d6abc:	4820002a 2f505454 0d302e31 6c63000a     *. HTTP/1.0...cl
   d6acc:	0065736f 6e6e6f43 69746365 48006e6f     ose.Connection.H
   d6adc:	0054534f 746e6f43 2d746e65 676e654c     OST.Content-Leng
   d6aec:	50006874 0054534f 0a0d0a0d 00000000     th.POST.........

000d6afc <_ZTVN5spark13EthernetClassE>:
	...
   d6b04:	000d4bab 000d4ba1 000d4b97 000d4b8d     .K...K...K...K..
   d6b14:	000d4b81 000d4b75 000d4b69 000d4b61     .K..uK..iK..aK..
   d6b24:	000d4b57 000d4b4d 000d6211              WK..MK...b..

000d6b30 <_ZTV8SPIClass>:
	...
   d6b38:	000d4bc9 000d4bcb 64756162 72655300     .K...K..baud.Ser
   d6b48:	006c6169 69726553 00316c61 65707974     ial.Serial1.type
   d6b58:	72617000 63006d61 6900646d 6e680064     .param.cmd.id.hn
   d6b68:	74730064 66006d72 00746c69 006c766c     d.strm.filt.lvl.
   d6b78:	48646461 6c646e61 72007265 766f6d65     addHandler.remov
   d6b88:	6e614865 72656c64 756e6500 6e61486d     eHandler.enumHan
   d6b98:	72656c64 534a0073 74534e4f 6d616572     dlers.JSONStream
   d6ba8:	48676f4c 6c646e61 61007265 25007070     LogHandler.app.%
   d6bb8:	75303130 205d0020 00202c00 203a2928     010u .] ., .(): 
   d6bc8:	005b2000 65646f63 00203d20 64006925     . [.code = .%i.d
   d6bd8:	69617465 3d20736c 6e6c0020 006e6600     etails = .ln.fn.
   d6be8:	65646f63 74656400 006c6961 656e6f6e     code.detail.none
   d6bf8:	61727400 69006563 006f666e 6e726177     .trace.info.warn
   d6c08:	72726500 7000726f 63696e61 6c6c6100     .error.panic.all
   d6c18:	25005a00 6433302b 3230253a 59250075     .Z.%+03d:%02u.%Y
   d6c28:	2d6d252d 25546425 4d253a48 2553253a     -%m-%dT%H:%M:%S%
   d6c38:	7361007a 6d697463 00000065              z.asctime...

000d6c44 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d6c4c:	000d50c9 000d50cf 000d5113 000d50dd     .P...P...Q...P..
   d6c5c:	000d50cb                                .P..

000d6c60 <_ZTV9IPAddress>:
	...
   d6c68:	000d5661 000d5651 000d5653              aV..QV..SV..

000d6c74 <_ZTV9USBSerial>:
	...
   d6c7c:	000d5765 000d57b5 000d57c3 000d4e6d     eW...W...W..mN..
   d6c8c:	000d57a1 000d5767 000d577d 000d57af     .W..gW..}W...W..
   d6c9c:	000d5793 000d5761                       .W..aW..

000d6ca4 <_ZTV11USARTSerial>:
	...
   d6cac:	000d5871 000d58c1 000d58cf 000d4e6d     qX...X...X..mN..
   d6cbc:	000d5885 000d58a7 000d5893 000d58bb     .X...X...X...X..
   d6ccc:	000d5873 000d5877                       sX..wX..

000d6cd4 <_ZTV7TwoWire>:
	...
   d6cdc:	000d599d 000d59e7 000d59bf 000d599f     .Y...Y...Y...Y..
   d6cec:	000d59c7 000d59cf 000d59d7 000d59df     .Y...Y...Y...Y..

000d6cfc <_ZTVN5spark9MeshClassE>:
	...
   d6d04:	000d5a7f 000d5a75 000d5a6b 000d5a61     .Z..uZ..kZ..aZ..
   d6d14:	000d5a55 000d5a49 000d5a3d 000d5a35     UZ..IZ..=Z..5Z..
   d6d24:	000d5a2b 000d5a21 000d6211              +Z..!Z...b..

000d6d30 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6d38:	000d5c25 000d5c2b 000d6113 000d5c39     %\..+\...a..9\..
   d6d48:	000d5c27                                '\..

000d6d4c <_ZTV9TCPClient>:
	...
   d6d54:	000d4101 000d412d 000d5b9d 000d5bb7     .A..-A...[...[..
   d6d64:	000d5fb9 000d5d0b 000d5cdd 000d5be1     ._...]...\...[..
   d6d74:	000d5e95 000d5d91 000d5d3f 000d5f89     .^...]..?]..._..
   d6d84:	000d5be3 000d5c1b 000d5bc9 000d5c3d     .[...\...[..=\..
   d6d94:	000d5cbd 69726977 7200676e 20766365     .\..wiring.recv 
   d6da4:	6f727265 203d2072 00006425              error = %d..

000d6db0 <_ZTVN5spark9WiFiClassE>:
	...
   d6db8:	000d6189 000d617f 000d6175 000d612b     .a...a..ua..+a..
   d6dc8:	000d6169 000d615d 000d6151 000d6149     ia..]a..Qa..Ia..
   d6dd8:	000d613f 000d6135 000d6211              ?a..5a...b..

000d6de4 <_ZTVN5spark12NetworkClassE>:
	...
   d6dec:	000d61a9 000d61b3 000d61bd 000d61c7     .a...a...a...a..
   d6dfc:	000d61d1 000d61dd 000d61e9 000d61f5     .a...a...a...a..
   d6e0c:	000d61fd 000d6207 000d6211              .a...b...b..

000d6e18 <_ZSt7nothrow>:
	...

000d6e19 <_ctype_>:
   d6e19:	20202000 20202020 28282020 20282828     .         ((((( 
   d6e29:	20202020 20202020 20202020 20202020                     
   d6e39:	10108820 10101010 10101010 10101010      ...............
   d6e49:	04040410 04040404 10040404 10101010     ................
   d6e59:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d6e69:	01010101 01010101 01010101 10101010     ................
   d6e79:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d6e89:	02020202 02020202 02020202 10101010     ................
   d6e99:	00000020 00000000 00000000 00000000      ...............
	...

000d6f1c <__sf_fake_stdin>:
	...

000d6f3c <__sf_fake_stdout>:
	...

000d6f5c <__sf_fake_stderr>:
	...
   d6f7c:	00000043                                         C.

000d6f7e <link_const_variable_data_end>:
	...

000d6f80 <link_constructors_location>:
   d6f80:	000d431d 	.word	0x000d431d
   d6f84:	000d4439 	.word	0x000d4439
   d6f88:	000d4bb5 	.word	0x000d4bb5
   d6f8c:	000d4c19 	.word	0x000d4c19
   d6f90:	000d4e45 	.word	0x000d4e45
   d6f94:	000d4f35 	.word	0x000d4f35
   d6f98:	000d4f45 	.word	0x000d4f45
   d6f9c:	000d4f9d 	.word	0x000d4f9d
   d6fa0:	000d5b4d 	.word	0x000d5b4d
   d6fa4:	000d6195 	.word	0x000d6195
   d6fa8:	000d62dd 	.word	0x000d62dd
   d6fac:	000d64c1 	.word	0x000d64c1
   d6fb0:	000d6545 	.word	0x000d6545
   d6fb4:	000d6609 	.word	0x000d6609
   d6fb8:	000d66cd 	.word	0x000d66cd

000d6fbc <link_constructors_end>:
   d6fbc:	00000000 	.word	0x00000000
